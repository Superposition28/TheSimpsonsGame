
   Label: A:\Dev\Games\TheSimpsonsGame\PAL\reverse_engineering\Source\TODO\bsp\check.py

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 69 6D 70 6F 72 74 20 6F 73 0D 0A 69 6D 70 6F 72 import os��impor
0000000000000010 74 20 68 61 73 68 6C 69 62 0D 0A 69 6D 70 6F 72 t hashlib��impor
0000000000000020 74 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 0D 0A 69 t collections��i
0000000000000030 6D 70 6F 72 74 20 73 74 72 75 63 74 20 23 20 46 mport struct # F
0000000000000040 6F 72 20 75 6E 70 61 63 6B 69 6E 67 20 62 69 6E or unpacking bin
0000000000000050 61 72 79 20 64 61 74 61 0D 0A 69 6D 70 6F 72 74 ary data��import
0000000000000060 20 6D 61 74 68 20 23 20 46 6F 72 20 65 6E 74 72  math # For entr
0000000000000070 6F 70 79 20 63 61 6C 63 75 6C 61 74 69 6F 6E 0D opy calculation�
0000000000000080 0A 69 6D 70 6F 72 74 20 73 74 72 69 6E 67 20 23 �import string #
0000000000000090 20 46 6F 72 20 63 68 65 63 6B 69 6E 67 20 70 72  For checking pr
00000000000000A0 69 6E 74 61 62 6C 65 20 63 68 61 72 61 63 74 65 intable characte
00000000000000B0 72 73 0D 0A 69 6D 70 6F 72 74 20 61 72 67 70 61 rs��import argpa
00000000000000C0 72 73 65 0D 0A 66 72 6F 6D 20 70 61 74 68 6C 69 rse��from pathli
00000000000000D0 62 20 69 6D 70 6F 72 74 20 50 61 74 68 0D 0A 69 b import Path��i
00000000000000E0 6D 70 6F 72 74 20 67 63 0D 0A 0D 0A 23 20 2D 2D mport gc����# --
00000000000000F0 2D 20 43 6F 6E 66 69 67 75 72 61 74 69 6F 6E 20 - Configuration 
0000000000000100 2D 2D 2D 0D 0A 44 45 46 41 55 4C 54 5F 48 45 41 ---��DEFAULT_HEA
0000000000000110 44 45 52 5F 53 49 5A 45 20 3D 20 36 34 20 20 20 DER_SIZE = 64   
0000000000000120 20 20 20 20 23 20 42 79 74 65 73 20 74 6F 20 63     # Bytes to c
0000000000000130 6F 6E 73 69 64 65 72 20 66 6F 72 20 68 65 61 64 onsider for head
0000000000000140 65 72 20 63 6F 6D 70 61 72 69 73 6F 6E 0D 0A 44 er comparison��D
0000000000000150 45 46 41 55 4C 54 5F 50 41 54 54 45 52 4E 5F 4C EFAULT_PATTERN_L
0000000000000160 45 4E 47 54 48 20 3D 20 31 36 20 20 20 20 23 20 ENGTH = 16    # 
0000000000000170 4C 65 6E 67 74 68 20 6F 66 20 62 79 74 65 20 70 Length of byte p
0000000000000180 61 74 74 65 72 6E 73 20 74 6F 20 73 65 61 72 63 atterns to searc
0000000000000190 68 20 66 6F 72 0D 0A 44 45 46 41 55 4C 54 5F 4D h for��DEFAULT_M
00000000000001A0 49 4E 5F 50 41 54 54 45 52 4E 5F 43 4F 55 4E 54 IN_PATTERN_COUNT
00000000000001B0 20 3D 20 35 20 20 23 20 4D 69 6E 69 6D 75 6D 20  = 5  # Minimum 
00000000000001C0 74 69 6D 65 73 20 61 20 70 61 74 74 65 72 6E 20 times a pattern 
00000000000001D0 6D 75 73 74 20 61 70 70 65 61 72 20 74 6F 20 62 must appear to b
00000000000001E0 65 20 72 65 70 6F 72 74 65 64 0D 0A 4D 49 4E 5F e reported��MIN_
00000000000001F0 53 54 52 49 4E 47 5F 4C 45 4E 47 54 48 20 3D 20 STRING_LENGTH = 
0000000000000200 35 20 20 20 20 20 20 20 20 20 20 23 20 4D 69 6E 5          # Min
0000000000000210 69 6D 75 6D 20 6C 65 6E 67 74 68 20 66 6F 72 20 imum length for 
0000000000000220 41 53 43 49 49 20 73 74 72 69 6E 67 20 65 78 74 ASCII string ext
0000000000000230 72 61 63 74 69 6F 6E 0D 0A 4D 41 58 5F 53 54 52 raction��MAX_STR
0000000000000240 49 4E 47 53 5F 50 45 52 5F 46 49 4C 45 20 3D 20 INGS_PER_FILE = 
0000000000000250 32 30 20 20 20 20 20 20 23 20 4C 69 6D 69 74 20 20      # Limit 
0000000000000260 73 74 72 69 6E 67 73 20 72 65 70 6F 72 74 65 64 strings reported
0000000000000270 20 70 65 72 20 66 69 6C 65 0D 0A 4D 41 58 5F 4C  per file��MAX_L
0000000000000280 55 4D 50 53 5F 50 45 52 5F 46 49 4C 45 20 3D 20 UMPS_PER_FILE = 
0000000000000290 33 30 20 20 20 20 20 20 20 20 23 20 4C 69 6D 69 30        # Limi
00000000000002A0 74 20 70 6F 74 65 6E 74 69 61 6C 20 6C 75 6D 70 t potential lump
00000000000002B0 73 20 72 65 70 6F 72 74 65 64 20 70 65 72 20 66 s reported per f
00000000000002C0 69 6C 65 0D 0A 4D 41 58 5F 4C 55 4D 50 33 5F 4E ile��MAX_LUMP3_N
00000000000002D0 4F 44 45 53 5F 54 4F 5F 52 45 50 4F 52 54 20 3D ODES_TO_REPORT =
00000000000002E0 20 31 30 20 23 20 4C 69 6D 69 74 20 6E 6F 64 65  10 # Limit node
00000000000002F0 73 20 72 65 70 6F 72 74 65 64 20 70 65 72 20 66 s reported per f
0000000000000300 69 6C 65 20 66 6F 72 20 6C 75 6D 70 20 33 0D 0A ile for lump 3��
0000000000000310 0D 0A 23 20 48 65 61 64 65 72 20 46 69 65 6C 64 ��# Header Field
0000000000000320 20 4F 66 66 73 65 74 73 20 28 41 73 73 75 6D 69  Offsets (Assumi
0000000000000330 6E 67 20 42 69 67 20 45 6E 64 69 61 6E 29 0D 0A ng Big Endian)��
0000000000000340 4F 46 46 53 45 54 5F 4D 41 47 49 43 5F 56 45 52 OFFSET_MAGIC_VER
0000000000000350 20 3D 20 30 78 30 30 0D 0A 4F 46 46 53 45 54 5F  = 0x00��OFFSET_
0000000000000360 43 4F 55 4E 54 20 3D 20 30 78 30 38 0D 0A 4F 46 COUNT = 0x08��OF
0000000000000370 46 53 45 54 5F 4E 45 58 54 5F 53 45 43 54 49 4F FSET_NEXT_SECTIO
0000000000000380 4E 20 3D 20 30 78 30 43 0D 0A 4F 46 46 53 45 54 N = 0x0C��OFFSET
0000000000000390 5F 4C 55 4D 50 5F 44 49 52 5F 53 54 41 52 54 20 _LUMP_DIR_START 
00000000000003A0 3D 20 30 78 31 30 0D 0A 4F 46 46 53 45 54 5F 4C = 0x10��OFFSET_L
00000000000003B0 55 4D 50 5F 44 49 52 5F 45 4E 44 20 3D 20 30 78 UMP_DIR_END = 0x
00000000000003C0 37 30 20 23 20 55 70 20 74 6F 20 28 6E 6F 74 20 70 # Up to (not 
00000000000003D0 69 6E 63 6C 75 64 69 6E 67 29 20 30 78 37 30 0D including) 0x70�
00000000000003E0 0A 0D 0A 23 20 53 70 65 63 69 66 69 63 20 73 65 ���# Specific se
00000000000003F0 71 75 65 6E 63 65 73 20 74 6F 20 63 6F 75 6E 74 quences to count
0000000000000400 20 28 62 79 74 65 73 29 0D 0A 53 45 51 5F 4E 45  (bytes)��SEQ_NE
0000000000000410 47 5F 4F 4E 45 20 3D 20 62 27 5C 78 46 46 5C 78 G_ONE = b'\xFF\x
0000000000000420 46 46 5C 78 46 46 5C 78 46 46 27 0D 0A 53 45 51 FF\xFF\xFF'��SEQ
0000000000000430 5F 46 4C 4F 41 54 5F 4F 4E 45 20 3D 20 62 27 5C _FLOAT_ONE = b'\
0000000000000440 78 30 30 5C 78 30 30 5C 78 38 30 5C 78 33 46 27 x00\x00\x80\x3F'
0000000000000450 20 23 20 42 69 67 20 45 6E 64 69 61 6E 20 31 2E  # Big Endian 1.
0000000000000460 30 66 0D 0A 0D 0A 23 20 48 79 70 6F 74 68 65 73 0f����# Hypothes
0000000000000470 69 7A 65 64 20 4E 6F 64 65 20 53 74 72 75 63 74 ized Node Struct
0000000000000480 75 72 65 20 28 4C 75 6D 70 20 33 29 20 2D 20 42 ure (Lump 3) - B
0000000000000490 69 67 20 45 6E 64 69 61 6E 0D 0A 23 20 43 6F 72 ig Endian��# Cor
00000000000004A0 72 65 63 74 65 64 20 47 75 65 73 73 3A 20 38 20 rected Guess: 8 
00000000000004B0 66 6C 6F 61 74 73 2C 20 38 20 69 6E 74 73 20 3D floats, 8 ints =
00000000000004C0 20 31 36 20 66 69 65 6C 64 73 2C 20 36 34 20 62  16 fields, 64 b
00000000000004D0 79 74 65 73 20 74 6F 74 61 6C 0D 0A 23 20 46 69 ytes total��# Fi
00000000000004E0 65 6C 64 73 3A 20 50 6C 61 6E 65 28 34 66 29 2C elds: Plane(4f),
00000000000004F0 20 42 42 6F 78 2F 54 65 78 3F 28 34 66 29 2C 20  BBox/Tex?(4f), 
0000000000000500 46 6C 61 67 73 3F 28 69 29 2C 20 43 68 69 6C 64 Flags?(i), Child
0000000000000510 46 28 69 29 2C 20 43 68 69 6C 64 42 28 69 29 2C F(i), ChildB(i),
0000000000000520 20 55 6E 6B 31 28 69 29 2C 20 55 6E 6B 32 28 69  Unk1(i), Unk2(i
0000000000000530 29 2C 20 55 6E 6B 33 28 69 29 2C 20 55 6E 6B 34 ), Unk3(i), Unk4
0000000000000540 28 69 29 2C 20 55 6E 6B 35 28 69 29 0D 0A 4E 4F (i), Unk5(i)��NO
0000000000000550 44 45 5F 4C 55 4D 50 33 5F 46 4F 52 4D 41 54 20 DE_LUMP3_FORMAT 
0000000000000560 3D 20 22 3E 66 66 66 66 66 66 66 66 69 69 69 69 = ">ffffffffiiii
0000000000000570 69 69 69 69 22 20 23 20 38 20 66 6C 6F 61 74 73 iiii" # 8 floats
0000000000000580 2C 20 38 20 69 6E 74 73 0D 0A 4E 4F 44 45 5F 4C , 8 ints��NODE_L
0000000000000590 55 4D 50 33 5F 53 49 5A 45 20 3D 20 73 74 72 75 UMP3_SIZE = stru
00000000000005A0 63 74 2E 63 61 6C 63 73 69 7A 65 28 4E 4F 44 45 ct.calcsize(NODE
00000000000005B0 5F 4C 55 4D 50 33 5F 46 4F 52 4D 41 54 29 20 23 _LUMP3_FORMAT) #
00000000000005C0 20 53 68 6F 75 6C 64 20 62 65 20 36 34 0D 0A 0D  Should be 64���
00000000000005D0 0A 23 20 2D 2D 2D 20 45 6E 64 20 43 6F 6E 66 69 �# --- End Confi
00000000000005E0 67 75 72 61 74 69 6F 6E 20 2D 2D 2D 0D 0A 0D 0A guration ---����
00000000000005F0 23 20 48 65 6C 70 65 72 20 66 6F 72 20 65 6E 74 # Helper for ent
0000000000000600 72 6F 70 79 20 63 61 6C 63 75 6C 61 74 69 6F 6E ropy calculation
0000000000000610 0D 0A 64 65 66 20 63 61 6C 63 75 6C 61 74 65 5F ��def calculate_
0000000000000620 65 6E 74 72 6F 70 79 28 62 79 74 65 5F 64 61 74 entropy(byte_dat
0000000000000630 61 29 3A 0D 0A 20 20 20 20 22 22 22 43 61 6C 63 a):��    """Calc
0000000000000640 75 6C 61 74 65 73 20 74 68 65 20 53 68 61 6E 6E ulates the Shann
0000000000000650 6F 6E 20 65 6E 74 72 6F 70 79 20 6F 66 20 62 79 on entropy of by
0000000000000660 74 65 20 64 61 74 61 20 28 30 2D 38 29 2E 22 22 te data (0-8).""
0000000000000670 22 0D 0A 20 20 20 20 62 79 74 65 5F 63 6F 75 6E "��    byte_coun
0000000000000680 74 73 20 3D 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 ts = collections
0000000000000690 2E 43 6F 75 6E 74 65 72 28 62 79 74 65 5F 64 61 .Counter(byte_da
00000000000006A0 74 61 29 0D 0A 20 20 20 20 74 6F 74 61 6C 5F 62 ta)��    total_b
00000000000006B0 79 74 65 73 20 3D 20 6C 65 6E 28 62 79 74 65 5F ytes = len(byte_
00000000000006C0 64 61 74 61 29 0D 0A 20 20 20 20 65 6E 74 72 6F data)��    entro
00000000000006D0 70 79 20 3D 20 30 2E 30 0D 0A 20 20 20 20 69 66 py = 0.0��    if
00000000000006E0 20 74 6F 74 61 6C 5F 62 79 74 65 73 20 3D 3D 20  total_bytes == 
00000000000006F0 30 3A 0D 0A 20 20 20 20 20 20 20 20 72 65 74 75 0:��        retu
0000000000000700 72 6E 20 30 2E 30 0D 0A 0D 0A 20 20 20 20 66 6F rn 0.0����    fo
0000000000000710 72 20 63 6F 75 6E 74 20 69 6E 20 62 79 74 65 5F r count in byte_
0000000000000720 63 6F 75 6E 74 73 2E 76 61 6C 75 65 73 28 29 3A counts.values():
0000000000000730 0D 0A 20 20 20 20 20 20 20 20 70 72 6F 62 61 62 ��        probab
0000000000000740 69 6C 69 74 79 20 3D 20 63 6F 75 6E 74 20 2F 20 ility = count / 
0000000000000750 74 6F 74 61 6C 5F 62 79 74 65 73 0D 0A 20 20 20 total_bytes��   
0000000000000760 20 20 20 20 20 69 66 20 70 72 6F 62 61 62 69 6C      if probabil
0000000000000770 69 74 79 20 3E 20 30 3A 0D 0A 20 20 20 20 20 20 ity > 0:��      
0000000000000780 20 20 20 20 20 20 65 6E 74 72 6F 70 79 20 2D 3D       entropy -=
0000000000000790 20 70 72 6F 62 61 62 69 6C 69 74 79 20 2A 20 6D  probability * m
00000000000007A0 61 74 68 2E 6C 6F 67 32 28 70 72 6F 62 61 62 69 ath.log2(probabi
00000000000007B0 6C 69 74 79 29 0D 0A 20 20 20 20 72 65 74 75 72 lity)��    retur
00000000000007C0 6E 20 65 6E 74 72 6F 70 79 20 23 20 52 65 73 75 n entropy # Resu
00000000000007D0 6C 74 20 69 73 20 69 6E 20 62 69 74 73 20 70 65 lt is in bits pe
00000000000007E0 72 20 62 79 74 65 20 28 30 2D 38 20 72 61 6E 67 r byte (0-8 rang
00000000000007F0 65 29 0D 0A 0D 0A 0D 0A 64 65 66 20 66 69 6E 64 e)������def find
0000000000000800 5F 62 73 70 5F 66 69 6C 65 73 28 73 74 61 72 74 _bsp_files(start
0000000000000810 5F 64 69 72 29 3A 0D 0A 20 20 20 20 22 22 22 52 _dir):��    """R
0000000000000820 65 63 75 72 73 69 76 65 6C 79 20 66 69 6E 64 73 ecursively finds
0000000000000830 20 61 6C 6C 20 66 69 6C 65 73 20 65 6E 64 69 6E  all files endin
0000000000000840 67 20 77 69 74 68 20 2E 62 73 70 20 28 63 61 73 g with .bsp (cas
0000000000000850 65 2D 69 6E 73 65 6E 73 69 74 69 76 65 29 2E 22 e-insensitive)."
0000000000000860 22 22 0D 0A 20 20 20 20 62 73 70 5F 66 69 6C 65 ""��    bsp_file
0000000000000870 73 20 3D 20 5B 5D 0D 0A 20 20 20 20 70 72 69 6E s = []��    prin
0000000000000880 74 28 66 22 5B 2A 5D 20 53 65 61 72 63 68 69 6E t(f"[*] Searchin
0000000000000890 67 20 66 6F 72 20 2E 62 73 70 20 66 69 6C 65 73 g for .bsp files
00000000000008A0 20 69 6E 3A 20 7B 73 74 61 72 74 5F 64 69 72 7D  in: {start_dir}
00000000000008B0 22 29 0D 0A 20 20 20 20 66 6F 72 20 72 6F 6F 74 ")��    for root
00000000000008C0 2C 20 5F 2C 20 66 69 6C 65 73 20 69 6E 20 6F 73 , _, files in os
00000000000008D0 2E 77 61 6C 6B 28 73 74 61 72 74 5F 64 69 72 29 .walk(start_dir)
00000000000008E0 3A 0D 0A 20 20 20 20 20 20 20 20 66 6F 72 20 66 :��        for f
00000000000008F0 69 6C 65 20 69 6E 20 66 69 6C 65 73 3A 0D 0A 20 ile in files:�� 
0000000000000900 20 20 20 20 20 20 20 20 20 20 20 69 66 20 66 69            if fi
0000000000000910 6C 65 2E 6C 6F 77 65 72 28 29 2E 65 6E 64 73 77 le.lower().endsw
0000000000000920 69 74 68 28 22 2E 62 73 70 22 29 3A 0D 0A 20 20 ith(".bsp"):��  
0000000000000930 20 20 20 20 20 20 20 20 20 20 20 20 20 20 62 73               bs
0000000000000940 70 5F 66 69 6C 65 73 2E 61 70 70 65 6E 64 28 6F p_files.append(o
0000000000000950 73 2E 70 61 74 68 2E 6A 6F 69 6E 28 72 6F 6F 74 s.path.join(root
0000000000000960 2C 20 66 69 6C 65 29 29 0D 0A 20 20 20 20 70 72 , file))��    pr
0000000000000970 69 6E 74 28 66 22 5B 2B 5D 20 46 6F 75 6E 64 20 int(f"[+] Found 
0000000000000980 7B 6C 65 6E 28 62 73 70 5F 66 69 6C 65 73 29 7D {len(bsp_files)}
0000000000000990 20 2E 62 73 70 20 66 69 6C 65 73 2E 22 29 0D 0A  .bsp files.")��
00000000000009A0 20 20 20 20 72 65 74 75 72 6E 20 62 73 70 5F 66     return bsp_f
00000000000009B0 69 6C 65 73 0D 0A 0D 0A 64 65 66 20 61 6E 61 6C iles����def anal
00000000000009C0 79 7A 65 5F 6C 75 6D 70 5F 33 5F 64 61 74 61 28 yze_lump_3_data(
00000000000009D0 6C 75 6D 70 5F 64 61 74 61 2C 20 66 69 6C 65 6E lump_data, filen
00000000000009E0 61 6D 65 29 3A 0D 0A 20 20 20 20 22 22 22 50 61 ame):��    """Pa
00000000000009F0 72 73 65 73 20 6C 75 6D 70 20 33 20 64 61 74 61 rses lump 3 data
0000000000000A00 20 75 73 69 6E 67 20 74 68 65 20 68 79 70 6F 74  using the hypot
0000000000000A10 68 65 73 69 7A 65 64 20 36 34 2D 62 79 74 65 20 hesized 64-byte 
0000000000000A20 6E 6F 64 65 20 73 74 72 75 63 74 75 72 65 2E 22 node structure."
0000000000000A30 22 22 0D 0A 20 20 20 20 6E 6F 64 65 73 20 3D 20 ""��    nodes = 
0000000000000A40 5B 5D 0D 0A 20 20 20 20 64 61 74 61 5F 6C 65 6E []��    data_len
0000000000000A50 20 3D 20 6C 65 6E 28 6C 75 6D 70 5F 64 61 74 61  = len(lump_data
0000000000000A60 29 0D 0A 20 20 20 20 6E 75 6D 5F 6E 6F 64 65 73 )��    num_nodes
0000000000000A70 20 3D 20 64 61 74 61 5F 6C 65 6E 20 2F 2F 20 4E  = data_len // N
0000000000000A80 4F 44 45 5F 4C 55 4D 50 33 5F 53 49 5A 45 0D 0A ODE_LUMP3_SIZE��
0000000000000A90 0D 0A 20 20 20 20 69 66 20 64 61 74 61 5F 6C 65 ��    if data_le
0000000000000AA0 6E 20 25 20 4E 4F 44 45 5F 4C 55 4D 50 33 5F 53 n % NODE_LUMP3_S
0000000000000AB0 49 5A 45 20 21 3D 20 30 3A 0D 0A 20 20 20 20 20 IZE != 0:��     
0000000000000AC0 20 20 20 73 74 61 74 75 73 5F 75 70 64 61 74 65    status_update
0000000000000AD0 28 66 22 20 20 20 20 5B 21 5D 20 57 61 72 6E 69 (f"    [!] Warni
0000000000000AE0 6E 67 20 28 7B 66 69 6C 65 6E 61 6D 65 7D 29 3A ng ({filename}):
0000000000000AF0 20 4C 75 6D 70 20 33 20 73 69 7A 65 20 28 7B 64  Lump 3 size ({d
0000000000000B00 61 74 61 5F 6C 65 6E 7D 29 20 69 73 20 6E 6F 74 ata_len}) is not
0000000000000B10 20 61 20 6D 75 6C 74 69 70 6C 65 20 6F 66 20 6E  a multiple of n
0000000000000B20 6F 64 65 20 73 69 7A 65 20 28 7B 4E 4F 44 45 5F ode size ({NODE_
0000000000000B30 4C 55 4D 50 33 5F 53 49 5A 45 7D 29 2E 20 50 61 LUMP3_SIZE}). Pa
0000000000000B40 72 73 69 6E 67 20 7B 6E 75 6D 5F 6E 6F 64 65 73 rsing {num_nodes
0000000000000B50 7D 20 66 75 6C 6C 20 6E 6F 64 65 73 2E 22 2C 20 } full nodes.", 
0000000000000B60 6E 65 77 6C 69 6E 65 3D 54 72 75 65 29 0D 0A 0D newline=True)���
0000000000000B70 0A 20 20 20 20 69 66 20 6E 75 6D 5F 6E 6F 64 65 �    if num_node
0000000000000B80 73 20 3D 3D 20 30 3A 0D 0A 20 20 20 20 20 20 20 s == 0:��       
0000000000000B90 20 72 65 74 75 72 6E 20 22 4C 75 6D 70 20 33 20  return "Lump 3 
0000000000000BA0 64 61 74 61 20 69 73 20 74 6F 6F 20 73 6D 61 6C data is too smal
0000000000000BB0 6C 20 74 6F 20 63 6F 6E 74 61 69 6E 20 61 6E 79 l to contain any
0000000000000BC0 20 6E 6F 64 65 73 2E 22 0D 0A 0D 0A 20 20 20 20  nodes."����    
0000000000000BD0 66 6F 72 20 69 20 69 6E 20 72 61 6E 67 65 28 6E for i in range(n
0000000000000BE0 75 6D 5F 6E 6F 64 65 73 29 3A 0D 0A 20 20 20 20 um_nodes):��    
0000000000000BF0 20 20 20 20 6F 66 66 73 65 74 20 3D 20 69 20 2A     offset = i *
0000000000000C00 20 4E 4F 44 45 5F 4C 55 4D 50 33 5F 53 49 5A 45  NODE_LUMP3_SIZE
0000000000000C10 0D 0A 20 20 20 20 20 20 20 20 6E 6F 64 65 5F 62 ��        node_b
0000000000000C20 79 74 65 73 20 3D 20 6C 75 6D 70 5F 64 61 74 61 ytes = lump_data
0000000000000C30 5B 6F 66 66 73 65 74 20 3A 20 6F 66 66 73 65 74 [offset : offset
0000000000000C40 20 2B 20 4E 4F 44 45 5F 4C 55 4D 50 33 5F 53 49  + NODE_LUMP3_SI
0000000000000C50 5A 45 5D 0D 0A 20 20 20 20 20 20 20 20 74 72 79 ZE]��        try
0000000000000C60 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 70 :��            p
0000000000000C70 61 72 73 65 64 5F 6E 6F 64 65 20 3D 20 73 74 72 arsed_node = str
0000000000000C80 75 63 74 2E 75 6E 70 61 63 6B 28 4E 4F 44 45 5F uct.unpack(NODE_
0000000000000C90 4C 55 4D 50 33 5F 46 4F 52 4D 41 54 2C 20 6E 6F LUMP3_FORMAT, no
0000000000000CA0 64 65 5F 62 79 74 65 73 29 0D 0A 20 20 20 20 20 de_bytes)��     
0000000000000CB0 20 20 20 20 20 20 20 6E 6F 64 65 73 2E 61 70 70        nodes.app
0000000000000CC0 65 6E 64 28 70 61 72 73 65 64 5F 6E 6F 64 65 29 end(parsed_node)
0000000000000CD0 0D 0A 20 20 20 20 20 20 20 20 65 78 63 65 70 74 ��        except
0000000000000CE0 20 73 74 72 75 63 74 2E 65 72 72 6F 72 20 61 73  struct.error as
0000000000000CF0 20 65 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20  e:��           
0000000000000D00 20 72 65 74 75 72 6E 20 66 22 45 72 72 6F 72 20  return f"Error 
0000000000000D10 75 6E 70 61 63 6B 69 6E 67 20 6E 6F 64 65 20 7B unpacking node {
0000000000000D20 69 7D 20 69 6E 20 7B 66 69 6C 65 6E 61 6D 65 7D i} in {filename}
0000000000000D30 3A 20 7B 65 7D 22 0D 0A 20 20 20 20 20 20 20 20 : {e}"��        
0000000000000D40 65 78 63 65 70 74 20 45 78 63 65 70 74 69 6F 6E except Exception
0000000000000D50 20 61 73 20 65 3A 0D 0A 20 20 20 20 20 20 20 20  as e:��        
0000000000000D60 20 20 20 20 20 72 65 74 75 72 6E 20 66 22 55 6E      return f"Un
0000000000000D70 65 78 70 65 63 74 65 64 20 65 72 72 6F 72 20 70 expected error p
0000000000000D80 61 72 73 69 6E 67 20 6E 6F 64 65 20 7B 69 7D 20 arsing node {i} 
0000000000000D90 69 6E 20 7B 66 69 6C 65 6E 61 6D 65 7D 3A 20 7B in {filename}: {
0000000000000DA0 65 7D 22 0D 0A 0D 0A 20 20 20 20 72 65 74 75 72 e}"����    retur
0000000000000DB0 6E 20 6E 6F 64 65 73 0D 0A 0D 0A 0D 0A 64 65 66 n nodes������def
0000000000000DC0 20 61 6E 61 6C 79 7A 65 5F 66 69 6C 65 28 66 69  analyze_file(fi
0000000000000DD0 6C 65 70 61 74 68 2C 20 68 65 61 64 65 72 5F 73 lepath, header_s
0000000000000DE0 69 7A 65 2C 20 70 61 74 74 65 72 6E 5F 6C 65 6E ize, pattern_len
0000000000000DF0 67 74 68 29 3A 0D 0A 20 20 20 20 22 22 22 0D 0A gth):��    """��
0000000000000E00 20 20 20 20 41 6E 61 6C 79 7A 65 73 20 61 20 73     Analyzes a s
0000000000000E10 69 6E 67 6C 65 20 42 53 50 20 66 69 6C 65 20 66 ingle BSP file f
0000000000000E20 6F 72 20 68 65 61 64 65 72 20 68 61 73 68 2C 20 or header hash, 
0000000000000E30 66 69 65 6C 64 73 2C 20 70 61 74 74 65 72 6E 73 fields, patterns
0000000000000E40 2C 20 73 74 72 69 6E 67 73 2C 20 65 74 63 2E 0D , strings, etc.�
0000000000000E50 0A 20 20 20 20 52 65 61 64 73 20 74 68 65 20 45 �    Reads the E
0000000000000E60 4E 54 49 52 45 20 66 69 6C 65 2E 0D 0A 20 20 20 NTIRE file.��   
0000000000000E70 20 22 22 22 0D 0A 20 20 20 20 72 65 73 75 6C 74  """��    result
0000000000000E80 73 20 3D 20 7B 0D 0A 20 20 20 20 20 20 20 20 27 s = {��        '
0000000000000E90 66 69 6C 65 70 61 74 68 27 3A 20 66 69 6C 65 70 filepath': filep
0000000000000EA0 61 74 68 2C 0D 0A 20 20 20 20 20 20 20 20 27 66 ath,��        'f
0000000000000EB0 69 6C 65 6E 61 6D 65 27 3A 20 50 61 74 68 28 66 ilename': Path(f
0000000000000EC0 69 6C 65 70 61 74 68 29 2E 6E 61 6D 65 2C 0D 0A ilepath).name,��
0000000000000ED0 20 20 20 20 20 20 20 20 27 65 72 72 6F 72 27 3A         'error':
0000000000000EE0 20 4E 6F 6E 65 2C 0D 0A 20 20 20 20 20 20 20 20  None,��        
0000000000000EF0 27 73 69 7A 65 27 3A 20 30 2C 0D 0A 20 20 20 20 'size': 0,��    
0000000000000F00 20 20 20 20 27 68 65 61 64 65 72 5F 68 61 73 68     'header_hash
0000000000000F10 27 3A 20 4E 6F 6E 65 2C 0D 0A 20 20 20 20 20 20 ': None,��      
0000000000000F20 20 20 27 68 65 61 64 65 72 5F 66 69 65 6C 64 73   'header_fields
0000000000000F30 27 3A 20 7B 7D 2C 0D 0A 20 20 20 20 20 20 20 20 ': {},��        
0000000000000F40 27 66 72 65 71 75 65 6E 74 5F 70 61 74 74 65 72 'frequent_patter
0000000000000F50 6E 73 27 3A 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 ns': collections
0000000000000F60 2E 43 6F 75 6E 74 65 72 28 29 2C 0D 0A 20 20 20 .Counter(),��   
0000000000000F70 20 20 20 20 20 27 73 70 65 63 69 66 69 63 5F 63      'specific_c
0000000000000F80 6F 75 6E 74 73 27 3A 20 7B 7D 2C 0D 0A 20 20 20 ounts': {},��   
0000000000000F90 20 20 20 20 20 27 65 6E 74 72 6F 70 79 27 3A 20      'entropy': 
0000000000000FA0 30 2E 30 2C 0D 0A 20 20 20 20 20 20 20 20 27 73 0.0,��        's
0000000000000FB0 74 72 69 6E 67 73 27 3A 20 5B 5D 2C 0D 0A 20 20 trings': [],��  
0000000000000FC0 20 20 20 20 20 20 27 70 6F 74 65 6E 74 69 61 6C       'potential
0000000000000FD0 5F 6C 75 6D 70 73 27 3A 20 5B 5D 2C 0D 0A 20 20 _lumps': [],��  
0000000000000FE0 20 20 20 20 20 20 27 6C 75 6D 70 5F 33 5F 6E 6F       'lump_3_no
0000000000000FF0 64 65 73 27 3A 20 4E 6F 6E 65 20 23 20 41 64 64 des': None # Add
0000000000001000 65 64 20 66 6F 72 20 6C 75 6D 70 20 33 20 61 6E ed for lump 3 an
0000000000001010 61 6C 79 73 69 73 0D 0A 20 20 20 20 7D 0D 0A 20 alysis��    }�� 
0000000000001020 20 20 20 66 75 6C 6C 5F 64 61 74 61 20 3D 20 4E    full_data = N
0000000000001030 6F 6E 65 0D 0A 0D 0A 20 20 20 20 74 72 79 3A 0D one����    try:�
0000000000001040 0A 20 20 20 20 20 20 20 20 72 65 73 75 6C 74 73 �        results
0000000000001050 5B 27 73 69 7A 65 27 5D 20 3D 20 6F 73 2E 70 61 ['size'] = os.pa
0000000000001060 74 68 2E 67 65 74 73 69 7A 65 28 66 69 6C 65 70 th.getsize(filep
0000000000001070 61 74 68 29 0D 0A 20 20 20 20 20 20 20 20 73 74 ath)��        st
0000000000001080 61 74 75 73 5F 75 70 64 61 74 65 28 66 22 20 20 atus_update(f"  
0000000000001090 20 20 2D 20 52 65 61 64 69 6E 67 20 7B 72 65 73   - Reading {res
00000000000010A0 75 6C 74 73 5B 27 73 69 7A 65 27 5D 20 2F 20 28 ults['size'] / (
00000000000010B0 31 30 32 34 2A 31 30 32 34 29 3A 2E 32 66 7D 20 1024*1024):.2f} 
00000000000010C0 4D 42 2E 2E 2E 22 29 0D 0A 0D 0A 20 20 20 20 20 MB...")����     
00000000000010D0 20 20 20 77 69 74 68 20 6F 70 65 6E 28 66 69 6C    with open(fil
00000000000010E0 65 70 61 74 68 2C 20 27 72 62 27 29 20 61 73 20 epath, 'rb') as 
00000000000010F0 66 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 f:��            
0000000000001100 66 75 6C 6C 5F 64 61 74 61 20 3D 20 66 2E 72 65 full_data = f.re
0000000000001110 61 64 28 29 0D 0A 20 20 20 20 20 20 20 20 20 20 ad()��          
0000000000001120 20 20 64 61 74 61 5F 6C 65 6E 20 3D 20 6C 65 6E   data_len = len
0000000000001130 28 66 75 6C 6C 5F 64 61 74 61 29 0D 0A 0D 0A 20 (full_data)���� 
0000000000001140 20 20 20 20 20 20 20 23 20 2D 2D 2D 20 41 6E 61        # --- Ana
0000000000001150 6C 79 73 69 73 20 53 74 61 67 65 20 2D 2D 2D 0D lysis Stage ---�
0000000000001160 0A 20 20 20 20 20 20 20 20 73 74 61 74 75 73 5F �        status_
0000000000001170 75 70 64 61 74 65 28 22 20 20 20 20 2D 20 41 6E update("    - An
0000000000001180 61 6C 79 7A 69 6E 67 20 48 65 61 64 65 72 2E 2E alyzing Header..
0000000000001190 2E 22 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 23 .")����        #
00000000000011A0 20 31 2E 20 48 65 61 64 65 72 20 48 61 73 68 20  1. Header Hash 
00000000000011B0 26 20 46 69 65 6C 64 73 0D 0A 20 20 20 20 20 20 & Fields��      
00000000000011C0 20 20 68 65 61 64 65 72 5F 64 61 74 61 20 3D 20   header_data = 
00000000000011D0 66 75 6C 6C 5F 64 61 74 61 5B 3A 68 65 61 64 65 full_data[:heade
00000000000011E0 72 5F 73 69 7A 65 5D 0D 0A 20 20 20 20 20 20 20 r_size]��       
00000000000011F0 20 69 66 20 64 61 74 61 5F 6C 65 6E 20 3E 20 30  if data_len > 0
0000000000001200 20 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20  :��            
0000000000001210 72 65 73 75 6C 74 73 5B 27 68 65 61 64 65 72 5F results['header_
0000000000001220 68 61 73 68 27 5D 20 3D 20 68 61 73 68 6C 69 62 hash'] = hashlib
0000000000001230 2E 73 68 61 32 35 36 28 68 65 61 64 65 72 5F 64 .sha256(header_d
0000000000001240 61 74 61 29 2E 68 65 78 64 69 67 65 73 74 28 29 ata).hexdigest()
0000000000001250 0D 0A 20 20 20 20 20 20 20 20 65 6C 73 65 3A 20 ��        else: 
0000000000001260 23 20 45 6D 70 74 79 20 66 69 6C 65 0D 0A 20 20 # Empty file��  
0000000000001270 20 20 20 20 20 20 20 20 20 20 20 72 65 73 75 6C            resul
0000000000001280 74 73 5B 27 68 65 61 64 65 72 5F 68 61 73 68 27 ts['header_hash'
0000000000001290 5D 20 3D 20 68 61 73 68 6C 69 62 2E 73 68 61 32 ] = hashlib.sha2
00000000000012A0 35 36 28 62 27 27 29 2E 68 65 78 64 69 67 65 73 56(b'').hexdiges
00000000000012B0 74 28 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 23 t()����        #
00000000000012C0 20 55 6E 70 61 63 6B 20 73 70 65 63 69 66 69 63  Unpack specific
00000000000012D0 20 68 65 61 64 65 72 20 66 69 65 6C 64 73 20 28  header fields (
00000000000012E0 42 69 67 20 45 6E 64 69 61 6E 20 3E 29 0D 0A 20 Big Endian >)�� 
00000000000012F0 20 20 20 20 20 20 20 69 66 20 64 61 74 61 5F 6C        if data_l
0000000000001300 65 6E 20 3E 3D 20 34 3A 0D 0A 20 20 20 20 20 20 en >= 4:��      
0000000000001310 20 20 20 20 20 20 20 72 65 73 75 6C 74 73 5B 27        results['
0000000000001320 68 65 61 64 65 72 5F 66 69 65 6C 64 73 27 5D 5B header_fields'][
0000000000001330 27 6D 61 67 69 63 5F 76 65 72 27 5D 20 3D 20 73 'magic_ver'] = s
0000000000001340 74 72 75 63 74 2E 75 6E 70 61 63 6B 28 27 3E 49 truct.unpack('>I
0000000000001350 27 2C 20 66 75 6C 6C 5F 64 61 74 61 5B 4F 46 46 ', full_data[OFF
0000000000001360 53 45 54 5F 4D 41 47 49 43 5F 56 45 52 3A 4F 46 SET_MAGIC_VER:OF
0000000000001370 46 53 45 54 5F 4D 41 47 49 43 5F 56 45 52 2B 34 FSET_MAGIC_VER+4
0000000000001380 5D 29 5B 30 5D 0D 0A 20 20 20 20 20 20 20 20 69 ])[0]��        i
0000000000001390 66 20 64 61 74 61 5F 6C 65 6E 20 3E 3D 20 4F 46 f data_len >= OF
00000000000013A0 46 53 45 54 5F 43 4F 55 4E 54 20 2B 20 34 3A 0D FSET_COUNT + 4:�
00000000000013B0 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 72 65 �             re
00000000000013C0 73 75 6C 74 73 5B 27 68 65 61 64 65 72 5F 66 69 sults['header_fi
00000000000013D0 65 6C 64 73 27 5D 5B 27 63 6F 75 6E 74 5F 30 78 elds']['count_0x
00000000000013E0 30 38 27 5D 20 3D 20 73 74 72 75 63 74 2E 75 6E 08'] = struct.un
00000000000013F0 70 61 63 6B 28 27 3E 49 27 2C 20 66 75 6C 6C 5F pack('>I', full_
0000000000001400 64 61 74 61 5B 4F 46 46 53 45 54 5F 43 4F 55 4E data[OFFSET_COUN
0000000000001410 54 3A 4F 46 46 53 45 54 5F 43 4F 55 4E 54 2B 34 T:OFFSET_COUNT+4
0000000000001420 5D 29 5B 30 5D 0D 0A 20 20 20 20 20 20 20 20 69 ])[0]��        i
0000000000001430 66 20 64 61 74 61 5F 6C 65 6E 20 3E 3D 20 4F 46 f data_len >= OF
0000000000001440 46 53 45 54 5F 4E 45 58 54 5F 53 45 43 54 49 4F FSET_NEXT_SECTIO
0000000000001450 4E 20 2B 20 34 3A 0D 0A 20 20 20 20 20 20 20 20 N + 4:��        
0000000000001460 20 20 20 20 20 72 65 73 75 6C 74 73 5B 27 68 65      results['he
0000000000001470 61 64 65 72 5F 66 69 65 6C 64 73 27 5D 5B 27 6F ader_fields']['o
0000000000001480 66 66 73 65 74 5F 30 78 30 43 27 5D 20 3D 20 73 ffset_0x0C'] = s
0000000000001490 74 72 75 63 74 2E 75 6E 70 61 63 6B 28 27 3E 49 truct.unpack('>I
00000000000014A0 27 2C 20 66 75 6C 6C 5F 64 61 74 61 5B 4F 46 46 ', full_data[OFF
00000000000014B0 53 45 54 5F 4E 45 58 54 5F 53 45 43 54 49 4F 4E SET_NEXT_SECTION
00000000000014C0 3A 4F 46 46 53 45 54 5F 4E 45 58 54 5F 53 45 43 :OFFSET_NEXT_SEC
00000000000014D0 54 49 4F 4E 2B 34 5D 29 5B 30 5D 0D 0A 0D 0A 20 TION+4])[0]���� 
00000000000014E0 20 20 20 20 20 20 20 23 20 32 2E 20 50 6F 74 65        # 2. Pote
00000000000014F0 6E 74 69 61 6C 20 4C 75 6D 70 20 44 69 72 65 63 ntial Lump Direc
0000000000001500 74 6F 72 79 20 28 53 70 65 63 75 6C 61 74 69 76 tory (Speculativ
0000000000001510 65 29 0D 0A 20 20 20 20 20 20 20 20 73 74 61 74 e)��        stat
0000000000001520 75 73 5F 75 70 64 61 74 65 28 22 20 20 20 20 2D us_update("    -
0000000000001530 20 41 6E 61 6C 79 7A 69 6E 67 20 4C 75 6D 70 73  Analyzing Lumps
0000000000001540 2E 2E 2E 22 29 0D 0A 20 20 20 20 20 20 20 20 69 ...")��        i
0000000000001550 66 20 64 61 74 61 5F 6C 65 6E 20 3E 3D 20 4F 46 f data_len >= OF
0000000000001560 46 53 45 54 5F 4C 55 4D 50 5F 44 49 52 5F 45 4E FSET_LUMP_DIR_EN
0000000000001570 44 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 D:��            
0000000000001580 6C 75 6D 70 5F 64 69 72 5F 64 61 74 61 20 3D 20 lump_dir_data = 
0000000000001590 66 75 6C 6C 5F 64 61 74 61 5B 4F 46 46 53 45 54 full_data[OFFSET
00000000000015A0 5F 4C 55 4D 50 5F 44 49 52 5F 53 54 41 52 54 3A _LUMP_DIR_START:
00000000000015B0 4F 46 46 53 45 54 5F 4C 55 4D 50 5F 44 49 52 5F OFFSET_LUMP_DIR_
00000000000015C0 45 4E 44 5D 0D 0A 20 20 20 20 20 20 20 20 20 20 END]��          
00000000000015D0 20 20 6E 75 6D 5F 70 6F 74 65 6E 74 69 61 6C 5F   num_potential_
00000000000015E0 6C 75 6D 70 73 20 3D 20 6C 65 6E 28 6C 75 6D 70 lumps = len(lump
00000000000015F0 5F 64 69 72 5F 64 61 74 61 29 20 2F 2F 20 38 20 _dir_data) // 8 
0000000000001600 23 20 41 73 73 75 6D 69 6E 67 20 38 20 62 79 74 # Assuming 8 byt
0000000000001610 65 73 20 70 65 72 20 65 6E 74 72 79 20 28 4F 66 es per entry (Of
0000000000001620 66 73 65 74 2C 20 4C 65 6E 67 74 68 29 0D 0A 20 fset, Length)�� 
0000000000001630 20 20 20 20 20 20 20 20 20 20 20 66 6F 72 20 69            for i
0000000000001640 20 69 6E 20 72 61 6E 67 65 28 6E 75 6D 5F 70 6F  in range(num_po
0000000000001650 74 65 6E 74 69 61 6C 5F 6C 75 6D 70 73 29 3A 0D tential_lumps):�
0000000000001660 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 �               
0000000000001670 20 74 72 79 3A 0D 0A 20 20 20 20 20 20 20 20 20  try:��         
0000000000001680 20 20 20 20 20 20 20 20 20 20 20 6F 66 66 73 65            offse
0000000000001690 74 2C 20 6C 65 6E 67 74 68 20 3D 20 73 74 72 75 t, length = stru
00000000000016A0 63 74 2E 75 6E 70 61 63 6B 28 27 3E 49 49 27 2C ct.unpack('>II',
00000000000016B0 20 6C 75 6D 70 5F 64 69 72 5F 64 61 74 61 5B 69  lump_dir_data[i
00000000000016C0 2A 38 20 3A 20 69 2A 38 2B 38 5D 29 0D 0A 20 20 *8 : i*8+8])��  
00000000000016D0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000016E0 20 20 23 20 42 61 73 69 63 20 76 61 6C 69 64 69   # Basic validi
00000000000016F0 74 79 20 63 68 65 63 6B 73 0D 0A 20 20 20 20 20 ty checks��     
0000000000001700 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69                i
0000000000001710 66 20 6C 65 6E 67 74 68 20 3E 20 30 20 61 6E 64 f length > 0 and
0000000000001720 20 6F 66 66 73 65 74 20 3E 3D 20 4F 46 46 53 45  offset >= OFFSE
0000000000001730 54 5F 4C 55 4D 50 5F 44 49 52 5F 45 4E 44 20 61 T_LUMP_DIR_END a
0000000000001740 6E 64 20 28 6F 66 66 73 65 74 20 2B 20 6C 65 6E nd (offset + len
0000000000001750 67 74 68 29 20 3C 3D 20 64 61 74 61 5F 6C 65 6E gth) <= data_len
0000000000001760 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 :��             
0000000000001770 20 20 20 20 20 20 20 20 20 20 20 20 72 65 73 75             resu
0000000000001780 6C 74 73 5B 27 70 6F 74 65 6E 74 69 61 6C 5F 6C lts['potential_l
0000000000001790 75 6D 70 73 27 5D 2E 61 70 70 65 6E 64 28 7B 27 umps'].append({'
00000000000017A0 69 64 27 3A 20 69 2C 20 27 6F 66 66 73 65 74 27 id': i, 'offset'
00000000000017B0 3A 20 6F 66 66 73 65 74 2C 20 27 6C 65 6E 67 74 : offset, 'lengt
00000000000017C0 68 27 3A 20 6C 65 6E 67 74 68 7D 29 0D 0A 20 20 h': length})��  
00000000000017D0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000017E0 20 20 23 20 41 64 64 20 6C 65 73 73 20 73 74 72   # Add less str
00000000000017F0 69 63 74 20 63 68 65 63 6B 3F 20 4D 61 79 62 65 ict check? Maybe
0000000000001800 20 6C 65 6E 67 74 68 20 30 20 69 73 20 6F 6B 61  length 0 is oka
0000000000001810 79 3F 20 4F 72 20 6F 66 66 73 65 74 20 77 69 74 y? Or offset wit
0000000000001820 68 69 6E 20 68 65 61 64 65 72 3F 20 41 64 64 20 hin header? Add 
0000000000001830 69 66 20 6E 65 65 64 65 64 2E 0D 0A 20 20 20 20 if needed.��    
0000000000001840 20 20 20 20 20 20 20 20 20 20 20 20 65 78 63 65             exce
0000000000001850 70 74 20 73 74 72 75 63 74 2E 65 72 72 6F 72 3A pt struct.error:
0000000000001860 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ��              
0000000000001870 20 20 20 20 20 20 62 72 65 61 6B 20 23 20 53 74       break # St
0000000000001880 6F 70 20 69 66 20 75 6E 70 61 63 6B 69 6E 67 20 op if unpacking 
0000000000001890 66 61 69 6C 73 20 28 65 2E 67 2E 2C 20 6E 6F 74 fails (e.g., not
00000000000018A0 20 65 6E 6F 75 67 68 20 64 61 74 61 29 0D 0A 0D  enough data)���
00000000000018B0 0A 20 20 20 20 20 20 20 20 23 20 32 62 2E 20 41 �        # 2b. A
00000000000018C0 6E 61 6C 79 7A 65 20 4C 75 6D 70 20 33 20 44 61 nalyze Lump 3 Da
00000000000018D0 74 61 20 28 69 66 20 66 6F 75 6E 64 29 0D 0A 20 ta (if found)�� 
00000000000018E0 20 20 20 20 20 20 20 73 74 61 74 75 73 5F 75 70        status_up
00000000000018F0 64 61 74 65 28 22 20 20 20 20 2D 20 41 6E 61 6C date("    - Anal
0000000000001900 79 7A 69 6E 67 20 4C 75 6D 70 20 33 2E 2E 2E 22 yzing Lump 3..."
0000000000001910 29 0D 0A 20 20 20 20 20 20 20 20 6C 75 6D 70 33 )��        lump3
0000000000001920 5F 69 6E 66 6F 20 3D 20 6E 65 78 74 28 28 6C 75 _info = next((lu
0000000000001930 6D 70 20 66 6F 72 20 6C 75 6D 70 20 69 6E 20 72 mp for lump in r
0000000000001940 65 73 75 6C 74 73 5B 27 70 6F 74 65 6E 74 69 61 esults['potentia
0000000000001950 6C 5F 6C 75 6D 70 73 27 5D 20 69 66 20 6C 75 6D l_lumps'] if lum
0000000000001960 70 5B 27 69 64 27 5D 20 3D 3D 20 33 29 2C 20 4E p['id'] == 3), N
0000000000001970 6F 6E 65 29 0D 0A 20 20 20 20 20 20 20 20 69 66 one)��        if
0000000000001980 20 6C 75 6D 70 33 5F 69 6E 66 6F 3A 0D 0A 20 20  lump3_info:��  
0000000000001990 20 20 20 20 20 20 20 20 20 20 6C 75 6D 70 33 5F           lump3_
00000000000019A0 6F 66 66 73 65 74 20 3D 20 6C 75 6D 70 33 5F 69 offset = lump3_i
00000000000019B0 6E 66 6F 5B 27 6F 66 66 73 65 74 27 5D 0D 0A 20 nfo['offset']�� 
00000000000019C0 20 20 20 20 20 20 20 20 20 20 20 6C 75 6D 70 33            lump3
00000000000019D0 5F 6C 65 6E 67 74 68 20 3D 20 6C 75 6D 70 33 5F _length = lump3_
00000000000019E0 69 6E 66 6F 5B 27 6C 65 6E 67 74 68 27 5D 0D 0A info['length']��
00000000000019F0 20 20 20 20 20 20 20 20 20 20 20 20 23 20 45 6E             # En
0000000000001A00 73 75 72 65 20 77 65 20 64 6F 6E 27 74 20 72 65 sure we don't re
0000000000001A10 61 64 20 70 61 73 74 20 74 68 65 20 65 6E 64 20 ad past the end 
0000000000001A20 6F 66 20 74 68 65 20 66 69 6C 65 20 64 61 74 61 of the file data
0000000000001A30 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 69 66 ��            if
0000000000001A40 20 6C 75 6D 70 33 5F 6F 66 66 73 65 74 20 2B 20  lump3_offset + 
0000000000001A50 6C 75 6D 70 33 5F 6C 65 6E 67 74 68 20 3C 3D 20 lump3_length <= 
0000000000001A60 64 61 74 61 5F 6C 65 6E 3A 0D 0A 20 20 20 20 20 data_len:��     
0000000000001A70 20 20 20 20 20 20 20 20 20 20 20 6C 75 6D 70 33            lump3
0000000000001A80 5F 64 61 74 61 20 3D 20 66 75 6C 6C 5F 64 61 74 _data = full_dat
0000000000001A90 61 5B 6C 75 6D 70 33 5F 6F 66 66 73 65 74 20 3A a[lump3_offset :
0000000000001AA0 20 6C 75 6D 70 33 5F 6F 66 66 73 65 74 20 2B 20  lump3_offset + 
0000000000001AB0 6C 75 6D 70 33 5F 6C 65 6E 67 74 68 5D 0D 0A 20 lump3_length]�� 
0000000000001AC0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 72                r
0000000000001AD0 65 73 75 6C 74 73 5B 27 6C 75 6D 70 5F 33 5F 6E esults['lump_3_n
0000000000001AE0 6F 64 65 73 27 5D 20 3D 20 61 6E 61 6C 79 7A 65 odes'] = analyze
0000000000001AF0 5F 6C 75 6D 70 5F 33 5F 64 61 74 61 28 6C 75 6D _lump_3_data(lum
0000000000001B00 70 33 5F 64 61 74 61 2C 20 72 65 73 75 6C 74 73 p3_data, results
0000000000001B10 5B 27 66 69 6C 65 6E 61 6D 65 27 5D 29 0D 0A 20 ['filename'])�� 
0000000000001B20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 64                d
0000000000001B30 65 6C 20 6C 75 6D 70 33 5F 64 61 74 61 20 23 20 el lump3_data # 
0000000000001B40 46 72 65 65 20 6D 65 6D 6F 72 79 0D 0A 20 20 20 Free memory��   
0000000000001B50 20 20 20 20 20 20 20 20 20 65 6C 73 65 3A 0D 0A          else:��
0000000000001B60 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000001B70 20 72 65 73 75 6C 74 73 5B 27 6C 75 6D 70 5F 33  results['lump_3
0000000000001B80 5F 6E 6F 64 65 73 27 5D 20 3D 20 66 22 4C 75 6D _nodes'] = f"Lum
0000000000001B90 70 20 33 20 64 65 66 69 6E 69 74 69 6F 6E 20 70 p 3 definition p
0000000000001BA0 6F 69 6E 74 73 20 6F 75 74 73 69 64 65 20 66 69 oints outside fi
0000000000001BB0 6C 65 20 62 6F 75 6E 64 73 20 28 4F 66 66 73 65 le bounds (Offse
0000000000001BC0 74 3A 20 7B 6C 75 6D 70 33 5F 6F 66 66 73 65 74 t: {lump3_offset
0000000000001BD0 7D 2C 20 4C 65 6E 67 74 68 3A 20 7B 6C 75 6D 70 }, Length: {lump
0000000000001BE0 33 5F 6C 65 6E 67 74 68 7D 2C 20 46 69 6C 65 20 3_length}, File 
0000000000001BF0 53 69 7A 65 3A 20 7B 64 61 74 61 5F 6C 65 6E 7D Size: {data_len}
0000000000001C00 29 22 0D 0A 20 20 20 20 20 20 20 20 65 6C 73 65 )"��        else
0000000000001C10 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 23 :��            #
0000000000001C20 20 43 68 65 63 6B 20 69 66 20 6C 75 6D 70 20 64  Check if lump d
0000000000001C30 69 72 20 70 61 72 73 69 6E 67 20 73 74 6F 70 70 ir parsing stopp
0000000000001C40 65 64 20 65 61 72 6C 79 20 6F 72 20 69 66 20 6C ed early or if l
0000000000001C50 75 6D 70 20 33 20 6A 75 73 74 20 77 61 73 6E 27 ump 3 just wasn'
0000000000001C60 74 20 76 61 6C 69 64 0D 0A 20 20 20 20 20 20 20 t valid��       
0000000000001C70 20 20 20 20 20 69 66 20 64 61 74 61 5F 6C 65 6E      if data_len
0000000000001C80 20 3E 3D 20 4F 46 46 53 45 54 5F 4C 55 4D 50 5F  >= OFFSET_LUMP_
0000000000001C90 44 49 52 5F 53 54 41 52 54 20 2B 20 28 33 20 2A DIR_START + (3 *
0000000000001CA0 20 38 29 20 2B 20 38 3A 20 23 20 43 68 65 63 6B  8) + 8: # Check
0000000000001CB0 20 69 66 20 65 6E 6F 75 67 68 20 64 61 74 61 20  if enough data 
0000000000001CC0 65 78 69 73 74 65 64 20 66 6F 72 20 6C 75 6D 70 existed for lump
0000000000001CD0 20 33 20 65 6E 74 72 79 0D 0A 20 20 20 20 20 20  3 entry��      
0000000000001CE0 20 20 20 20 20 20 20 20 20 20 20 72 65 73 75 6C            resul
0000000000001CF0 74 73 5B 27 6C 75 6D 70 5F 33 5F 6E 6F 64 65 73 ts['lump_3_nodes
0000000000001D00 27 5D 20 3D 20 22 4C 75 6D 70 20 33 20 65 6E 74 '] = "Lump 3 ent
0000000000001D10 72 79 20 6E 6F 74 20 66 6F 75 6E 64 20 6F 72 20 ry not found or 
0000000000001D20 69 6E 76 61 6C 69 64 20 69 6E 20 68 65 61 64 65 invalid in heade
0000000000001D30 72 20 73 65 63 74 69 6F 6E 20 30 78 31 30 2D 30 r section 0x10-0
0000000000001D40 78 36 46 2E 22 0D 0A 20 20 20 20 20 20 20 20 20 x6F."��         
0000000000001D50 20 20 20 23 20 65 6C 73 65 3A 20 6C 75 6D 70 20    # else: lump 
0000000000001D60 64 69 72 20 64 61 74 61 20 77 61 73 20 74 6F 6F dir data was too
0000000000001D70 20 73 68 6F 72 74 2C 20 61 6C 72 65 61 64 79 20  short, already 
0000000000001D80 68 61 6E 64 6C 65 64 20 69 6D 70 6C 69 63 69 74 handled implicit
0000000000001D90 6C 79 0D 0A 0D 0A 0D 0A 20 20 20 20 20 20 20 20 ly������        
0000000000001DA0 23 20 33 2E 20 46 72 65 71 75 65 6E 74 20 50 61 # 3. Frequent Pa
0000000000001DB0 74 74 65 72 6E 73 0D 0A 20 20 20 20 20 20 20 20 tterns��        
0000000000001DC0 73 74 61 74 75 73 5F 75 70 64 61 74 65 28 22 20 status_update(" 
0000000000001DD0 20 20 20 2D 20 41 6E 61 6C 79 7A 69 6E 67 20 50    - Analyzing P
0000000000001DE0 61 74 74 65 72 6E 73 2E 2E 2E 22 29 0D 0A 20 20 atterns...")��  
0000000000001DF0 20 20 20 20 20 20 69 66 20 64 61 74 61 5F 6C 65       if data_le
0000000000001E00 6E 20 3E 3D 20 70 61 74 74 65 72 6E 5F 6C 65 6E n >= pattern_len
0000000000001E10 67 74 68 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 gth:��          
0000000000001E20 20 20 66 6F 72 20 69 20 69 6E 20 72 61 6E 67 65   for i in range
0000000000001E30 28 64 61 74 61 5F 6C 65 6E 20 2D 20 70 61 74 74 (data_len - patt
0000000000001E40 65 72 6E 5F 6C 65 6E 67 74 68 20 2B 20 31 29 3A ern_length + 1):
0000000000001E50 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ��              
0000000000001E60 20 20 70 61 74 74 65 72 6E 20 3D 20 66 75 6C 6C   pattern = full
0000000000001E70 5F 64 61 74 61 5B 69 20 3A 20 69 20 2B 20 70 61 _data[i : i + pa
0000000000001E80 74 74 65 72 6E 5F 6C 65 6E 67 74 68 5D 0D 0A 20 ttern_length]�� 
0000000000001E90 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 72                r
0000000000001EA0 65 73 75 6C 74 73 5B 27 66 72 65 71 75 65 6E 74 esults['frequent
0000000000001EB0 5F 70 61 74 74 65 72 6E 73 27 5D 5B 70 61 74 74 _patterns'][patt
0000000000001EC0 65 72 6E 5D 20 2B 3D 20 31 0D 0A 0D 0A 20 20 20 ern] += 1����   
0000000000001ED0 20 20 20 20 20 23 20 34 2E 20 53 70 65 63 69 66      # 4. Specif
0000000000001EE0 69 63 20 42 79 74 65 20 53 65 71 75 65 6E 63 65 ic Byte Sequence
0000000000001EF0 20 43 6F 75 6E 74 73 0D 0A 20 20 20 20 20 20 20  Counts��       
0000000000001F00 20 73 74 61 74 75 73 5F 75 70 64 61 74 65 28 22  status_update("
0000000000001F10 20 20 20 20 2D 20 43 6F 75 6E 74 69 6E 67 20 53     - Counting S
0000000000001F20 65 71 75 65 6E 63 65 73 2E 2E 2E 22 29 0D 0A 20 equences...")�� 
0000000000001F30 20 20 20 20 20 20 20 69 66 20 64 61 74 61 5F 6C        if data_l
0000000000001F40 65 6E 20 3E 20 30 3A 0D 0A 20 20 20 20 20 20 20 en > 0:��       
0000000000001F50 20 20 20 20 20 72 65 73 75 6C 74 73 5B 27 73 70      results['sp
0000000000001F60 65 63 69 66 69 63 5F 63 6F 75 6E 74 73 27 5D 5B ecific_counts'][
0000000000001F70 27 6E 65 67 5F 6F 6E 65 27 5D 20 3D 20 66 75 6C 'neg_one'] = ful
0000000000001F80 6C 5F 64 61 74 61 2E 63 6F 75 6E 74 28 53 45 51 l_data.count(SEQ
0000000000001F90 5F 4E 45 47 5F 4F 4E 45 29 0D 0A 20 20 20 20 20 _NEG_ONE)��     
0000000000001FA0 20 20 20 20 20 20 20 72 65 73 75 6C 74 73 5B 27        results['
0000000000001FB0 73 70 65 63 69 66 69 63 5F 63 6F 75 6E 74 73 27 specific_counts'
0000000000001FC0 5D 5B 27 66 6C 6F 61 74 5F 6F 6E 65 27 5D 20 3D ]['float_one'] =
0000000000001FD0 20 66 75 6C 6C 5F 64 61 74 61 2E 63 6F 75 6E 74  full_data.count
0000000000001FE0 28 53 45 51 5F 46 4C 4F 41 54 5F 4F 4E 45 29 0D (SEQ_FLOAT_ONE)�
0000000000001FF0 0A 0D 0A 20 20 20 20 20 20 20 20 23 20 35 2E 20 ���        # 5. 
0000000000002000 45 6E 74 72 6F 70 79 0D 0A 20 20 20 20 20 20 20 Entropy��       
0000000000002010 20 73 74 61 74 75 73 5F 75 70 64 61 74 65 28 22  status_update("
0000000000002020 20 20 20 20 2D 20 43 61 6C 63 75 6C 61 74 69 6E     - Calculatin
0000000000002030 67 20 45 6E 74 72 6F 70 79 2E 2E 2E 22 29 0D 0A g Entropy...")��
0000000000002040 20 20 20 20 20 20 20 20 69 66 20 64 61 74 61 5F         if data_
0000000000002050 6C 65 6E 20 3E 20 30 3A 0D 0A 20 20 20 20 20 20 len > 0:��      
0000000000002060 20 20 20 20 20 20 72 65 73 75 6C 74 73 5B 27 65       results['e
0000000000002070 6E 74 72 6F 70 79 27 5D 20 3D 20 63 61 6C 63 75 ntropy'] = calcu
0000000000002080 6C 61 74 65 5F 65 6E 74 72 6F 70 79 28 66 75 6C late_entropy(ful
0000000000002090 6C 5F 64 61 74 61 29 0D 0A 0D 0A 20 20 20 20 20 l_data)����     
00000000000020A0 20 20 20 23 20 36 2E 20 53 74 72 69 6E 67 20 45    # 6. String E
00000000000020B0 78 74 72 61 63 74 69 6F 6E 0D 0A 20 20 20 20 20 xtraction��     
00000000000020C0 20 20 20 73 74 61 74 75 73 5F 75 70 64 61 74 65    status_update
00000000000020D0 28 22 20 20 20 20 2D 20 45 78 74 72 61 63 74 69 ("    - Extracti
00000000000020E0 6E 67 20 53 74 72 69 6E 67 73 2E 2E 2E 22 29 0D ng Strings...")�
00000000000020F0 0A 20 20 20 20 20 20 20 20 69 66 20 64 61 74 61 �        if data
0000000000002100 5F 6C 65 6E 20 3E 20 30 3A 0D 0A 20 20 20 20 20 _len > 0:��     
0000000000002110 20 20 20 20 20 20 20 63 75 72 72 65 6E 74 5F 73        current_s
0000000000002120 74 72 69 6E 67 20 3D 20 22 22 0D 0A 20 20 20 20 tring = ""��    
0000000000002130 20 20 20 20 20 20 20 20 66 6F 72 20 62 79 74 65         for byte
0000000000002140 20 69 6E 20 66 75 6C 6C 5F 64 61 74 61 3A 0D 0A  in full_data:��
0000000000002150 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000002160 63 68 61 72 20 3D 20 63 68 72 28 62 79 74 65 29 char = chr(byte)
0000000000002170 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ��              
0000000000002180 20 20 23 20 43 68 65 63 6B 20 69 66 20 62 79 74   # Check if byt
0000000000002190 65 20 63 6F 72 72 65 73 70 6F 6E 64 73 20 74 6F e corresponds to
00000000000021A0 20 61 20 70 72 69 6E 74 61 62 6C 65 20 41 53 43  a printable ASC
00000000000021B0 49 49 20 63 68 61 72 61 63 74 65 72 0D 0A 20 20 II character��  
00000000000021C0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69 66               if
00000000000021D0 20 63 68 61 72 20 69 6E 20 73 74 72 69 6E 67 2E  char in string.
00000000000021E0 70 72 69 6E 74 61 62 6C 65 20 61 6E 64 20 63 68 printable and ch
00000000000021F0 61 72 20 6E 6F 74 20 69 6E 20 28 27 5C 6E 27 2C ar not in ('\n',
0000000000002200 20 27 5C 72 27 2C 20 27 5C 74 27 2C 20 27 5C 76  '\r', '\t', '\v
0000000000002210 27 2C 20 27 5C 66 27 29 3A 20 23 20 45 78 63 6C ', '\f'): # Excl
0000000000002220 75 64 65 20 77 68 69 74 65 73 70 61 63 65 20 63 ude whitespace c
0000000000002230 6F 6E 74 72 6F 6C 73 20 65 78 63 65 70 74 20 73 ontrols except s
0000000000002240 70 61 63 65 0D 0A 20 20 20 20 20 20 20 20 20 20 pace��          
0000000000002250 20 20 20 20 20 20 20 20 20 20 20 63 75 72 72 65            curre
0000000000002260 6E 74 5F 73 74 72 69 6E 67 20 2B 3D 20 63 68 61 nt_string += cha
0000000000002270 72 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 r��             
0000000000002280 20 20 20 65 6C 73 65 3A 0D 0A 20 20 20 20 20 20    else:��      
0000000000002290 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69 66               if
00000000000022A0 20 6C 65 6E 28 63 75 72 72 65 6E 74 5F 73 74 72  len(current_str
00000000000022B0 69 6E 67 29 20 3E 3D 20 4D 49 4E 5F 53 54 52 49 ing) >= MIN_STRI
00000000000022C0 4E 47 5F 4C 45 4E 47 54 48 3A 0D 0A 20 20 20 20 NG_LENGTH:��    
00000000000022D0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000022E0 20 20 20 20 72 65 73 75 6C 74 73 5B 27 73 74 72     results['str
00000000000022F0 69 6E 67 73 27 5D 2E 61 70 70 65 6E 64 28 63 75 ings'].append(cu
0000000000002300 72 72 65 6E 74 5F 73 74 72 69 6E 67 29 0D 0A 20 rrent_string)�� 
0000000000002310 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000002320 20 20 20 63 75 72 72 65 6E 74 5F 73 74 72 69 6E    current_strin
0000000000002330 67 20 3D 20 22 22 0D 0A 20 20 20 20 20 20 20 20 g = ""��        
0000000000002340 20 20 20 20 23 20 43 61 74 63 68 20 74 72 61 69     # Catch trai
0000000000002350 6C 69 6E 67 20 73 74 72 69 6E 67 0D 0A 20 20 20 ling string��   
0000000000002360 20 20 20 20 20 20 20 20 20 69 66 20 6C 65 6E 28          if len(
0000000000002370 63 75 72 72 65 6E 74 5F 73 74 72 69 6E 67 29 20 current_string) 
0000000000002380 3E 3D 20 4D 49 4E 5F 53 54 52 49 4E 47 5F 4C 45 >= MIN_STRING_LE
0000000000002390 4E 47 54 48 3A 0D 0A 20 20 20 20 20 20 20 20 20 NGTH:��         
00000000000023A0 20 20 20 20 20 20 20 20 72 65 73 75 6C 74 73 5B         results[
00000000000023B0 27 73 74 72 69 6E 67 73 27 5D 2E 61 70 70 65 6E 'strings'].appen
00000000000023C0 64 28 63 75 72 72 65 6E 74 5F 73 74 72 69 6E 67 d(current_string
00000000000023D0 29 0D 0A 0D 0A 0D 0A 20 20 20 20 65 78 63 65 70 )������    excep
00000000000023E0 74 20 46 69 6C 65 4E 6F 74 46 6F 75 6E 64 45 72 t FileNotFoundEr
00000000000023F0 72 6F 72 3A 0D 0A 20 20 20 20 20 20 20 20 72 65 ror:��        re
0000000000002400 73 75 6C 74 73 5B 27 65 72 72 6F 72 27 5D 20 3D sults['error'] =
0000000000002410 20 22 46 69 6C 65 20 6E 6F 74 20 66 6F 75 6E 64  "File not found
0000000000002420 22 0D 0A 20 20 20 20 65 78 63 65 70 74 20 50 65 "��    except Pe
0000000000002430 72 6D 69 73 73 69 6F 6E 45 72 72 6F 72 3A 0D 0A rmissionError:��
0000000000002440 20 20 20 20 20 20 20 20 72 65 73 75 6C 74 73 5B         results[
0000000000002450 27 65 72 72 6F 72 27 5D 20 3D 20 22 50 65 72 6D 'error'] = "Perm
0000000000002460 69 73 73 69 6F 6E 20 64 65 6E 69 65 64 22 0D 0A ission denied"��
0000000000002470 20 20 20 20 65 78 63 65 70 74 20 4D 65 6D 6F 72     except Memor
0000000000002480 79 45 72 72 6F 72 3A 0D 0A 20 20 20 20 20 20 20 yError:��       
0000000000002490 20 72 65 73 75 6C 74 73 5B 27 65 72 72 6F 72 27  results['error'
00000000000024A0 5D 20 3D 20 66 22 4D 65 6D 6F 72 79 45 72 72 6F ] = f"MemoryErro
00000000000024B0 72 20 28 7B 72 65 73 75 6C 74 73 5B 27 73 69 7A r ({results['siz
00000000000024C0 65 27 5D 20 2F 20 28 31 30 32 34 2A 31 30 32 34 e'] / (1024*1024
00000000000024D0 29 3A 2E 32 66 7D 20 4D 42 29 22 0D 0A 20 20 20 ):.2f} MB)"��   
00000000000024E0 20 65 78 63 65 70 74 20 45 78 63 65 70 74 69 6F  except Exceptio
00000000000024F0 6E 20 61 73 20 65 3A 0D 0A 20 20 20 20 20 20 20 n as e:��       
0000000000002500 20 72 65 73 75 6C 74 73 5B 27 65 72 72 6F 72 27  results['error'
0000000000002510 5D 20 3D 20 66 22 55 6E 65 78 70 65 63 74 65 64 ] = f"Unexpected
0000000000002520 20 65 72 72 6F 72 3A 20 7B 65 7D 22 0D 0A 20 20  error: {e}"��  
0000000000002530 20 20 66 69 6E 61 6C 6C 79 3A 0D 0A 20 20 20 20   finally:��    
0000000000002540 20 20 20 20 64 65 6C 20 66 75 6C 6C 5F 64 61 74     del full_dat
0000000000002550 61 20 23 20 45 78 70 6C 69 63 69 74 6C 79 20 64 a # Explicitly d
0000000000002560 65 6C 65 74 65 20 70 6F 74 65 6E 74 69 61 6C 6C elete potentiall
0000000000002570 79 20 6C 61 72 67 65 20 64 61 74 61 0D 0A 20 20 y large data��  
0000000000002580 20 20 20 20 20 20 23 20 49 66 20 61 6E 20 65 72       # If an er
0000000000002590 72 6F 72 20 6F 63 63 75 72 72 65 64 2C 20 73 6F ror occurred, so
00000000000025A0 6D 65 20 72 65 73 75 6C 74 73 20 6D 69 67 68 74 me results might
00000000000025B0 20 62 65 20 6D 69 73 73 69 6E 67 2F 69 6E 63 6F  be missing/inco
00000000000025C0 6D 70 6C 65 74 65 0D 0A 20 20 20 20 20 20 20 20 mplete��        
00000000000025D0 67 63 2E 63 6F 6C 6C 65 63 74 28 29 20 23 20 53 gc.collect() # S
00000000000025E0 75 67 67 65 73 74 20 67 61 72 62 61 67 65 20 63 uggest garbage c
00000000000025F0 6F 6C 6C 65 63 74 69 6F 6E 0D 0A 0D 0A 20 20 20 ollection����   
0000000000002600 20 73 74 61 74 75 73 5F 75 70 64 61 74 65 28 22  status_update("
0000000000002610 20 22 20 2A 20 38 30 2C 20 6E 65 77 6C 69 6E 65  " * 80, newline
0000000000002620 3D 46 61 6C 73 65 29 20 23 20 43 6C 65 61 72 20 =False) # Clear 
0000000000002630 73 74 61 74 75 73 20 6C 69 6E 65 0D 0A 0D 0A 20 status line���� 
0000000000002640 20 20 20 72 65 74 75 72 6E 20 72 65 73 75 6C 74    return result
0000000000002650 73 0D 0A 0D 0A 64 65 66 20 73 74 61 74 75 73 5F s����def status_
0000000000002660 75 70 64 61 74 65 28 6D 65 73 73 61 67 65 2C 20 update(message, 
0000000000002670 6E 65 77 6C 69 6E 65 3D 46 61 6C 73 65 29 3A 0D newline=False):�
0000000000002680 0A 20 20 20 20 20 22 22 22 50 72 69 6E 74 73 20 �     """Prints 
0000000000002690 73 74 61 74 75 73 20 6D 65 73 73 61 67 65 2C 20 status message, 
00000000000026A0 6F 76 65 72 77 72 69 74 69 6E 67 20 70 72 65 76 overwriting prev
00000000000026B0 69 6F 75 73 20 6F 6E 65 20 75 6E 6C 65 73 73 20 ious one unless 
00000000000026C0 6E 65 77 6C 69 6E 65 3D 54 72 75 65 2E 22 22 22 newline=True."""
00000000000026D0 0D 0A 20 20 20 20 20 65 6E 64 5F 63 68 61 72 20 ��     end_char 
00000000000026E0 3D 20 27 5C 6E 27 20 69 66 20 6E 65 77 6C 69 6E = '\n' if newlin
00000000000026F0 65 20 65 6C 73 65 20 27 5C 72 27 0D 0A 20 20 20 e else '\r'��   
0000000000002700 20 20 70 72 69 6E 74 28 6D 65 73 73 61 67 65 2E   print(message.
0000000000002710 6C 6A 75 73 74 28 38 30 29 2C 20 65 6E 64 3D 65 ljust(80), end=e
0000000000002720 6E 64 5F 63 68 61 72 2C 20 66 6C 75 73 68 3D 54 nd_char, flush=T
0000000000002730 72 75 65 29 0D 0A 0D 0A 0D 0A 23 20 2D 2D 2D 20 rue)������# --- 
0000000000002740 52 65 70 6F 72 74 69 6E 67 20 46 75 6E 63 74 69 Reporting Functi
0000000000002750 6F 6E 73 20 2D 2D 2D 0D 0A 0D 0A 64 65 66 20 72 ons ---����def r
0000000000002760 65 70 6F 72 74 5F 66 69 6C 65 5F 73 74 61 74 73 eport_file_stats
0000000000002770 28 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 (analysis_result
0000000000002780 73 29 3A 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 s):��    print("
0000000000002790 5C 6E 2D 2D 2D 20 46 69 6C 65 20 53 69 7A 65 20 \n--- File Size 
00000000000027A0 53 74 61 74 69 73 74 69 63 73 20 2D 2D 2D 22 29 Statistics ---")
00000000000027B0 0D 0A 20 20 20 20 73 69 7A 65 73 20 3D 20 5B 72 ��    sizes = [r
00000000000027C0 5B 27 73 69 7A 65 27 5D 20 66 6F 72 20 72 20 69 ['size'] for r i
00000000000027D0 6E 20 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C n analysis_resul
00000000000027E0 74 73 20 69 66 20 6E 6F 74 20 72 5B 27 65 72 72 ts if not r['err
00000000000027F0 6F 72 27 5D 5D 0D 0A 20 20 20 20 69 66 20 6E 6F or']]��    if no
0000000000002800 74 20 73 69 7A 65 73 3A 0D 0A 20 20 20 20 20 20 t sizes:��      
0000000000002810 20 20 70 72 69 6E 74 28 22 5B 2A 5D 20 4E 6F 20   print("[*] No 
0000000000002820 66 69 6C 65 73 20 73 75 63 63 65 73 73 66 75 6C files successful
0000000000002830 6C 79 20 61 6E 61 6C 79 7A 65 64 20 66 6F 72 20 ly analyzed for 
0000000000002840 73 69 7A 65 2E 22 29 0D 0A 20 20 20 20 20 20 20 size.")��       
0000000000002850 20 72 65 74 75 72 6E 0D 0A 20 20 20 20 6D 69 6E  return��    min
0000000000002860 5F 73 69 7A 65 20 3D 20 6D 69 6E 28 73 69 7A 65 _size = min(size
0000000000002870 73 29 0D 0A 20 20 20 20 6D 61 78 5F 73 69 7A 65 s)��    max_size
0000000000002880 20 3D 20 6D 61 78 28 73 69 7A 65 73 29 0D 0A 20  = max(sizes)�� 
0000000000002890 20 20 20 61 76 67 5F 73 69 7A 65 20 3D 20 73 75    avg_size = su
00000000000028A0 6D 28 73 69 7A 65 73 29 20 2F 20 6C 65 6E 28 73 m(sizes) / len(s
00000000000028B0 69 7A 65 73 29 0D 0A 20 20 20 20 70 72 69 6E 74 izes)��    print
00000000000028C0 28 66 22 5B 2A 5D 20 46 69 6C 65 73 20 41 6E 61 (f"[*] Files Ana
00000000000028D0 6C 79 7A 65 64 3A 20 7B 6C 65 6E 28 73 69 7A 65 lyzed: {len(size
00000000000028E0 73 29 7D 22 29 0D 0A 20 20 20 20 70 72 69 6E 74 s)}")��    print
00000000000028F0 28 66 22 5B 2A 5D 20 4D 69 6E 20 53 69 7A 65 3A (f"[*] Min Size:
0000000000002900 20 7B 6D 69 6E 5F 73 69 7A 65 20 2F 20 28 31 30  {min_size / (10
0000000000002910 32 34 2A 31 30 32 34 29 3A 2E 32 66 7D 20 4D 42 24*1024):.2f} MB
0000000000002920 20 28 7B 6D 69 6E 5F 73 69 7A 65 7D 20 62 79 74  ({min_size} byt
0000000000002930 65 73 29 22 29 0D 0A 20 20 20 20 70 72 69 6E 74 es)")��    print
0000000000002940 28 66 22 5B 2A 5D 20 4D 61 78 20 53 69 7A 65 3A (f"[*] Max Size:
0000000000002950 20 7B 6D 61 78 5F 73 69 7A 65 20 2F 20 28 31 30  {max_size / (10
0000000000002960 32 34 2A 31 30 32 34 29 3A 2E 32 66 7D 20 4D 42 24*1024):.2f} MB
0000000000002970 20 28 7B 6D 61 78 5F 73 69 7A 65 7D 20 62 79 74  ({max_size} byt
0000000000002980 65 73 29 22 29 0D 0A 20 20 20 20 70 72 69 6E 74 es)")��    print
0000000000002990 28 66 22 5B 2A 5D 20 41 76 67 20 53 69 7A 65 3A (f"[*] Avg Size:
00000000000029A0 20 7B 61 76 67 5F 73 69 7A 65 20 2F 20 28 31 30  {avg_size / (10
00000000000029B0 32 34 2A 31 30 32 34 29 3A 2E 32 66 7D 20 4D 42 24*1024):.2f} MB
00000000000029C0 20 28 7B 61 76 67 5F 73 69 7A 65 3A 2E 30 66 7D  ({avg_size:.0f}
00000000000029D0 20 62 79 74 65 73 29 22 29 0D 0A 0D 0A 64 65 66  bytes)")����def
00000000000029E0 20 72 65 70 6F 72 74 5F 68 65 61 64 65 72 5F 66  report_header_f
00000000000029F0 69 65 6C 64 73 28 61 6E 61 6C 79 73 69 73 5F 72 ields(analysis_r
0000000000002A00 65 73 75 6C 74 73 29 3A 0D 0A 20 20 20 20 70 72 esults):��    pr
0000000000002A10 69 6E 74 28 22 5C 6E 2D 2D 2D 20 48 65 61 64 65 int("\n--- Heade
0000000000002A20 72 20 46 69 65 6C 64 20 41 6E 61 6C 79 73 69 73 r Field Analysis
0000000000002A30 20 2D 2D 2D 22 29 0D 0A 20 20 20 20 23 20 47 72  ---")��    # Gr
0000000000002A40 6F 75 70 20 62 79 20 74 68 65 20 27 63 6F 75 6E oup by the 'coun
0000000000002A50 74 5F 30 78 30 38 27 20 66 69 65 6C 64 20 69 66 t_0x08' field if
0000000000002A60 20 69 74 20 65 78 69 73 74 73 0D 0A 20 20 20 20  it exists��    
0000000000002A70 67 72 6F 75 70 65 64 5F 72 65 73 75 6C 74 73 20 grouped_results 
0000000000002A80 3D 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 2E 64 65 = collections.de
0000000000002A90 66 61 75 6C 74 64 69 63 74 28 6C 69 73 74 29 0D faultdict(list)�
0000000000002AA0 0A 20 20 20 20 65 72 72 6F 72 73 20 3D 20 5B 5D �    errors = []
0000000000002AB0 0D 0A 20 20 20 20 6E 6F 5F 63 6F 75 6E 74 5F 66 ��    no_count_f
0000000000002AC0 69 65 6C 64 20 3D 20 5B 5D 0D 0A 0D 0A 20 20 20 ield = []����   
0000000000002AD0 20 66 6F 72 20 72 20 69 6E 20 61 6E 61 6C 79 73  for r in analys
0000000000002AE0 69 73 5F 72 65 73 75 6C 74 73 3A 0D 0A 20 20 20 is_results:��   
0000000000002AF0 20 20 20 20 20 69 66 20 72 5B 27 65 72 72 6F 72      if r['error
0000000000002B00 27 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 ']:��           
0000000000002B10 20 65 72 72 6F 72 73 2E 61 70 70 65 6E 64 28 72  errors.append(r
0000000000002B20 5B 27 66 69 6C 65 6E 61 6D 65 27 5D 29 0D 0A 20 ['filename'])�� 
0000000000002B30 20 20 20 20 20 20 20 20 20 20 20 63 6F 6E 74 69            conti
0000000000002B40 6E 75 65 0D 0A 20 20 20 20 20 20 20 20 69 66 20 nue��        if 
0000000000002B50 27 63 6F 75 6E 74 5F 30 78 30 38 27 20 69 6E 20 'count_0x08' in 
0000000000002B60 72 5B 27 68 65 61 64 65 72 5F 66 69 65 6C 64 73 r['header_fields
0000000000002B70 27 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 ']:��           
0000000000002B80 20 67 72 6F 75 70 65 64 5F 72 65 73 75 6C 74 73  grouped_results
0000000000002B90 5B 72 5B 27 68 65 61 64 65 72 5F 66 69 65 6C 64 [r['header_field
0000000000002BA0 73 27 5D 5B 27 63 6F 75 6E 74 5F 30 78 30 38 27 s']['count_0x08'
0000000000002BB0 5D 5D 2E 61 70 70 65 6E 64 28 72 29 0D 0A 20 20 ]].append(r)��  
0000000000002BC0 20 20 20 20 20 20 65 6C 73 65 3A 0D 0A 20 20 20       else:��   
0000000000002BD0 20 20 20 20 20 20 20 20 20 6E 6F 5F 63 6F 75 6E          no_coun
0000000000002BE0 74 5F 66 69 65 6C 64 2E 61 70 70 65 6E 64 28 72 t_field.append(r
0000000000002BF0 5B 27 66 69 6C 65 6E 61 6D 65 27 5D 29 0D 0A 0D ['filename'])���
0000000000002C00 0A 20 20 20 20 69 66 20 65 72 72 6F 72 73 3A 0D �    if errors:�
0000000000002C10 0A 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 �        print(f
0000000000002C20 22 5B 21 5D 20 45 72 72 6F 72 73 20 70 72 65 76 "[!] Errors prev
0000000000002C30 65 6E 74 65 64 20 68 65 61 64 65 72 20 61 6E 61 ented header ana
0000000000002C40 6C 79 73 69 73 20 66 6F 72 3A 20 7B 27 2C 20 27 lysis for: {', '
0000000000002C50 2E 6A 6F 69 6E 28 65 72 72 6F 72 73 29 7D 22 29 .join(errors)}")
0000000000002C60 0D 0A 20 20 20 20 69 66 20 6E 6F 5F 63 6F 75 6E ��    if no_coun
0000000000002C70 74 5F 66 69 65 6C 64 3A 0D 0A 20 20 20 20 20 20 t_field:��      
0000000000002C80 20 20 20 70 72 69 6E 74 28 66 22 5B 2A 5D 20 48    print(f"[*] H
0000000000002C90 65 61 64 65 72 20 66 69 65 6C 64 20 27 63 6F 75 eader field 'cou
0000000000002CA0 6E 74 5F 30 78 30 38 27 20 6D 69 73 73 69 6E 67 nt_0x08' missing
0000000000002CB0 2F 75 6E 72 65 61 64 61 62 6C 65 20 66 6F 72 3A /unreadable for:
0000000000002CC0 20 7B 27 2C 20 27 2E 6A 6F 69 6E 28 6E 6F 5F 63  {', '.join(no_c
0000000000002CD0 6F 75 6E 74 5F 66 69 65 6C 64 29 7D 22 29 0D 0A ount_field)}")��
0000000000002CE0 0D 0A 20 20 20 20 69 66 20 6E 6F 74 20 67 72 6F ��    if not gro
0000000000002CF0 75 70 65 64 5F 72 65 73 75 6C 74 73 3A 0D 0A 20 uped_results:�� 
0000000000002D00 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 22 5B         print("[
0000000000002D10 2A 5D 20 4E 6F 20 68 65 61 64 65 72 20 66 69 65 *] No header fie
0000000000002D20 6C 64 73 20 73 75 63 63 65 73 73 66 75 6C 6C 79 lds successfully
0000000000002D30 20 65 78 74 72 61 63 74 65 64 2E 22 29 0D 0A 20  extracted.")�� 
0000000000002D40 20 20 20 20 20 20 20 20 72 65 74 75 72 6E 0D 0A         return��
0000000000002D50 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 5B 2A 5D ��    print("[*]
0000000000002D60 20 46 69 6C 65 73 20 67 72 6F 75 70 65 64 20 62  Files grouped b
0000000000002D70 79 20 76 61 6C 75 65 20 61 74 20 6F 66 66 73 65 y value at offse
0000000000002D80 74 20 30 78 30 38 20 28 27 43 6F 75 6E 74 27 29 t 0x08 ('Count')
0000000000002D90 3A 22 29 0D 0A 20 20 20 20 66 6F 72 20 63 6F 75 :")��    for cou
0000000000002DA0 6E 74 5F 76 61 6C 2C 20 72 65 73 75 6C 74 73 5F nt_val, results_
0000000000002DB0 6C 69 73 74 20 69 6E 20 73 6F 72 74 65 64 28 67 list in sorted(g
0000000000002DC0 72 6F 75 70 65 64 5F 72 65 73 75 6C 74 73 2E 69 rouped_results.i
0000000000002DD0 74 65 6D 73 28 29 29 3A 0D 0A 20 20 20 20 20 20 tems()):��      
0000000000002DE0 20 20 70 72 69 6E 74 28 66 22 5C 6E 5B 2B 5D 20   print(f"\n[+] 
0000000000002DF0 43 6F 75 6E 74 20 3D 20 7B 63 6F 75 6E 74 5F 76 Count = {count_v
0000000000002E00 61 6C 7D 20 28 46 6F 75 6E 64 20 69 6E 20 7B 6C al} (Found in {l
0000000000002E10 65 6E 28 72 65 73 75 6C 74 73 5F 6C 69 73 74 29 en(results_list)
0000000000002E20 7D 20 66 69 6C 65 73 29 3A 22 29 0D 0A 20 20 20 } files):")��   
0000000000002E30 20 20 20 20 20 23 20 50 72 69 6E 74 20 64 65 74      # Print det
0000000000002E40 61 69 6C 73 20 66 6F 72 20 74 68 65 20 66 69 72 ails for the fir
0000000000002E50 73 74 20 66 65 77 20 66 69 6C 65 73 20 69 6E 20 st few files in 
0000000000002E60 65 61 63 68 20 67 72 6F 75 70 0D 0A 20 20 20 20 each group��    
0000000000002E70 20 20 20 20 6C 69 6D 69 74 20 3D 20 35 0D 0A 20     limit = 5�� 
0000000000002E80 20 20 20 20 20 20 20 66 6F 72 20 69 2C 20 72 20        for i, r 
0000000000002E90 69 6E 20 65 6E 75 6D 65 72 61 74 65 28 72 65 73 in enumerate(res
0000000000002EA0 75 6C 74 73 5F 6C 69 73 74 29 3A 0D 0A 20 20 20 ults_list):��   
0000000000002EB0 20 20 20 20 20 20 20 20 20 20 69 66 20 69 20 3C           if i <
0000000000002EC0 20 6C 69 6D 69 74 3A 0D 0A 20 20 20 20 20 20 20  limit:��       
0000000000002ED0 20 20 20 20 20 20 20 20 20 20 6D 61 67 69 63 20           magic 
0000000000002EE0 3D 20 72 5B 27 68 65 61 64 65 72 5F 66 69 65 6C = r['header_fiel
0000000000002EF0 64 73 27 5D 2E 67 65 74 28 27 6D 61 67 69 63 5F ds'].get('magic_
0000000000002F00 76 65 72 27 2C 20 27 4E 2F 41 27 29 0D 0A 20 20 ver', 'N/A')��  
0000000000002F10 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6F                o
0000000000002F20 66 66 73 65 74 20 3D 20 72 5B 27 68 65 61 64 65 ffset = r['heade
0000000000002F30 72 5F 66 69 65 6C 64 73 27 5D 2E 67 65 74 28 27 r_fields'].get('
0000000000002F40 6F 66 66 73 65 74 5F 30 78 30 43 27 2C 20 27 4E offset_0x0C', 'N
0000000000002F50 2F 41 27 29 0D 0A 20 20 20 20 20 20 20 20 20 20 /A')��          
0000000000002F60 20 20 20 20 20 20 20 23 20 46 6F 72 6D 61 74 20        # Format 
0000000000002F70 6D 61 67 69 63 20 61 73 20 68 65 78 0D 0A 20 20 magic as hex��  
0000000000002F80 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6D                m
0000000000002F90 61 67 69 63 5F 68 65 78 20 3D 20 66 22 30 78 7B agic_hex = f"0x{
0000000000002FA0 6D 61 67 69 63 3A 30 38 58 7D 22 20 69 66 20 69 magic:08X}" if i
0000000000002FB0 73 69 6E 73 74 61 6E 63 65 28 6D 61 67 69 63 2C sinstance(magic,
0000000000002FC0 20 69 6E 74 29 20 65 6C 73 65 20 6D 61 67 69 63  int) else magic
0000000000002FD0 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ��              
0000000000002FE0 20 20 20 6F 66 66 73 65 74 5F 68 65 78 20 3D 20    offset_hex = 
0000000000002FF0 66 22 30 78 7B 6F 66 66 73 65 74 3A 30 38 58 7D f"0x{offset:08X}
0000000000003000 22 20 69 66 20 69 73 69 6E 73 74 61 6E 63 65 28 " if isinstance(
0000000000003010 6F 66 66 73 65 74 2C 20 69 6E 74 29 20 65 6C 73 offset, int) els
0000000000003020 65 20 6F 66 66 73 65 74 0D 0A 20 20 20 20 20 20 e offset��      
0000000000003030 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
0000000000003040 28 66 22 20 20 2D 20 7B 72 5B 27 66 69 6C 65 6E (f"  - {r['filen
0000000000003050 61 6D 65 27 5D 3A 3C 32 35 7D 20 7C 20 4D 61 67 ame']:<25} | Mag
0000000000003060 69 63 2F 56 65 72 3A 20 7B 6D 61 67 69 63 5F 68 ic/Ver: {magic_h
0000000000003070 65 78 7D 20 7C 20 4F 66 66 73 65 74 40 30 78 30 ex} | Offset@0x0
0000000000003080 43 3A 20 7B 6F 66 66 73 65 74 5F 68 65 78 7D 22 C: {offset_hex}"
0000000000003090 29 0D 0A 20 20 20 20 20 20 20 20 69 66 20 6C 65 )��        if le
00000000000030A0 6E 28 72 65 73 75 6C 74 73 5F 6C 69 73 74 29 20 n(results_list) 
00000000000030B0 3E 20 6C 69 6D 69 74 3A 0D 0A 20 20 20 20 20 20 > limit:��      
00000000000030C0 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22 20        print(f" 
00000000000030D0 20 2E 2E 2E 20 28 7B 6C 65 6E 28 72 65 73 75 6C  ... ({len(resul
00000000000030E0 74 73 5F 6C 69 73 74 29 20 2D 20 6C 69 6D 69 74 ts_list) - limit
00000000000030F0 7D 20 6D 6F 72 65 20 66 69 6C 65 73 29 22 29 0D } more files)")�
0000000000003100 0A 0D 0A 0D 0A 64 65 66 20 72 65 70 6F 72 74 5F �����def report_
0000000000003110 73 70 65 63 69 66 69 63 5F 63 6F 75 6E 74 73 28 specific_counts(
0000000000003120 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 analysis_results
0000000000003130 29 3A 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 5C ):��    print("\
0000000000003140 6E 2D 2D 2D 20 53 70 65 63 69 66 69 63 20 53 65 n--- Specific Se
0000000000003150 71 75 65 6E 63 65 20 43 6F 75 6E 74 73 20 2D 2D quence Counts --
0000000000003160 2D 22 29 0D 0A 20 20 20 20 6C 69 6D 69 74 20 3D -")��    limit =
0000000000003170 20 31 30 0D 0A 20 20 20 20 63 6F 75 6E 74 20 3D  10��    count =
0000000000003180 20 30 0D 0A 20 20 20 20 72 65 70 6F 72 74 65 64  0��    reported
0000000000003190 20 3D 20 46 61 6C 73 65 0D 0A 20 20 20 20 66 6F  = False��    fo
00000000000031A0 72 20 72 20 69 6E 20 61 6E 61 6C 79 73 69 73 5F r r in analysis_
00000000000031B0 72 65 73 75 6C 74 73 3A 0D 0A 20 20 20 20 20 20 results:��      
00000000000031C0 20 20 69 66 20 72 5B 27 65 72 72 6F 72 27 5D 20   if r['error'] 
00000000000031D0 6F 72 20 6E 6F 74 20 72 5B 27 73 70 65 63 69 66 or not r['specif
00000000000031E0 69 63 5F 63 6F 75 6E 74 73 27 5D 3A 0D 0A 20 20 ic_counts']:��  
00000000000031F0 20 20 20 20 20 20 20 20 20 20 63 6F 6E 74 69 6E           contin
0000000000003200 75 65 0D 0A 20 20 20 20 20 20 20 20 63 6F 75 6E ue��        coun
0000000000003210 74 2B 3D 31 0D 0A 20 20 20 20 20 20 20 20 69 66 t+=1��        if
0000000000003220 20 63 6F 75 6E 74 20 3E 20 6C 69 6D 69 74 20 61  count > limit a
0000000000003230 6E 64 20 6C 69 6D 69 74 20 3E 20 30 3A 20 63 6F nd limit > 0: co
0000000000003240 6E 74 69 6E 75 65 20 23 20 4C 69 6D 69 74 20 6F ntinue # Limit o
0000000000003250 75 74 70 75 74 0D 0A 0D 0A 20 20 20 20 20 20 20 utput����       
0000000000003260 20 6E 65 67 5F 6F 6E 65 20 3D 20 72 5B 27 73 70  neg_one = r['sp
0000000000003270 65 63 69 66 69 63 5F 63 6F 75 6E 74 73 27 5D 2E ecific_counts'].
0000000000003280 67 65 74 28 27 6E 65 67 5F 6F 6E 65 27 2C 20 30 get('neg_one', 0
0000000000003290 29 0D 0A 20 20 20 20 20 20 20 20 66 6C 6F 61 74 )��        float
00000000000032A0 5F 6F 6E 65 20 3D 20 72 5B 27 73 70 65 63 69 66 _one = r['specif
00000000000032B0 69 63 5F 63 6F 75 6E 74 73 27 5D 2E 67 65 74 28 ic_counts'].get(
00000000000032C0 27 66 6C 6F 61 74 5F 6F 6E 65 27 2C 20 30 29 0D 'float_one', 0)�
00000000000032D0 0A 20 20 20 20 20 20 20 20 69 66 20 6E 65 67 5F �        if neg_
00000000000032E0 6F 6E 65 20 3E 20 30 20 6F 72 20 66 6C 6F 61 74 one > 0 or float
00000000000032F0 5F 6F 6E 65 20 3E 20 30 3A 20 23 20 4F 6E 6C 79 _one > 0: # Only
0000000000003300 20 72 65 70 6F 72 74 20 69 66 20 63 6F 75 6E 74  report if count
0000000000003310 73 20 61 72 65 20 6E 6F 6E 2D 7A 65 72 6F 0D 0A s are non-zero��
0000000000003320 20 20 20 20 20 20 20 20 20 20 20 20 72 65 70 6F             repo
0000000000003330 72 74 65 64 20 3D 20 54 72 75 65 0D 0A 20 20 20 rted = True��   
0000000000003340 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
0000000000003350 22 5B 2A 5D 20 7B 72 5B 27 66 69 6C 65 6E 61 6D "[*] {r['filenam
0000000000003360 65 27 5D 7D 3A 22 29 0D 0A 20 20 20 20 20 20 20 e']}:")��       
0000000000003370 20 20 20 20 20 70 72 69 6E 74 28 66 22 20 20 2D      print(f"  -
0000000000003380 20 43 6F 75 6E 74 28 46 46 46 46 46 46 46 46 29  Count(FFFFFFFF)
0000000000003390 3A 20 7B 6E 65 67 5F 6F 6E 65 7D 22 29 0D 0A 20 : {neg_one}")�� 
00000000000033A0 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
00000000000033B0 28 66 22 20 20 2D 20 43 6F 75 6E 74 28 30 30 30 (f"  - Count(000
00000000000033C0 30 38 30 33 46 29 3A 20 7B 66 6C 6F 61 74 5F 6F 0803F): {float_o
00000000000033D0 6E 65 7D 22 29 0D 0A 0D 0A 20 20 20 20 69 66 20 ne}")����    if 
00000000000033E0 6E 6F 74 20 72 65 70 6F 72 74 65 64 3A 0D 0A 20 not reported:�� 
00000000000033F0 20 20 20 20 20 20 20 70 72 69 6E 74 28 22 5B 2A        print("[*
0000000000003400 5D 20 4E 6F 20 6F 63 63 75 72 72 65 6E 63 65 73 ] No occurrences
0000000000003410 20 6F 66 20 73 70 65 63 69 66 69 65 64 20 73 65  of specified se
0000000000003420 71 75 65 6E 63 65 73 20 28 46 46 46 46 46 46 46 quences (FFFFFFF
0000000000003430 46 2C 20 30 30 30 30 38 30 33 46 29 20 66 6F 75 F, 0000803F) fou
0000000000003440 6E 64 2E 22 29 0D 0A 20 20 20 20 69 66 20 63 6F nd.")��    if co
0000000000003450 75 6E 74 20 3E 20 6C 69 6D 69 74 20 61 6E 64 20 unt > limit and 
0000000000003460 6C 69 6D 69 74 20 3E 20 30 3A 0D 0A 20 20 20 20 limit > 0:��    
0000000000003470 20 20 20 20 70 72 69 6E 74 28 66 22 5B 2A 5D 20     print(f"[*] 
0000000000003480 28 52 65 70 6F 72 74 20 6C 69 6D 69 74 65 64 20 (Report limited 
0000000000003490 74 6F 20 66 69 72 73 74 20 7B 6C 69 6D 69 74 7D to first {limit}
00000000000034A0 20 66 69 6C 65 73 20 77 69 74 68 20 63 6F 75 6E  files with coun
00000000000034B0 74 73 29 22 29 0D 0A 0D 0A 0D 0A 64 65 66 20 72 ts)")������def r
00000000000034C0 65 70 6F 72 74 5F 65 6E 74 72 6F 70 79 28 61 6E eport_entropy(an
00000000000034D0 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 29 3A alysis_results):
00000000000034E0 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 5C 6E 2D ��    print("\n-
00000000000034F0 2D 2D 20 42 79 74 65 20 45 6E 74 72 6F 70 79 20 -- Byte Entropy 
0000000000003500 52 65 70 6F 72 74 20 28 30 3D 55 6E 69 66 6F 72 Report (0=Unifor
0000000000003510 6D 2C 20 38 3D 52 61 6E 64 6F 6D 29 20 2D 2D 2D m, 8=Random) ---
0000000000003520 22 29 0D 0A 20 20 20 20 65 6E 74 72 6F 70 69 65 ")��    entropie
0000000000003530 73 20 3D 20 5B 5D 0D 0A 20 20 20 20 66 6F 72 20 s = []��    for 
0000000000003540 72 20 69 6E 20 61 6E 61 6C 79 73 69 73 5F 72 65 r in analysis_re
0000000000003550 73 75 6C 74 73 3A 0D 0A 20 20 20 20 20 20 20 20 sults:��        
0000000000003560 69 66 20 6E 6F 74 20 72 5B 27 65 72 72 6F 72 27 if not r['error'
0000000000003570 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ]:��            
0000000000003580 20 65 6E 74 72 6F 70 69 65 73 2E 61 70 70 65 6E  entropies.appen
0000000000003590 64 28 28 72 5B 27 65 6E 74 72 6F 70 79 27 5D 2C d((r['entropy'],
00000000000035A0 20 72 5B 27 66 69 6C 65 6E 61 6D 65 27 5D 29 29  r['filename']))
00000000000035B0 0D 0A 0D 0A 20 20 20 20 69 66 20 6E 6F 74 20 65 ����    if not e
00000000000035C0 6E 74 72 6F 70 69 65 73 3A 0D 0A 20 20 20 20 20 ntropies:��     
00000000000035D0 20 20 20 20 70 72 69 6E 74 28 22 5B 2A 5D 20 4E     print("[*] N
00000000000035E0 6F 20 65 6E 74 72 6F 70 79 20 63 61 6C 63 75 6C o entropy calcul
00000000000035F0 61 74 65 64 20 28 61 6C 6C 20 66 69 6C 65 73 20 ated (all files 
0000000000003600 6D 69 67 68 74 20 68 61 76 65 20 65 72 72 6F 72 might have error
0000000000003610 73 29 2E 22 29 0D 0A 20 20 20 20 20 20 20 20 20 s).")��         
0000000000003620 72 65 74 75 72 6E 0D 0A 0D 0A 20 20 20 20 23 20 return����    # 
0000000000003630 53 6F 72 74 20 62 79 20 65 6E 74 72 6F 70 79 20 Sort by entropy 
0000000000003640 28 65 2E 67 2E 2C 20 6C 6F 77 65 73 74 20 66 69 (e.g., lowest fi
0000000000003650 72 73 74 29 0D 0A 20 20 20 20 65 6E 74 72 6F 70 rst)��    entrop
0000000000003660 69 65 73 2E 73 6F 72 74 28 29 0D 0A 20 20 20 20 ies.sort()��    
0000000000003670 6C 69 6D 69 74 20 3D 20 31 35 0D 0A 20 20 20 20 limit = 15��    
0000000000003680 70 72 69 6E 74 28 22 5B 2A 5D 20 46 69 6C 65 73 print("[*] Files
0000000000003690 20 73 6F 72 74 65 64 20 62 79 20 65 6E 74 72 6F  sorted by entro
00000000000036A0 70 79 20 28 6C 6F 77 65 73 74 20 66 69 72 73 74 py (lowest first
00000000000036B0 29 3A 22 29 0D 0A 20 20 20 20 66 6F 72 20 69 2C ):")��    for i,
00000000000036C0 20 28 65 6E 74 72 6F 70 79 2C 20 66 69 6C 65 6E  (entropy, filen
00000000000036D0 61 6D 65 29 20 69 6E 20 65 6E 75 6D 65 72 61 74 ame) in enumerat
00000000000036E0 65 28 65 6E 74 72 6F 70 69 65 73 29 3A 0D 0A 20 e(entropies):�� 
00000000000036F0 20 20 20 20 20 20 20 69 66 20 69 20 3C 20 6C 69        if i < li
0000000000003700 6D 69 74 20 6F 72 20 6C 69 6D 69 74 20 3C 3D 20 mit or limit <= 
0000000000003710 30 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 0:��            
0000000000003720 70 72 69 6E 74 28 66 22 20 20 2D 20 7B 65 6E 74 print(f"  - {ent
0000000000003730 72 6F 70 79 3A 3C 36 2E 34 66 7D 20 7C 20 7B 66 ropy:<6.4f} | {f
0000000000003740 69 6C 65 6E 61 6D 65 7D 22 29 0D 0A 20 20 20 20 ilename}")��    
0000000000003750 69 66 20 6C 65 6E 28 65 6E 74 72 6F 70 69 65 73 if len(entropies
0000000000003760 29 20 3E 20 6C 69 6D 69 74 20 61 6E 64 20 6C 69 ) > limit and li
0000000000003770 6D 69 74 20 3E 20 30 3A 0D 0A 20 20 20 20 20 20 mit > 0:��      
0000000000003780 20 20 20 70 72 69 6E 74 28 66 22 20 20 2E 2E 2E    print(f"  ...
0000000000003790 20 28 7B 6C 65 6E 28 65 6E 74 72 6F 70 69 65 73  ({len(entropies
00000000000037A0 29 20 2D 20 6C 69 6D 69 74 7D 20 6D 6F 72 65 20 ) - limit} more 
00000000000037B0 66 69 6C 65 73 29 22 29 0D 0A 0D 0A 0D 0A 64 65 files)")������de
00000000000037C0 66 20 72 65 70 6F 72 74 5F 73 74 72 69 6E 67 73 f report_strings
00000000000037D0 28 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 (analysis_result
00000000000037E0 73 29 3A 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 s):��    print("
00000000000037F0 5C 6E 2D 2D 2D 20 45 78 74 72 61 63 74 65 64 20 \n--- Extracted 
0000000000003800 53 74 72 69 6E 67 73 20 52 65 70 6F 72 74 20 2D Strings Report -
0000000000003810 2D 2D 22 29 0D 0A 20 20 20 20 6C 69 6D 69 74 20 --")��    limit 
0000000000003820 3D 20 35 20 23 20 4C 69 6D 69 74 20 66 69 6C 65 = 5 # Limit file
0000000000003830 73 20 74 6F 20 72 65 70 6F 72 74 20 73 74 72 69 s to report stri
0000000000003840 6E 67 73 20 66 6F 72 0D 0A 20 20 20 20 63 6F 75 ngs for��    cou
0000000000003850 6E 74 20 3D 20 30 0D 0A 20 20 20 20 72 65 70 6F nt = 0��    repo
0000000000003860 72 74 65 64 20 3D 20 46 61 6C 73 65 0D 0A 20 20 rted = False��  
0000000000003870 20 20 66 6F 72 20 72 20 69 6E 20 61 6E 61 6C 79   for r in analy
0000000000003880 73 69 73 5F 72 65 73 75 6C 74 73 3A 0D 0A 20 20 sis_results:��  
0000000000003890 20 20 20 20 20 20 20 69 66 20 72 5B 27 65 72 72        if r['err
00000000000038A0 6F 72 27 5D 20 6F 72 20 6E 6F 74 20 72 5B 27 73 or'] or not r['s
00000000000038B0 74 72 69 6E 67 73 27 5D 3A 0D 0A 20 20 20 20 20 trings']:��     
00000000000038C0 20 20 20 20 20 20 20 20 63 6F 6E 74 69 6E 75 65         continue
00000000000038D0 0D 0A 20 20 20 20 20 20 20 20 20 63 6F 75 6E 74 ��         count
00000000000038E0 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 20 20  += 1��         
00000000000038F0 69 66 20 63 6F 75 6E 74 20 3E 20 6C 69 6D 69 74 if count > limit
0000000000003900 20 61 6E 64 20 6C 69 6D 69 74 20 3E 20 30 3A 20  and limit > 0: 
0000000000003910 63 6F 6E 74 69 6E 75 65 20 23 20 4C 69 6D 69 74 continue # Limit
0000000000003920 20 66 69 6C 65 20 6F 75 74 70 75 74 0D 0A 0D 0A  file output����
0000000000003930 20 20 20 20 20 20 20 20 20 72 65 70 6F 72 74 65          reporte
0000000000003940 64 20 3D 20 54 72 75 65 0D 0A 20 20 20 20 20 20 d = True��      
0000000000003950 20 20 20 70 72 69 6E 74 28 66 22 5B 2A 5D 20 53    print(f"[*] S
0000000000003960 74 72 69 6E 67 73 20 66 6F 75 6E 64 20 69 6E 20 trings found in 
0000000000003970 7B 72 5B 27 66 69 6C 65 6E 61 6D 65 27 5D 7D 20 {r['filename']} 
0000000000003980 28 6C 69 6D 69 74 65 64 20 74 6F 20 7B 4D 41 58 (limited to {MAX
0000000000003990 5F 53 54 52 49 4E 47 53 5F 50 45 52 5F 46 49 4C _STRINGS_PER_FIL
00000000000039A0 45 7D 29 3A 22 29 0D 0A 20 20 20 20 20 20 20 20 E}):")��        
00000000000039B0 20 64 69 73 70 6C 61 79 5F 63 6F 75 6E 74 20 3D  display_count =
00000000000039C0 20 30 0D 0A 20 20 20 20 20 20 20 20 20 75 6E 69  0��         uni
00000000000039D0 71 75 65 5F 73 74 72 69 6E 67 73 20 3D 20 73 6F que_strings = so
00000000000039E0 72 74 65 64 28 6C 69 73 74 28 73 65 74 28 72 5B rted(list(set(r[
00000000000039F0 27 73 74 72 69 6E 67 73 27 5D 29 29 29 20 23 20 'strings']))) # 
0000000000003A00 53 68 6F 77 20 75 6E 69 71 75 65 20 73 74 72 69 Show unique stri
0000000000003A10 6E 67 73 2C 20 73 6F 72 74 65 64 0D 0A 20 20 20 ngs, sorted��   
0000000000003A20 20 20 20 20 20 20 66 6F 72 20 73 20 69 6E 20 75       for s in u
0000000000003A30 6E 69 71 75 65 5F 73 74 72 69 6E 67 73 3A 0D 0A nique_strings:��
0000000000003A40 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69 66               if
0000000000003A50 20 64 69 73 70 6C 61 79 5F 63 6F 75 6E 74 20 3E  display_count >
0000000000003A60 3D 20 4D 41 58 5F 53 54 52 49 4E 47 53 5F 50 45 = MAX_STRINGS_PE
0000000000003A70 52 5F 46 49 4C 45 3A 0D 0A 20 20 20 20 20 20 20 R_FILE:��       
0000000000003A80 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
0000000000003A90 28 66 22 20 20 2E 2E 2E 20 28 7B 6C 65 6E 28 75 (f"  ... ({len(u
0000000000003AA0 6E 69 71 75 65 5F 73 74 72 69 6E 67 73 29 20 2D nique_strings) -
0000000000003AB0 20 64 69 73 70 6C 61 79 5F 63 6F 75 6E 74 7D 20  display_count} 
0000000000003AC0 6D 6F 72 65 20 75 6E 69 71 75 65 20 73 74 72 69 more unique stri
0000000000003AD0 6E 67 73 29 22 29 0D 0A 20 20 20 20 20 20 20 20 ngs)")��        
0000000000003AE0 20 20 20 20 20 20 20 20 20 20 62 72 65 61 6B 0D           break�
0000000000003AF0 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 70 �              p
0000000000003B00 72 69 6E 74 28 66 22 20 20 2D 20 5C 22 7B 73 7D rint(f"  - \"{s}
0000000000003B10 5C 22 22 29 0D 0A 20 20 20 20 20 20 20 20 20 20 \"")��          
0000000000003B20 20 20 20 20 64 69 73 70 6C 61 79 5F 63 6F 75 6E     display_coun
0000000000003B30 74 20 2B 3D 20 31 0D 0A 0D 0A 20 20 20 20 69 66 t += 1����    if
0000000000003B40 20 6E 6F 74 20 72 65 70 6F 72 74 65 64 3A 0D 0A  not reported:��
0000000000003B50 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
0000000000003B60 22 5B 2A 5D 20 4E 6F 20 73 74 72 69 6E 67 73 20 "[*] No strings 
0000000000003B70 6F 66 20 6D 69 6E 69 6D 75 6D 20 6C 65 6E 67 74 of minimum lengt
0000000000003B80 68 20 7B 4D 49 4E 5F 53 54 52 49 4E 47 5F 4C 45 h {MIN_STRING_LE
0000000000003B90 4E 47 54 48 7D 20 66 6F 75 6E 64 2E 22 29 0D 0A NGTH} found.")��
0000000000003BA0 20 20 20 20 69 66 20 63 6F 75 6E 74 20 3E 20 6C     if count > l
0000000000003BB0 69 6D 69 74 20 61 6E 64 20 6C 69 6D 69 74 20 3E imit and limit >
0000000000003BC0 20 30 3A 0D 0A 20 20 20 20 20 20 20 20 20 70 72  0:��         pr
0000000000003BD0 69 6E 74 28 66 22 5B 2A 5D 20 28 53 74 72 69 6E int(f"[*] (Strin
0000000000003BE0 67 20 72 65 70 6F 72 74 20 6C 69 6D 69 74 65 64 g report limited
0000000000003BF0 20 74 6F 20 66 69 72 73 74 20 7B 6C 69 6D 69 74  to first {limit
0000000000003C00 7D 20 66 69 6C 65 73 20 63 6F 6E 74 61 69 6E 69 } files containi
0000000000003C10 6E 67 20 73 74 72 69 6E 67 73 29 22 29 0D 0A 0D ng strings)")���
0000000000003C20 0A 0D 0A 64 65 66 20 72 65 70 6F 72 74 5F 70 6F ���def report_po
0000000000003C30 74 65 6E 74 69 61 6C 5F 6C 75 6D 70 73 28 61 6E tential_lumps(an
0000000000003C40 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 29 3A alysis_results):
0000000000003C50 0D 0A 20 20 20 20 70 72 69 6E 74 28 22 5C 6E 2D ��    print("\n-
0000000000003C60 2D 2D 20 50 6F 74 65 6E 74 69 61 6C 20 4C 75 6D -- Potential Lum
0000000000003C70 70 20 44 69 72 65 63 74 6F 72 79 20 41 6E 61 6C p Directory Anal
0000000000003C80 79 73 69 73 20 28 4F 66 66 73 65 74 73 20 30 78 ysis (Offsets 0x
0000000000003C90 31 30 2D 30 78 36 46 29 20 2D 2D 2D 22 29 0D 0A 10-0x6F) ---")��
0000000000003CA0 20 20 20 20 70 72 69 6E 74 28 22 5B 21 5D 20 54     print("[!] T
0000000000003CB0 72 65 61 74 73 20 64 61 74 61 20 61 73 20 70 61 reats data as pa
0000000000003CC0 69 72 73 20 6F 66 20 42 69 67 20 45 6E 64 69 61 irs of Big Endia
0000000000003CD0 6E 20 28 4F 66 66 73 65 74 2C 20 4C 65 6E 67 74 n (Offset, Lengt
0000000000003CE0 68 29 2E 20 48 69 67 68 6C 79 20 73 70 65 63 75 h). Highly specu
0000000000003CF0 6C 61 74 69 76 65 21 22 29 0D 0A 20 20 20 20 6C lative!")��    l
0000000000003D00 69 6D 69 74 20 3D 20 35 20 23 20 4C 69 6D 69 74 imit = 5 # Limit
0000000000003D10 20 66 69 6C 65 73 20 74 6F 20 72 65 70 6F 72 74  files to report
0000000000003D20 20 6C 75 6D 70 73 20 66 6F 72 0D 0A 20 20 20 20  lumps for��    
0000000000003D30 63 6F 75 6E 74 20 3D 20 30 0D 0A 20 20 20 20 72 count = 0��    r
0000000000003D40 65 70 6F 72 74 65 64 20 3D 20 46 61 6C 73 65 0D eported = False�
0000000000003D50 0A 20 20 20 20 66 6F 72 20 72 20 69 6E 20 61 6E �    for r in an
0000000000003D60 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 3A 0D alysis_results:�
0000000000003D70 0A 20 20 20 20 20 20 20 20 20 69 66 20 72 5B 27 �         if r['
0000000000003D80 65 72 72 6F 72 27 5D 20 6F 72 20 6E 6F 74 20 72 error'] or not r
0000000000003D90 5B 27 70 6F 74 65 6E 74 69 61 6C 5F 6C 75 6D 70 ['potential_lump
0000000000003DA0 73 27 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 s']:��          
0000000000003DB0 20 20 20 63 6F 6E 74 69 6E 75 65 0D 0A 20 20 20    continue��   
0000000000003DC0 20 20 20 20 20 20 63 6F 75 6E 74 20 2B 3D 20 31       count += 1
0000000000003DD0 0D 0A 20 20 20 20 20 20 20 20 20 69 66 20 63 6F ��         if co
0000000000003DE0 75 6E 74 20 3E 20 6C 69 6D 69 74 20 61 6E 64 20 unt > limit and 
0000000000003DF0 6C 69 6D 69 74 20 3E 20 30 3A 20 63 6F 6E 74 69 limit > 0: conti
0000000000003E00 6E 75 65 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20 nue����         
0000000000003E10 72 65 70 6F 72 74 65 64 20 3D 20 54 72 75 65 0D reported = True�
0000000000003E20 0A 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 �         print(
0000000000003E30 66 22 5B 2A 5D 20 50 6F 74 65 6E 74 69 61 6C 20 f"[*] Potential 
0000000000003E40 4C 75 6D 70 73 20 69 6E 20 7B 72 5B 27 66 69 6C Lumps in {r['fil
0000000000003E50 65 6E 61 6D 65 27 5D 7D 20 28 6C 69 6D 69 74 65 ename']} (limite
0000000000003E60 64 20 74 6F 20 7B 4D 41 58 5F 4C 55 4D 50 53 5F d to {MAX_LUMPS_
0000000000003E70 50 45 52 5F 46 49 4C 45 7D 29 3A 22 29 0D 0A 20 PER_FILE}):")�� 
0000000000003E80 20 20 20 20 20 20 20 20 64 69 73 70 6C 61 79 5F         display_
0000000000003E90 63 6F 75 6E 74 20 3D 20 30 0D 0A 20 20 20 20 20 count = 0��     
0000000000003EA0 20 20 20 20 66 6F 72 20 6C 75 6D 70 20 69 6E 20     for lump in 
0000000000003EB0 72 5B 27 70 6F 74 65 6E 74 69 61 6C 5F 6C 75 6D r['potential_lum
0000000000003EC0 70 73 27 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 ps']:��         
0000000000003ED0 20 20 20 20 20 69 66 20 64 69 73 70 6C 61 79 5F      if display_
0000000000003EE0 63 6F 75 6E 74 20 3E 3D 20 4D 41 58 5F 4C 55 4D count >= MAX_LUM
0000000000003EF0 50 53 5F 50 45 52 5F 46 49 4C 45 3A 0D 0A 20 20 PS_PER_FILE:��  
0000000000003F00 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000003F10 20 70 72 69 6E 74 28 66 22 20 20 2E 2E 2E 20 28  print(f"  ... (
0000000000003F20 7B 6C 65 6E 28 72 5B 27 70 6F 74 65 6E 74 69 61 {len(r['potentia
0000000000003F30 6C 5F 6C 75 6D 70 73 27 5D 29 20 2D 20 64 69 73 l_lumps']) - dis
0000000000003F40 70 6C 61 79 5F 63 6F 75 6E 74 7D 20 6D 6F 72 65 play_count} more
0000000000003F50 20 70 6F 74 65 6E 74 69 61 6C 20 6C 75 6D 70 73  potential lumps
0000000000003F60 29 22 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 )")��           
0000000000003F70 20 20 20 20 20 20 20 20 62 72 65 61 6B 0D 0A 20         break�� 
0000000000003F80 20 20 20 20 20 20 20 20 20 20 20 20 20 23 20 52              # R
0000000000003F90 65 70 6F 72 74 20 49 44 20 28 69 6E 64 65 78 20 eport ID (index 
0000000000003FA0 69 6E 20 64 69 72 29 2C 20 4F 66 66 73 65 74 2C in dir), Offset,
0000000000003FB0 20 4C 65 6E 67 74 68 0D 0A 20 20 20 20 20 20 20  Length��       
0000000000003FC0 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22 20        print(f" 
0000000000003FD0 20 2D 20 49 44 3A 20 7B 6C 75 6D 70 5B 27 69 64  - ID: {lump['id
0000000000003FE0 27 5D 3A 3C 32 7D 20 7C 20 4F 66 66 73 65 74 3A ']:<2} | Offset:
0000000000003FF0 20 30 78 7B 6C 75 6D 70 5B 27 6F 66 66 73 65 74  0x{lump['offset
0000000000004000 27 5D 3A 30 38 58 7D 20 28 7B 6C 75 6D 70 5B 27 ']:08X} ({lump['
0000000000004010 6F 66 66 73 65 74 27 5D 3A 3C 31 30 7D 29 20 7C offset']:<10}) |
0000000000004020 20 4C 65 6E 67 74 68 3A 20 30 78 7B 6C 75 6D 70  Length: 0x{lump
0000000000004030 5B 27 6C 65 6E 67 74 68 27 5D 3A 30 38 58 7D 20 ['length']:08X} 
0000000000004040 28 7B 6C 75 6D 70 5B 27 6C 65 6E 67 74 68 27 5D ({lump['length']
0000000000004050 3A 3C 31 30 7D 29 22 29 0D 0A 20 20 20 20 20 20 :<10})")��      
0000000000004060 20 20 20 20 20 20 20 20 64 69 73 70 6C 61 79 5F         display_
0000000000004070 63 6F 75 6E 74 20 2B 3D 20 31 0D 0A 0D 0A 20 20 count += 1����  
0000000000004080 20 20 69 66 20 6E 6F 74 20 72 65 70 6F 72 74 65   if not reporte
0000000000004090 64 3A 0D 0A 20 20 20 20 20 20 20 20 70 72 69 6E d:��        prin
00000000000040A0 74 28 66 22 5B 2A 5D 20 4E 6F 20 70 6F 74 65 6E t(f"[*] No poten
00000000000040B0 74 69 61 6C 20 76 61 6C 69 64 20 6C 75 6D 70 20 tial valid lump 
00000000000040C0 65 6E 74 72 69 65 73 20 66 6F 75 6E 64 20 69 6E entries found in
00000000000040D0 20 68 65 61 64 65 72 20 73 65 63 74 69 6F 6E 20  header section 
00000000000040E0 30 78 31 30 2D 30 78 36 46 2E 22 29 0D 0A 20 20 0x10-0x6F.")��  
00000000000040F0 20 20 69 66 20 63 6F 75 6E 74 20 3E 20 6C 69 6D   if count > lim
0000000000004100 69 74 20 61 6E 64 20 6C 69 6D 69 74 20 3E 20 30 it and limit > 0
0000000000004110 3A 0D 0A 20 20 20 20 20 20 20 20 70 72 69 6E 74 :��        print
0000000000004120 28 66 22 5B 2A 5D 20 28 50 6F 74 65 6E 74 69 61 (f"[*] (Potentia
0000000000004130 6C 20 6C 75 6D 70 20 72 65 70 6F 72 74 20 6C 69 l lump report li
0000000000004140 6D 69 74 65 64 20 74 6F 20 66 69 72 73 74 20 7B mited to first {
0000000000004150 6C 69 6D 69 74 7D 20 66 69 6C 65 73 20 77 69 74 limit} files wit
0000000000004160 68 20 65 6E 74 72 69 65 73 29 22 29 0D 0A 0D 0A h entries)")����
0000000000004170 0D 0A 64 65 66 20 72 65 70 6F 72 74 5F 6C 75 6D ��def report_lum
0000000000004180 70 5F 33 5F 61 6E 61 6C 79 73 69 73 28 61 6E 61 p_3_analysis(ana
0000000000004190 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 29 3A 0D lysis_results):�
00000000000041A0 0A 20 20 20 20 22 22 22 52 65 70 6F 72 74 73 20 �    """Reports 
00000000000041B0 74 68 65 20 61 6E 61 6C 79 73 69 73 20 72 65 73 the analysis res
00000000000041C0 75 6C 74 73 20 66 6F 72 20 4C 75 6D 70 20 33 20 ults for Lump 3 
00000000000041D0 28 4E 6F 64 65 73 29 2E 22 22 22 0D 0A 20 20 20 (Nodes)."""��   
00000000000041E0 20 70 72 69 6E 74 28 22 5C 6E 2D 2D 2D 20 4C 75  print("\n--- Lu
00000000000041F0 6D 70 20 33 20 28 4E 6F 64 65 20 53 74 72 75 63 mp 3 (Node Struc
0000000000004200 74 75 72 65 29 20 41 6E 61 6C 79 73 69 73 20 2D ture) Analysis -
0000000000004210 2D 2D 22 29 0D 0A 20 20 20 20 70 72 69 6E 74 28 --")��    print(
0000000000004220 66 22 5B 2A 5D 20 41 74 74 65 6D 70 74 69 6E 67 f"[*] Attempting
0000000000004230 20 74 6F 20 70 61 72 73 65 20 4C 75 6D 70 20 33  to parse Lump 3
0000000000004240 20 64 61 74 61 20 61 73 20 7B 4E 4F 44 45 5F 4C  data as {NODE_L
0000000000004250 55 4D 50 33 5F 53 49 5A 45 7D 2D 62 79 74 65 20 UMP3_SIZE}-byte 
0000000000004260 6E 6F 64 65 73 3A 22 29 0D 0A 20 20 20 20 70 72 nodes:")��    pr
0000000000004270 69 6E 74 28 66 22 5B 2A 5D 20 46 6F 72 6D 61 74 int(f"[*] Format
0000000000004280 3A 20 7B 4E 4F 44 45 5F 4C 55 4D 50 33 5F 46 4F : {NODE_LUMP3_FO
0000000000004290 52 4D 41 54 7D 20 28 42 45 3A 20 38 20 66 6C 6F RMAT} (BE: 8 flo
00000000000042A0 61 74 2C 20 38 20 69 6E 74 29 22 29 0D 0A 20 20 at, 8 int)")��  
00000000000042B0 20 20 70 72 69 6E 74 28 66 22 5B 2A 5D 20 46 69   print(f"[*] Fi
00000000000042C0 65 6C 64 73 3A 20 50 6C 61 6E 65 28 34 66 29 2C elds: Plane(4f),
00000000000042D0 20 42 42 6F 78 2F 54 65 78 3F 28 34 66 29 2C 20  BBox/Tex?(4f), 
00000000000042E0 46 6C 61 67 73 3F 28 69 29 2C 20 43 68 69 6C 64 Flags?(i), Child
00000000000042F0 46 28 69 29 2C 20 43 68 69 6C 64 42 28 69 29 2C F(i), ChildB(i),
0000000000004300 20 55 6E 6B 31 28 69 29 2C 20 55 6E 6B 32 28 69  Unk1(i), Unk2(i
0000000000004310 29 2C 20 55 6E 6B 33 28 69 29 2C 20 55 6E 6B 34 ), Unk3(i), Unk4
0000000000004320 28 69 29 2C 20 55 6E 6B 35 28 69 29 22 29 0D 0A (i), Unk5(i)")��
0000000000004330 0D 0A 20 20 20 20 72 65 70 6F 72 74 65 64 5F 66 ��    reported_f
0000000000004340 69 6C 65 73 20 3D 20 30 0D 0A 20 20 20 20 73 70 iles = 0��    sp
0000000000004350 65 63 69 61 6C 5F 66 69 6C 65 73 5F 72 65 70 6F ecial_files_repo
0000000000004360 72 74 65 64 20 3D 20 7B 27 7A 6F 6E 65 30 31 2E rted = {'zone01.
0000000000004370 62 73 70 27 3A 20 46 61 6C 73 65 2C 20 27 7A 6F bsp': False, 'zo
0000000000004380 6E 65 31 33 2E 62 73 70 27 3A 20 46 61 6C 73 65 ne13.bsp': False
0000000000004390 7D 0D 0A 0D 0A 20 20 20 20 23 20 50 72 69 6F 72 }����    # Prior
00000000000043A0 69 74 69 7A 65 20 73 70 65 63 69 61 6C 20 66 69 itize special fi
00000000000043B0 6C 65 73 0D 0A 20 20 20 20 66 69 6C 65 73 5F 74 les��    files_t
00000000000043C0 6F 5F 72 65 70 6F 72 74 20 3D 20 5B 5D 0D 0A 20 o_report = []�� 
00000000000043D0 20 20 20 6F 74 68 65 72 5F 66 69 6C 65 73 20 3D    other_files =
00000000000043E0 20 5B 5D 0D 0A 20 20 20 20 66 6F 72 20 72 20 69  []��    for r i
00000000000043F0 6E 20 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C n analysis_resul
0000000000004400 74 73 3A 0D 0A 20 20 20 20 20 20 20 20 69 66 20 ts:��        if 
0000000000004410 72 5B 27 65 72 72 6F 72 27 5D 20 6F 72 20 6E 6F r['error'] or no
0000000000004420 74 20 72 5B 27 6C 75 6D 70 5F 33 5F 6E 6F 64 65 t r['lump_3_node
0000000000004430 73 27 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 s']:��          
0000000000004440 20 20 63 6F 6E 74 69 6E 75 65 0D 0A 20 20 20 20   continue��    
0000000000004450 20 20 20 20 69 66 20 72 5B 27 66 69 6C 65 6E 61     if r['filena
0000000000004460 6D 65 27 5D 20 69 6E 20 73 70 65 63 69 61 6C 5F me'] in special_
0000000000004470 66 69 6C 65 73 5F 72 65 70 6F 72 74 65 64 3A 0D files_reported:�
0000000000004480 0A 20 20 20 20 20 20 20 20 20 20 20 20 66 69 6C �            fil
0000000000004490 65 73 5F 74 6F 5F 72 65 70 6F 72 74 2E 61 70 70 es_to_report.app
00000000000044A0 65 6E 64 28 72 29 0D 0A 20 20 20 20 20 20 20 20 end(r)��        
00000000000044B0 65 6C 73 65 3A 0D 0A 20 20 20 20 20 20 20 20 20 else:��         
00000000000044C0 20 20 20 6F 74 68 65 72 5F 66 69 6C 65 73 2E 61    other_files.a
00000000000044D0 70 70 65 6E 64 28 72 29 0D 0A 20 20 20 20 0D 0A ppend(r)��    ��
00000000000044E0 20 20 20 20 23 20 43 6F 6D 62 69 6E 65 20 6C 69     # Combine li
00000000000044F0 73 74 73 2C 20 73 70 65 63 69 61 6C 20 66 69 6C sts, special fil
0000000000004500 65 73 20 66 69 72 73 74 0D 0A 20 20 20 20 61 6C es first��    al
0000000000004510 6C 5F 61 6E 61 6C 79 7A 65 64 5F 66 69 6C 65 73 l_analyzed_files
0000000000004520 20 3D 20 66 69 6C 65 73 5F 74 6F 5F 72 65 70 6F  = files_to_repo
0000000000004530 72 74 20 2B 20 6F 74 68 65 72 5F 66 69 6C 65 73 rt + other_files
0000000000004540 0D 0A 0D 0A 20 20 20 20 66 6F 72 20 72 20 69 6E ����    for r in
0000000000004550 20 61 6C 6C 5F 61 6E 61 6C 79 7A 65 64 5F 66 69  all_analyzed_fi
0000000000004560 6C 65 73 3A 0D 0A 20 20 20 20 20 20 20 20 66 69 les:��        fi
0000000000004570 6C 65 6E 61 6D 65 20 3D 20 72 5B 27 66 69 6C 65 lename = r['file
0000000000004580 6E 61 6D 65 27 5D 0D 0A 20 20 20 20 20 20 20 20 name']��        
0000000000004590 6C 75 6D 70 33 5F 72 65 73 75 6C 74 20 3D 20 72 lump3_result = r
00000000000045A0 5B 27 6C 75 6D 70 5F 33 5F 6E 6F 64 65 73 27 5D ['lump_3_nodes']
00000000000045B0 0D 0A 20 20 20 20 20 20 20 20 69 73 5F 73 70 65 ��        is_spe
00000000000045C0 63 69 61 6C 20 3D 20 66 69 6C 65 6E 61 6D 65 20 cial = filename 
00000000000045D0 69 6E 20 73 70 65 63 69 61 6C 5F 66 69 6C 65 73 in special_files
00000000000045E0 5F 72 65 70 6F 72 74 65 64 0D 0A 0D 0A 20 20 20 _reported����   
00000000000045F0 20 20 20 20 20 70 72 69 6E 74 28 66 22 5C 6E 5B      print(f"\n[
0000000000004600 2A 5D 20 46 69 6C 65 3A 20 7B 66 69 6C 65 6E 61 *] File: {filena
0000000000004610 6D 65 7D 22 20 2B 20 28 22 20 28 53 50 45 43 49 me}" + (" (SPECI
0000000000004620 41 4C 20 49 4E 54 45 52 45 53 54 29 22 20 69 66 AL INTEREST)" if
0000000000004630 20 69 73 5F 73 70 65 63 69 61 6C 20 65 6C 73 65  is_special else
0000000000004640 20 22 22 29 29 0D 0A 0D 0A 20 20 20 20 20 20 20  ""))����       
0000000000004650 20 69 66 20 69 73 69 6E 73 74 61 6E 63 65 28 6C  if isinstance(l
0000000000004660 75 6D 70 33 5F 72 65 73 75 6C 74 2C 20 73 74 72 ump3_result, str
0000000000004670 29 3A 20 23 20 45 72 72 6F 72 20 6D 65 73 73 61 ): # Error messa
0000000000004680 67 65 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ge��            
0000000000004690 70 72 69 6E 74 28 66 22 20 20 2D 20 41 6E 61 6C print(f"  - Anal
00000000000046A0 79 73 69 73 20 52 65 73 75 6C 74 3A 20 7B 6C 75 ysis Result: {lu
00000000000046B0 6D 70 33 5F 72 65 73 75 6C 74 7D 22 29 0D 0A 20 mp3_result}")�� 
00000000000046C0 20 20 20 20 20 20 20 20 20 20 20 69 66 20 69 73            if is
00000000000046D0 5F 73 70 65 63 69 61 6C 3A 20 73 70 65 63 69 61 _special: specia
00000000000046E0 6C 5F 66 69 6C 65 73 5F 72 65 70 6F 72 74 65 64 l_files_reported
00000000000046F0 5B 66 69 6C 65 6E 61 6D 65 5D 20 3D 20 54 72 75 [filename] = Tru
0000000000004700 65 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 72 e��            r
0000000000004710 65 70 6F 72 74 65 64 5F 66 69 6C 65 73 20 2B 3D eported_files +=
0000000000004720 20 31 0D 0A 20 20 20 20 20 20 20 20 65 6C 69 66  1��        elif
0000000000004730 20 69 73 69 6E 73 74 61 6E 63 65 28 6C 75 6D 70  isinstance(lump
0000000000004740 33 5F 72 65 73 75 6C 74 2C 20 6C 69 73 74 29 3A 3_result, list):
0000000000004750 20 23 20 4C 69 73 74 20 6F 66 20 6E 6F 64 65 73  # List of nodes
0000000000004760 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 6E 75 ��            nu
0000000000004770 6D 5F 6E 6F 64 65 73 20 3D 20 6C 65 6E 28 6C 75 m_nodes = len(lu
0000000000004780 6D 70 33 5F 72 65 73 75 6C 74 29 0D 0A 20 20 20 mp3_result)��   
0000000000004790 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
00000000000047A0 22 20 20 2D 20 53 75 63 63 65 73 73 66 75 6C 6C "  - Successfull
00000000000047B0 79 20 70 61 72 73 65 64 20 7B 6E 75 6D 5F 6E 6F y parsed {num_no
00000000000047C0 64 65 73 7D 20 6E 6F 64 65 73 2E 22 29 0D 0A 20 des} nodes.")�� 
00000000000047D0 20 20 20 20 20 20 20 20 20 20 20 69 66 20 69 73            if is
00000000000047E0 5F 73 70 65 63 69 61 6C 3A 20 73 70 65 63 69 61 _special: specia
00000000000047F0 6C 5F 66 69 6C 65 73 5F 72 65 70 6F 72 74 65 64 l_files_reported
0000000000004800 5B 66 69 6C 65 6E 61 6D 65 5D 20 3D 20 54 72 75 [filename] = Tru
0000000000004810 65 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 72 e��            r
0000000000004820 65 70 6F 72 74 65 64 5F 66 69 6C 65 73 20 2B 3D eported_files +=
0000000000004830 20 31 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20 20  1����          
0000000000004840 20 20 23 20 50 72 69 6E 74 20 66 69 72 73 74 20   # Print first 
0000000000004850 66 65 77 20 6E 6F 64 65 73 0D 0A 20 20 20 20 20 few nodes��     
0000000000004860 20 20 20 20 20 20 20 66 6F 72 20 69 2C 20 6E 6F        for i, no
0000000000004870 64 65 20 69 6E 20 65 6E 75 6D 65 72 61 74 65 28 de in enumerate(
0000000000004880 6C 75 6D 70 33 5F 72 65 73 75 6C 74 29 3A 0D 0A lump3_result):��
0000000000004890 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000048A0 69 66 20 69 20 3E 3D 20 4D 41 58 5F 4C 55 4D 50 if i >= MAX_LUMP
00000000000048B0 33 5F 4E 4F 44 45 53 5F 54 4F 5F 52 45 50 4F 52 3_NODES_TO_REPOR
00000000000048C0 54 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 T:��            
00000000000048D0 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22         print(f"
00000000000048E0 20 20 2E 2E 2E 20 28 7B 6E 75 6D 5F 6E 6F 64 65   ... ({num_node
00000000000048F0 73 20 2D 20 69 7D 20 6D 6F 72 65 20 6E 6F 64 65 s - i} more node
0000000000004900 73 20 6E 6F 74 20 73 68 6F 77 6E 29 22 29 0D 0A s not shown)")��
0000000000004910 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000004920 20 20 20 20 62 72 65 61 6B 0D 0A 0D 0A 20 20 20     break����   
0000000000004930 20 20 20 20 20 20 20 20 20 20 20 20 20 23 20 55              # U
0000000000004940 6E 70 61 63 6B 20 74 68 65 20 74 75 70 6C 65 20 npack the tuple 
0000000000004950 66 6F 72 20 63 6C 61 72 69 74 79 20 28 38 20 66 for clarity (8 f
0000000000004960 6C 6F 61 74 73 2C 20 38 20 69 6E 74 73 29 0D 0A loats, 8 ints)��
0000000000004970 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000004980 66 31 2C 20 66 32 2C 20 66 33 2C 20 66 34 2C 20 f1, f2, f3, f4, 
0000000000004990 66 35 2C 20 66 36 2C 20 66 37 2C 20 66 38 2C 20 f5, f6, f7, f8, 
00000000000049A0 69 31 2C 20 69 32 2C 20 69 33 2C 20 69 34 2C 20 i1, i2, i3, i4, 
00000000000049B0 69 35 2C 20 69 36 2C 20 69 37 2C 20 69 38 20 3D i5, i6, i7, i8 =
00000000000049C0 20 6E 6F 64 65 0D 0A 0D 0A 20 20 20 20 20 20 20  node����       
00000000000049D0 20 20 20 20 20 20 20 20 20 23 20 2D 2D 2D 20 43          # --- C
00000000000049E0 68 69 6C 64 20 50 6F 69 6E 74 65 72 20 49 6E 74 hild Pointer Int
00000000000049F0 65 72 70 72 65 74 61 74 69 6F 6E 20 2D 2D 2D 0D erpretation ---�
0000000000004A00 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 �               
0000000000004A10 20 23 20 4E 65 78 74 20 53 74 65 70 73 3A 0D 0A  # Next Steps:��
0000000000004A20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000004A30 23 20 31 2E 20 44 65 74 65 72 6D 69 6E 65 20 65 # 1. Determine e
0000000000004A40 78 61 63 74 20 6D 65 61 6E 69 6E 67 3A 20 41 72 xact meaning: Ar
0000000000004A50 65 20 69 32 2C 20 69 33 20 62 79 74 65 20 6F 66 e i2, i3 byte of
0000000000004A60 66 73 65 74 73 20 28 66 72 6F 6D 20 6C 75 6D 70 fsets (from lump
0000000000004A70 20 73 74 61 72 74 3F 20 6E 6F 64 65 20 73 74 61  start? node sta
0000000000004A80 72 74 3F 29 2C 20 6E 6F 64 65 20 69 6E 64 69 63 rt?), node indic
0000000000004A90 65 73 2C 20 6F 72 20 73 6F 6D 65 74 68 69 6E 67 es, or something
0000000000004AA0 20 65 6C 73 65 3F 0D 0A 20 20 20 20 20 20 20 20  else?��        
0000000000004AB0 20 20 20 20 20 20 20 20 23 20 32 2E 20 4E 65 67         # 2. Neg
0000000000004AC0 61 74 69 76 65 20 76 61 6C 75 65 73 3A 20 4F 66 ative values: Of
0000000000004AD0 74 65 6E 20 69 6E 64 69 63 61 74 65 20 6C 65 61 ten indicate lea
0000000000004AE0 66 20 6E 6F 64 65 73 2E 20 54 68 65 20 66 6F 72 f nodes. The for
0000000000004AF0 6D 61 74 20 7E 69 6E 64 65 78 20 3D 20 2D 28 76 mat ~index = -(v
0000000000004B00 61 6C 75 65 20 2B 20 31 29 20 69 73 20 63 6F 6D alue + 1) is com
0000000000004B10 6D 6F 6E 2E 0D 0A 20 20 20 20 20 20 20 20 20 20 mon.��          
0000000000004B20 20 20 20 20 20 20 23 20 20 20 20 54 65 73 74 20       #    Test 
0000000000004B30 74 68 69 73 20 68 79 70 6F 74 68 65 73 69 73 20 this hypothesis 
0000000000004B40 62 79 20 65 78 61 6D 69 6E 69 6E 67 20 6C 65 61 by examining lea
0000000000004B50 66 20 64 61 74 61 20 72 65 66 65 72 65 6E 63 65 f data reference
0000000000004B60 64 20 62 79 20 6E 65 67 61 74 69 76 65 20 69 6E d by negative in
0000000000004B70 64 69 63 65 73 2E 0D 0A 20 20 20 20 20 20 20 20 dices.��        
0000000000004B80 20 20 20 20 20 20 20 20 23 20 33 2E 20 50 6F 73         # 3. Pos
0000000000004B90 69 74 69 76 65 20 76 61 6C 75 65 73 3A 20 4C 69 itive values: Li
0000000000004BA0 6B 65 6C 79 20 70 6F 69 6E 74 20 74 6F 20 63 68 kely point to ch
0000000000004BB0 69 6C 64 20 6E 6F 64 65 73 2E 20 56 65 72 69 66 ild nodes. Verif
0000000000004BC0 79 20 69 66 20 74 68 65 79 20 61 6C 69 67 6E 20 y if they align 
0000000000004BD0 77 69 74 68 20 65 78 70 65 63 74 65 64 20 6E 6F with expected no
0000000000004BE0 64 65 20 6F 66 66 73 65 74 73 2F 69 6E 64 69 63 de offsets/indic
0000000000004BF0 65 73 2E 0D 0A 20 20 20 20 20 20 20 20 20 20 20 es.��           
0000000000004C00 20 20 20 20 20 23 20 2D 2D 2D 2D 2D 2D 2D 2D 2D      # ---------
0000000000004C10 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D ----------------
0000000000004C20 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 0D 0A 0D -------------���
0000000000004C30 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 �               
0000000000004C40 20 23 20 41 73 73 75 6D 65 20 43 68 69 6C 64 20  # Assume Child 
0000000000004C50 46 72 6F 6E 74 2F 42 61 63 6B 20 61 72 65 20 69 Front/Back are i
0000000000004C60 32 20 61 6E 64 20 69 33 20 62 61 73 65 64 20 6F 2 and i3 based o
0000000000004C70 6E 20 63 6F 6D 6D 6F 6E 20 42 53 50 20 73 74 72 n common BSP str
0000000000004C80 75 63 74 75 72 65 73 0D 0A 20 20 20 20 20 20 20 uctures��       
0000000000004C90 20 20 20 20 20 20 20 20 20 63 68 69 6C 64 5F 66          child_f
0000000000004CA0 20 3D 20 69 32 0D 0A 20 20 20 20 20 20 20 20 20  = i2��         
0000000000004CB0 20 20 20 20 20 20 20 63 68 69 6C 64 5F 62 20 3D        child_b =
0000000000004CC0 20 69 33 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20  i3����         
0000000000004CD0 20 20 20 20 20 20 20 23 20 46 6F 72 6D 61 74 20        # Format 
0000000000004CE0 63 68 69 6C 64 72 65 6E 20 28 63 68 65 63 6B 20 children (check 
0000000000004CF0 69 66 20 6C 65 61 66 20 6E 6F 64 65 20 7E 28 2D if leaf node ~(-
0000000000004D00 69 6E 64 65 78 29 29 0D 0A 20 20 20 20 20 20 20 index))��       
0000000000004D10 20 20 20 20 20 20 20 20 20 23 20 54 68 69 73 20          # This 
0000000000004D20 69 6D 70 6C 65 6D 65 6E 74 73 20 74 68 65 20 63 implements the c
0000000000004D30 6F 6D 6D 6F 6E 20 2D 28 6C 65 61 66 5F 69 6E 64 ommon -(leaf_ind
0000000000004D40 65 78 20 2B 20 31 29 20 63 6F 6E 76 65 6E 74 69 ex + 1) conventi
0000000000004D50 6F 6E 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 on��            
0000000000004D60 20 20 20 20 63 68 69 6C 64 5F 66 5F 73 74 72 20     child_f_str 
0000000000004D70 3D 20 66 22 7E 7B 2D 28 63 68 69 6C 64 5F 66 20 = f"~{-(child_f 
0000000000004D80 2B 20 31 29 7D 22 20 69 66 20 63 68 69 6C 64 5F + 1)}" if child_
0000000000004D90 66 20 3C 20 30 20 65 6C 73 65 20 73 74 72 28 63 f < 0 else str(c
0000000000004DA0 68 69 6C 64 5F 66 29 0D 0A 20 20 20 20 20 20 20 hild_f)��       
0000000000004DB0 20 20 20 20 20 20 20 20 20 63 68 69 6C 64 5F 62          child_b
0000000000004DC0 5F 73 74 72 20 3D 20 66 22 7E 7B 2D 28 63 68 69 _str = f"~{-(chi
0000000000004DD0 6C 64 5F 62 20 2B 20 31 29 7D 22 20 69 66 20 63 ld_b + 1)}" if c
0000000000004DE0 68 69 6C 64 5F 62 20 3C 20 30 20 65 6C 73 65 20 hild_b < 0 else 
0000000000004DF0 73 74 72 28 63 68 69 6C 64 5F 62 29 0D 0A 0D 0A str(child_b)����
0000000000004E00 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000004E10 23 20 46 6F 72 6D 61 74 20 66 6C 6F 61 74 73 20 # Format floats 
0000000000004E20 6E 69 63 65 6C 79 20 28 67 72 6F 75 70 69 6E 67 nicely (grouping
0000000000004E30 20 74 68 65 20 66 69 72 73 74 20 34 20 61 6E 64  the first 4 and
0000000000004E40 20 6E 65 78 74 20 34 29 0D 0A 20 20 20 20 20 20  next 4)��      
0000000000004E50 20 20 20 20 20 20 20 20 20 20 70 6C 61 6E 65 5F           plane_
0000000000004E60 73 74 72 20 3D 20 66 22 28 7B 66 31 3A 2C 2E 31 str = f"({f1:,.1
0000000000004E70 66 7D 2C 20 7B 66 32 3A 2C 2E 31 66 7D 2C 20 7B f}, {f2:,.1f}, {
0000000000004E80 66 33 3A 2C 2E 31 66 7D 2C 20 7B 66 34 3A 2C 2E f3:,.1f}, {f4:,.
0000000000004E90 31 66 7D 29 22 0D 0A 20 20 20 20 20 20 20 20 20 1f})"��         
0000000000004EA0 20 20 20 20 20 20 20 62 62 6F 78 5F 74 65 78 5F        bbox_tex_
0000000000004EB0 73 74 72 20 3D 20 66 22 28 7B 66 35 3A 2C 2E 31 str = f"({f5:,.1
0000000000004EC0 66 7D 2C 20 7B 66 36 3A 2C 2E 31 66 7D 2C 20 7B f}, {f6:,.1f}, {
0000000000004ED0 66 37 3A 2C 2E 31 66 7D 2C 20 7B 66 38 3A 2C 2E f7:,.1f}, {f8:,.
0000000000004EE0 31 66 7D 29 22 0D 0A 20 20 20 20 20 20 20 20 20 1f})"��         
0000000000004EF0 20 20 20 20 20 20 20 23 20 47 72 6F 75 70 20 72        # Group r
0000000000004F00 65 6D 61 69 6E 69 6E 67 20 69 6E 74 73 0D 0A 20 emaining ints�� 
0000000000004F10 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69                i
0000000000004F20 6E 74 73 5F 73 74 72 20 3D 20 66 22 5B 7B 69 31 nts_str = f"[{i1
0000000000004F30 7D 2C 20 7B 69 34 7D 2C 20 7B 69 35 7D 2C 20 7B }, {i4}, {i5}, {
0000000000004F40 69 36 7D 2C 20 7B 69 37 7D 2C 20 7B 69 38 7D 5D i6}, {i7}, {i8}]
0000000000004F50 22 20 23 20 45 78 63 6C 75 64 65 20 63 68 69 6C " # Exclude chil
0000000000004F60 64 72 65 6E 20 69 32 2C 20 69 33 0D 0A 0D 0A 20 dren i2, i3���� 
0000000000004F70 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 70                p
0000000000004F80 72 69 6E 74 28 66 22 20 20 2D 20 4E 6F 64 65 20 rint(f"  - Node 
0000000000004F90 7B 69 3A 3C 33 7D 3A 20 50 6C 61 6E 65 3D 7B 70 {i:<3}: Plane={p
0000000000004FA0 6C 61 6E 65 5F 73 74 72 3A 3C 33 35 7D 20 42 42 lane_str:<35} BB
0000000000004FB0 6F 78 2F 54 65 78 3F 3D 7B 62 62 6F 78 5F 74 65 ox/Tex?={bbox_te
0000000000004FC0 78 5F 73 74 72 3A 3C 33 35 7D 20 43 68 69 6C 64 x_str:<35} Child
0000000000004FD0 72 65 6E 3D 5B 7B 63 68 69 6C 64 5F 66 5F 73 74 ren=[{child_f_st
0000000000004FE0 72 3A 3C 35 7D 2C 20 7B 63 68 69 6C 64 5F 62 5F r:<5}, {child_b_
0000000000004FF0 73 74 72 3A 3C 35 7D 5D 20 49 6E 74 73 3D 7B 69 str:<5}] Ints={i
0000000000005000 6E 74 73 5F 73 74 72 7D 22 29 0D 0A 0D 0A 20 20 nts_str}")����  
0000000000005010 20 20 23 20 52 65 70 6F 72 74 20 69 66 20 73 70   # Report if sp
0000000000005020 65 63 69 61 6C 20 66 69 6C 65 73 20 77 65 72 65 ecial files were
0000000000005030 20 6E 6F 74 20 66 6F 75 6E 64 20 6F 72 20 61 6E  not found or an
0000000000005040 61 6C 79 7A 65 64 0D 0A 20 20 20 20 66 6F 72 20 alyzed��    for 
0000000000005050 66 6E 61 6D 65 2C 20 72 65 70 6F 72 74 65 64 20 fname, reported 
0000000000005060 69 6E 20 73 70 65 63 69 61 6C 5F 66 69 6C 65 73 in special_files
0000000000005070 5F 72 65 70 6F 72 74 65 64 2E 69 74 65 6D 73 28 _reported.items(
0000000000005080 29 3A 0D 0A 20 20 20 20 20 20 20 20 69 66 20 6E ):��        if n
0000000000005090 6F 74 20 72 65 70 6F 72 74 65 64 3A 0D 0A 20 20 ot reported:��  
00000000000050A0 20 20 20 20 20 20 20 20 20 20 23 20 43 68 65 63           # Chec
00000000000050B0 6B 20 69 66 20 69 74 20 77 61 73 20 65 76 65 6E k if it was even
00000000000050C0 20 69 6E 20 74 68 65 20 69 6E 70 75 74 20 6C 69  in the input li
00000000000050D0 73 74 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 st��            
00000000000050E0 66 6F 75 6E 64 5F 69 6E 5F 69 6E 70 75 74 20 3D found_in_input =
00000000000050F0 20 61 6E 79 28 72 5B 27 66 69 6C 65 6E 61 6D 65  any(r['filename
0000000000005100 27 5D 20 3D 3D 20 66 6E 61 6D 65 20 66 6F 72 20 '] == fname for 
0000000000005110 72 20 69 6E 20 61 6E 61 6C 79 73 69 73 5F 72 65 r in analysis_re
0000000000005120 73 75 6C 74 73 29 0D 0A 20 20 20 20 20 20 20 20 sults)��        
0000000000005130 20 20 20 20 69 66 20 66 6F 75 6E 64 5F 69 6E 5F     if found_in_
0000000000005140 69 6E 70 75 74 3A 0D 0A 20 20 20 20 20 20 20 20 input:��        
0000000000005150 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
0000000000005160 22 5C 6E 5B 2A 5D 20 4E 6F 74 65 3A 20 7B 66 6E "\n[*] Note: {fn
0000000000005170 61 6D 65 7D 20 77 61 73 20 61 6E 61 6C 79 7A 65 ame} was analyze
0000000000005180 64 20 62 75 74 20 68 61 64 20 6E 6F 20 76 61 6C d but had no val
0000000000005190 69 64 20 4C 75 6D 70 20 33 20 64 61 74 61 20 6F id Lump 3 data o
00000000000051A0 72 20 65 6E 63 6F 75 6E 74 65 72 65 64 20 61 6E r encountered an
00000000000051B0 20 65 72 72 6F 72 2E 22 29 0D 0A 20 20 20 20 20  error.")��     
00000000000051C0 20 20 20 20 20 20 20 23 20 65 6C 73 65 3A 20 49        # else: I
00000000000051D0 74 20 77 61 73 6E 27 74 20 69 6E 20 74 68 65 20 t wasn't in the 
00000000000051E0 6C 69 73 74 20 6F 66 20 66 6F 75 6E 64 20 42 53 list of found BS
00000000000051F0 50 73 2C 20 73 6F 20 6E 6F 20 6E 65 65 64 20 74 Ps, so no need t
0000000000005200 6F 20 72 65 70 6F 72 74 20 61 62 73 65 6E 63 65 o report absence
0000000000005210 2E 0D 0A 0D 0A 20 20 20 20 69 66 20 72 65 70 6F .����    if repo
0000000000005220 72 74 65 64 5F 66 69 6C 65 73 20 3D 3D 20 30 3A rted_files == 0:
0000000000005230 0D 0A 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 ��        print(
0000000000005240 22 5B 2A 5D 20 4E 6F 20 66 69 6C 65 73 20 77 69 "[*] No files wi
0000000000005250 74 68 20 61 6E 61 6C 79 7A 61 62 6C 65 20 4C 75 th analyzable Lu
0000000000005260 6D 70 20 33 20 64 61 74 61 20 66 6F 75 6E 64 2E mp 3 data found.
0000000000005270 22 29 0D 0A 0D 0A 0D 0A 23 20 2D 2D 2D 20 4D 61 ")������# --- Ma
0000000000005280 69 6E 20 45 78 65 63 75 74 69 6F 6E 20 2D 2D 2D in Execution ---
0000000000005290 0D 0A 0D 0A 64 65 66 20 6D 61 69 6E 28 29 3A 0D ����def main():�
00000000000052A0 0A 20 20 20 20 70 61 72 73 65 72 20 3D 20 61 72 �    parser = ar
00000000000052B0 67 70 61 72 73 65 2E 41 72 67 75 6D 65 6E 74 50 gparse.ArgumentP
00000000000052C0 61 72 73 65 72 28 0D 0A 20 20 20 20 20 20 20 20 arser(��        
00000000000052D0 64 65 73 63 72 69 70 74 69 6F 6E 3D 22 41 6E 61 description="Ana
00000000000052E0 6C 79 7A 65 20 42 53 50 20 66 69 6C 65 73 20 66 lyze BSP files f
00000000000052F0 6F 72 20 73 69 6D 69 6C 61 72 69 74 69 65 73 20 or similarities 
0000000000005300 61 6E 64 20 70 61 74 74 65 72 6E 73 2E 20 52 65 and patterns. Re
0000000000005310 61 64 73 20 45 4E 54 49 52 45 20 66 69 6C 65 73 ads ENTIRE files
0000000000005320 20 2D 20 55 73 65 20 77 69 74 68 20 63 61 75 74  - Use with caut
0000000000005330 69 6F 6E 20 6F 6E 20 6C 61 72 67 65 20 66 69 6C ion on large fil
0000000000005340 65 73 20 2F 20 6C 6F 77 20 52 41 4D 20 73 79 73 es / low RAM sys
0000000000005350 74 65 6D 73 2E 22 2C 0D 0A 20 20 20 20 20 20 20 tems.",��       
0000000000005360 20 66 6F 72 6D 61 74 74 65 72 5F 63 6C 61 73 73  formatter_class
0000000000005370 3D 61 72 67 70 61 72 73 65 2E 52 61 77 54 65 78 =argparse.RawTex
0000000000005380 74 48 65 6C 70 46 6F 72 6D 61 74 74 65 72 0D 0A tHelpFormatter��
0000000000005390 20 20 20 20 29 0D 0A 20 20 20 20 70 61 72 73 65     )��    parse
00000000000053A0 72 2E 61 64 64 5F 61 72 67 75 6D 65 6E 74 28 22 r.add_argument("
00000000000053B0 2D 64 22 2C 20 22 2D 2D 64 69 72 65 63 74 6F 72 -d", "--director
00000000000053C0 79 22 2C 20 74 79 70 65 3D 73 74 72 2C 20 64 65 y", type=str, de
00000000000053D0 66 61 75 6C 74 3D 22 2E 22 2C 0D 0A 20 20 20 20 fault=".",��    
00000000000053E0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000053F0 20 20 20 20 68 65 6C 70 3D 22 44 69 72 65 63 74     help="Direct
0000000000005400 6F 72 79 20 74 6F 20 73 65 61 72 63 68 20 72 65 ory to search re
0000000000005410 63 75 72 73 69 76 65 6C 79 20 28 64 65 66 61 75 cursively (defau
0000000000005420 6C 74 3A 20 63 75 72 72 65 6E 74 20 64 69 72 65 lt: current dire
0000000000005430 63 74 6F 72 79 29 22 29 0D 0A 20 20 20 20 70 61 ctory)")��    pa
0000000000005440 72 73 65 72 2E 61 64 64 5F 61 72 67 75 6D 65 6E rser.add_argumen
0000000000005450 74 28 22 2D 2D 68 65 61 64 65 72 22 2C 20 74 79 t("--header", ty
0000000000005460 70 65 3D 69 6E 74 2C 20 64 65 66 61 75 6C 74 3D pe=int, default=
0000000000005470 44 45 46 41 55 4C 54 5F 48 45 41 44 45 52 5F 53 DEFAULT_HEADER_S
0000000000005480 49 5A 45 2C 0D 0A 20 20 20 20 20 20 20 20 20 20 IZE,��          
0000000000005490 20 20 20 20 20 20 20 20 20 20 20 20 20 20 68 65               he
00000000000054A0 6C 70 3D 66 22 53 69 7A 65 20 6F 66 20 74 68 65 lp=f"Size of the
00000000000054B0 20 68 65 61 64 65 72 20 69 6E 20 62 79 74 65 73  header in bytes
00000000000054C0 20 74 6F 20 63 6F 6D 70 61 72 65 20 66 6F 72 20  to compare for 
00000000000054D0 68 61 73 68 69 6E 67 20 28 64 65 66 61 75 6C 74 hashing (default
00000000000054E0 3A 20 7B 44 45 46 41 55 4C 54 5F 48 45 41 44 45 : {DEFAULT_HEADE
00000000000054F0 52 5F 53 49 5A 45 7D 29 22 29 0D 0A 20 20 20 20 R_SIZE})")��    
0000000000005500 70 61 72 73 65 72 2E 61 64 64 5F 61 72 67 75 6D parser.add_argum
0000000000005510 65 6E 74 28 22 2D 2D 70 61 74 74 65 72 6E 6C 65 ent("--patternle
0000000000005520 6E 22 2C 20 74 79 70 65 3D 69 6E 74 2C 20 64 65 n", type=int, de
0000000000005530 66 61 75 6C 74 3D 44 45 46 41 55 4C 54 5F 50 41 fault=DEFAULT_PA
0000000000005540 54 54 45 52 4E 5F 4C 45 4E 47 54 48 2C 0D 0A 20 TTERN_LENGTH,�� 
0000000000005550 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000005560 20 20 20 20 20 20 20 68 65 6C 70 3D 66 22 4C 65        help=f"Le
0000000000005570 6E 67 74 68 20 6F 66 20 62 79 74 65 20 70 61 74 ngth of byte pat
0000000000005580 74 65 72 6E 73 20 74 6F 20 73 65 61 72 63 68 20 terns to search 
0000000000005590 66 6F 72 20 28 64 65 66 61 75 6C 74 3A 20 7B 44 for (default: {D
00000000000055A0 45 46 41 55 4C 54 5F 50 41 54 54 45 52 4E 5F 4C EFAULT_PATTERN_L
00000000000055B0 45 4E 47 54 48 7D 29 22 29 0D 0A 20 20 20 20 70 ENGTH})")��    p
00000000000055C0 61 72 73 65 72 2E 61 64 64 5F 61 72 67 75 6D 65 arser.add_argume
00000000000055D0 6E 74 28 22 2D 2D 6D 69 6E 63 6F 75 6E 74 22 2C nt("--mincount",
00000000000055E0 20 74 79 70 65 3D 69 6E 74 2C 20 64 65 66 61 75  type=int, defau
00000000000055F0 6C 74 3D 44 45 46 41 55 4C 54 5F 4D 49 4E 5F 50 lt=DEFAULT_MIN_P
0000000000005600 41 54 54 45 52 4E 5F 43 4F 55 4E 54 2C 0D 0A 20 ATTERN_COUNT,�� 
0000000000005610 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000005620 20 20 20 20 20 20 20 68 65 6C 70 3D 66 22 4D 69        help=f"Mi
0000000000005630 6E 69 6D 75 6D 20 6F 63 63 75 72 72 65 6E 63 65 nimum occurrence
0000000000005640 20 63 6F 75 6E 74 20 66 6F 72 20 72 65 70 6F 72  count for repor
0000000000005650 74 69 6E 67 20 61 20 70 61 74 74 65 72 6E 20 28 ting a pattern (
0000000000005660 64 65 66 61 75 6C 74 3A 20 7B 44 45 46 41 55 4C default: {DEFAUL
0000000000005670 54 5F 4D 49 4E 5F 50 41 54 54 45 52 4E 5F 43 4F T_MIN_PATTERN_CO
0000000000005680 55 4E 54 7D 29 22 29 0D 0A 0D 0A 20 20 20 20 61 UNT})")����    a
0000000000005690 72 67 73 20 3D 20 70 61 72 73 65 72 2E 70 61 72 rgs = parser.par
00000000000056A0 73 65 5F 61 72 67 73 28 29 0D 0A 0D 0A 20 20 20 se_args()����   
00000000000056B0 20 73 63 72 69 70 74 5F 64 69 72 20 3D 20 50 61  script_dir = Pa
00000000000056C0 74 68 28 61 72 67 73 2E 64 69 72 65 63 74 6F 72 th(args.director
00000000000056D0 79 29 2E 72 65 73 6F 6C 76 65 28 29 0D 0A 0D 0A y).resolve()����
00000000000056E0 20 20 20 20 69 66 20 6E 6F 74 20 73 63 72 69 70     if not scrip
00000000000056F0 74 5F 64 69 72 2E 69 73 5F 64 69 72 28 29 3A 0D t_dir.is_dir():�
0000000000005700 0A 20 20 20 20 20 20 20 20 73 74 61 74 75 73 5F �        status_
0000000000005710 75 70 64 61 74 65 28 66 22 5B 21 5D 20 45 72 72 update(f"[!] Err
0000000000005720 6F 72 3A 20 44 69 72 65 63 74 6F 72 79 20 6E 6F or: Directory no
0000000000005730 74 20 66 6F 75 6E 64 3A 20 7B 73 63 72 69 70 74 t found: {script
0000000000005740 5F 64 69 72 7D 22 2C 20 6E 65 77 6C 69 6E 65 3D _dir}", newline=
0000000000005750 54 72 75 65 29 0D 0A 20 20 20 20 20 20 20 20 72 True)��        r
0000000000005760 65 74 75 72 6E 0D 0A 0D 0A 20 20 20 20 69 66 20 eturn����    if 
0000000000005770 61 72 67 73 2E 70 61 74 74 65 72 6E 6C 65 6E 20 args.patternlen 
0000000000005780 3C 3D 20 30 3A 0D 0A 20 20 20 20 20 20 20 20 73 <= 0:��        s
0000000000005790 74 61 74 75 73 5F 75 70 64 61 74 65 28 22 5B 21 tatus_update("[!
00000000000057A0 5D 20 45 72 72 6F 72 3A 20 50 61 74 74 65 72 6E ] Error: Pattern
00000000000057B0 20 6C 65 6E 67 74 68 20 6D 75 73 74 20 62 65 20  length must be 
00000000000057C0 67 72 65 61 74 65 72 20 74 68 61 6E 20 30 2E 22 greater than 0."
00000000000057D0 2C 20 6E 65 77 6C 69 6E 65 3D 54 72 75 65 29 0D , newline=True)�
00000000000057E0 0A 20 20 20 20 20 20 20 20 72 65 74 75 72 6E 0D �        return�
00000000000057F0 0A 0D 0A 20 20 20 20 69 66 20 61 72 67 73 2E 68 ���    if args.h
0000000000005800 65 61 64 65 72 20 3C 3D 20 30 3A 20 23 20 48 65 eader <= 0: # He
0000000000005810 61 64 65 72 20 66 6F 72 20 68 61 73 68 69 6E 67 ader for hashing
0000000000005820 2C 20 64 69 73 74 69 6E 63 74 20 66 72 6F 6D 20 , distinct from 
0000000000005830 66 69 65 6C 64 20 65 78 74 72 61 63 74 69 6F 6E field extraction
0000000000005840 0D 0A 20 20 20 20 20 20 20 20 73 74 61 74 75 73 ��        status
0000000000005850 5F 75 70 64 61 74 65 28 22 5B 21 5D 20 45 72 72 _update("[!] Err
0000000000005860 6F 72 3A 20 48 65 61 64 65 72 20 68 61 73 68 20 or: Header hash 
0000000000005870 73 69 7A 65 20 6D 75 73 74 20 62 65 20 67 72 65 size must be gre
0000000000005880 61 74 65 72 20 74 68 61 6E 20 30 2E 22 2C 20 6E ater than 0.", n
0000000000005890 65 77 6C 69 6E 65 3D 54 72 75 65 29 0D 0A 20 20 ewline=True)��  
00000000000058A0 20 20 20 20 20 20 72 65 74 75 72 6E 0D 0A 0D 0A       return����
00000000000058B0 20 20 20 20 62 73 70 5F 66 69 6C 65 73 20 3D 20     bsp_files = 
00000000000058C0 66 69 6E 64 5F 62 73 70 5F 66 69 6C 65 73 28 73 find_bsp_files(s
00000000000058D0 63 72 69 70 74 5F 64 69 72 29 0D 0A 0D 0A 20 20 cript_dir)����  
00000000000058E0 20 20 69 66 20 6E 6F 74 20 62 73 70 5F 66 69 6C   if not bsp_fil
00000000000058F0 65 73 3A 0D 0A 20 20 20 20 20 20 20 20 73 74 61 es:��        sta
0000000000005900 74 75 73 5F 75 70 64 61 74 65 28 22 5B 2A 5D 20 tus_update("[*] 
0000000000005910 4E 6F 20 2E 62 73 70 20 66 69 6C 65 73 20 66 6F No .bsp files fo
0000000000005920 75 6E 64 20 69 6E 20 74 68 65 20 73 70 65 63 69 und in the speci
0000000000005930 66 69 65 64 20 64 69 72 65 63 74 6F 72 79 20 6F fied directory o
0000000000005940 72 20 73 75 62 64 69 72 65 63 74 6F 72 69 65 73 r subdirectories
0000000000005950 2E 22 2C 20 6E 65 77 6C 69 6E 65 3D 54 72 75 65 .", newline=True
0000000000005960 29 0D 0A 20 20 20 20 20 20 20 20 72 65 74 75 72 )��        retur
0000000000005970 6E 0D 0A 0D 0A 20 20 20 20 61 6E 61 6C 79 73 69 n����    analysi
0000000000005980 73 5F 72 65 73 75 6C 74 73 20 3D 20 5B 5D 0D 0A s_results = []��
0000000000005990 20 20 20 20 73 74 61 74 75 73 5F 75 70 64 61 74     status_updat
00000000000059A0 65 28 66 22 5B 2A 5D 20 41 6E 61 6C 79 7A 69 6E e(f"[*] Analyzin
00000000000059B0 67 20 7B 6C 65 6E 28 62 73 70 5F 66 69 6C 65 73 g {len(bsp_files
00000000000059C0 29 7D 20 66 69 6C 65 73 20 28 72 65 61 64 69 6E )} files (readin
00000000000059D0 67 20 65 6E 74 69 72 65 20 63 6F 6E 74 65 6E 74 g entire content
00000000000059E0 29 2E 2E 2E 22 2C 20 6E 65 77 6C 69 6E 65 3D 54 )...", newline=T
00000000000059F0 72 75 65 29 0D 0A 20 20 20 20 73 74 61 74 75 73 rue)��    status
0000000000005A00 5F 75 70 64 61 74 65 28 22 5B 21 5D 20 57 41 52 _update("[!] WAR
0000000000005A10 4E 49 4E 47 3A 20 54 68 69 73 20 6D 61 79 20 63 NING: This may c
0000000000005A20 6F 6E 73 75 6D 65 20 73 69 67 6E 69 66 69 63 61 onsume significa
0000000000005A30 6E 74 20 52 41 4D 20 61 6E 64 20 74 61 6B 65 20 nt RAM and take 
0000000000005A40 74 69 6D 65 20 66 6F 72 20 6C 61 72 67 65 20 66 time for large f
0000000000005A50 69 6C 65 73 2E 22 2C 20 6E 65 77 6C 69 6E 65 3D iles.", newline=
0000000000005A60 54 72 75 65 29 0D 0A 0D 0A 20 20 20 20 74 6F 74 True)����    tot
0000000000005A70 61 6C 5F 73 69 7A 65 5F 6D 62 20 3D 20 30 0D 0A al_size_mb = 0��
0000000000005A80 20 20 20 20 66 6F 72 20 66 69 6C 65 70 61 74 68     for filepath
0000000000005A90 20 69 6E 20 62 73 70 5F 66 69 6C 65 73 3A 0D 0A  in bsp_files:��
0000000000005AA0 20 20 20 20 20 20 20 20 20 74 72 79 3A 0D 0A 20          try:�� 
0000000000005AB0 20 20 20 20 20 20 20 20 20 20 20 20 74 6F 74 61             tota
0000000000005AC0 6C 5F 73 69 7A 65 5F 6D 62 20 2B 3D 20 6F 73 2E l_size_mb += os.
0000000000005AD0 70 61 74 68 2E 67 65 74 73 69 7A 65 28 66 69 6C path.getsize(fil
0000000000005AE0 65 70 61 74 68 29 20 2F 20 28 31 30 32 34 2A 31 epath) / (1024*1
0000000000005AF0 30 32 34 29 0D 0A 20 20 20 20 20 20 20 20 20 65 024)��         e
0000000000005B00 78 63 65 70 74 20 45 78 63 65 70 74 69 6F 6E 3A xcept Exception:
0000000000005B10 20 70 61 73 73 0D 0A 20 20 20 20 73 74 61 74 75  pass��    statu
0000000000005B20 73 5F 75 70 64 61 74 65 28 66 22 5B 2A 5D 20 54 s_update(f"[*] T
0000000000005B30 6F 74 61 6C 20 65 73 74 69 6D 61 74 65 64 20 73 otal estimated s
0000000000005B40 69 7A 65 20 6F 66 20 66 69 6C 65 73 20 74 6F 20 ize of files to 
0000000000005B50 61 6E 61 6C 79 7A 65 3A 20 7B 74 6F 74 61 6C 5F analyze: {total_
0000000000005B60 73 69 7A 65 5F 6D 62 3A 2E 32 66 7D 20 4D 42 22 size_mb:.2f} MB"
0000000000005B70 2C 20 6E 65 77 6C 69 6E 65 3D 54 72 75 65 29 0D , newline=True)�
0000000000005B80 0A 0D 0A 0D 0A 20 20 20 20 63 6F 75 6E 74 20 3D �����    count =
0000000000005B90 20 30 0D 0A 20 20 20 20 66 6F 72 20 66 69 6C 65  0��    for file
0000000000005BA0 70 61 74 68 20 69 6E 20 62 73 70 5F 66 69 6C 65 path in bsp_file
0000000000005BB0 73 3A 0D 0A 20 20 20 20 20 20 20 20 63 6F 75 6E s:��        coun
0000000000005BC0 74 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 20 t += 1��        
0000000000005BD0 66 69 6C 65 6E 61 6D 65 20 3D 20 50 61 74 68 28 filename = Path(
0000000000005BE0 66 69 6C 65 70 61 74 68 29 2E 6E 61 6D 65 0D 0A filepath).name��
0000000000005BF0 20 20 20 20 20 20 20 20 23 20 50 72 69 6E 74 20         # Print 
0000000000005C00 66 69 6C 65 6E 61 6D 65 20 62 65 66 6F 72 65 20 filename before 
0000000000005C10 73 74 61 72 74 69 6E 67 20 69 74 73 20 61 6E 61 starting its ana
0000000000005C20 6C 79 73 69 73 20 73 74 61 67 65 73 0D 0A 20 20 lysis stages��  
0000000000005C30 20 20 20 20 20 20 73 74 61 74 75 73 5F 75 70 64       status_upd
0000000000005C40 61 74 65 28 66 22 5C 6E 28 7B 63 6F 75 6E 74 7D ate(f"\n({count}
0000000000005C50 2F 7B 6C 65 6E 28 62 73 70 5F 66 69 6C 65 73 29 /{len(bsp_files)
0000000000005C60 7D 29 20 41 6E 61 6C 79 7A 69 6E 67 3A 20 7B 66 }) Analyzing: {f
0000000000005C70 69 6C 65 6E 61 6D 65 7D 2E 2E 2E 22 2C 20 6E 65 ilename}...", ne
0000000000005C80 77 6C 69 6E 65 3D 54 72 75 65 29 0D 0A 20 20 20 wline=True)��   
0000000000005C90 20 20 20 20 20 72 65 73 75 6C 74 20 3D 20 61 6E      result = an
0000000000005CA0 61 6C 79 7A 65 5F 66 69 6C 65 28 66 69 6C 65 70 alyze_file(filep
0000000000005CB0 61 74 68 2C 20 61 72 67 73 2E 68 65 61 64 65 72 ath, args.header
0000000000005CC0 2C 20 61 72 67 73 2E 70 61 74 74 65 72 6E 6C 65 , args.patternle
0000000000005CD0 6E 29 0D 0A 20 20 20 20 20 20 20 20 61 6E 61 6C n)��        anal
0000000000005CE0 79 73 69 73 5F 72 65 73 75 6C 74 73 2E 61 70 70 ysis_results.app
0000000000005CF0 65 6E 64 28 72 65 73 75 6C 74 29 0D 0A 20 20 20 end(result)��   
0000000000005D00 20 20 20 20 20 69 66 20 72 65 73 75 6C 74 5B 27      if result['
0000000000005D10 65 72 72 6F 72 27 5D 3A 0D 0A 20 20 20 20 20 20 error']:��      
0000000000005D20 20 20 20 20 20 20 20 73 74 61 74 75 73 5F 75 70        status_up
0000000000005D30 64 61 74 65 28 66 22 20 20 20 20 5B 21 5D 20 45 date(f"    [!] E
0000000000005D40 72 72 6F 72 20 66 6F 72 20 7B 66 69 6C 65 6E 61 rror for {filena
0000000000005D50 6D 65 7D 3A 20 7B 72 65 73 75 6C 74 5B 27 65 72 me}: {result['er
0000000000005D60 72 6F 72 27 5D 7D 22 2C 20 6E 65 77 6C 69 6E 65 ror']}", newline
0000000000005D70 3D 54 72 75 65 29 0D 0A 0D 0A 0D 0A 20 20 20 20 =True)������    
0000000000005D80 73 74 61 74 75 73 5F 75 70 64 61 74 65 28 22 5C status_update("\
0000000000005D90 6E 5B 2A 5D 20 41 6E 61 6C 79 73 69 73 20 70 68 n[*] Analysis ph
0000000000005DA0 61 73 65 20 63 6F 6D 70 6C 65 74 65 2E 22 2C 20 ase complete.", 
0000000000005DB0 6E 65 77 6C 69 6E 65 3D 54 72 75 65 29 0D 0A 0D newline=True)���
0000000000005DC0 0A 20 20 20 20 23 20 2D 2D 2D 20 52 65 70 6F 72 �    # --- Repor
0000000000005DD0 74 69 6E 67 20 2D 2D 2D 0D 0A 20 20 20 20 72 65 ting ---��    re
0000000000005DE0 70 6F 72 74 5F 66 69 6C 65 5F 73 74 61 74 73 28 port_file_stats(
0000000000005DF0 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 analysis_results
0000000000005E00 29 0D 0A 20 20 20 20 72 65 70 6F 72 74 5F 68 65 )��    report_he
0000000000005E10 61 64 65 72 5F 66 69 65 6C 64 73 28 61 6E 61 6C ader_fields(anal
0000000000005E20 79 73 69 73 5F 72 65 73 75 6C 74 73 29 0D 0A 20 ysis_results)�� 
0000000000005E30 20 20 20 72 65 70 6F 72 74 5F 73 70 65 63 69 66    report_specif
0000000000005E40 69 63 5F 63 6F 75 6E 74 73 28 61 6E 61 6C 79 73 ic_counts(analys
0000000000005E50 69 73 5F 72 65 73 75 6C 74 73 29 0D 0A 20 20 20 is_results)��   
0000000000005E60 20 72 65 70 6F 72 74 5F 65 6E 74 72 6F 70 79 28  report_entropy(
0000000000005E70 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C 74 73 analysis_results
0000000000005E80 29 0D 0A 20 20 20 20 72 65 70 6F 72 74 5F 73 74 )��    report_st
0000000000005E90 72 69 6E 67 73 28 61 6E 61 6C 79 73 69 73 5F 72 rings(analysis_r
0000000000005EA0 65 73 75 6C 74 73 29 0D 0A 20 20 20 20 72 65 70 esults)��    rep
0000000000005EB0 6F 72 74 5F 70 6F 74 65 6E 74 69 61 6C 5F 6C 75 ort_potential_lu
0000000000005EC0 6D 70 73 28 61 6E 61 6C 79 73 69 73 5F 72 65 73 mps(analysis_res
0000000000005ED0 75 6C 74 73 29 0D 0A 20 20 20 20 72 65 70 6F 72 ults)��    repor
0000000000005EE0 74 5F 6C 75 6D 70 5F 33 5F 61 6E 61 6C 79 73 69 t_lump_3_analysi
0000000000005EF0 73 28 61 6E 61 6C 79 73 69 73 5F 72 65 73 75 6C s(analysis_resul
0000000000005F00 74 73 29 20 23 20 41 64 64 65 64 20 6C 75 6D 70 ts) # Added lump
0000000000005F10 20 33 20 72 65 70 6F 72 74 0D 0A 0D 0A 0D 0A 20  3 report������ 
0000000000005F20 20 20 20 73 74 61 74 75 73 5F 75 70 64 61 74 65    status_update
0000000000005F30 28 22 5C 6E 2D 2D 2D 20 45 6E 64 20 6F 66 20 52 ("\n--- End of R
0000000000005F40 65 70 6F 72 74 20 2D 2D 2D 22 2C 20 6E 65 77 6C eport ---", newl
0000000000005F50 69 6E 65 3D 54 72 75 65 29 0D 0A 0D 0A 69 66 20 ine=True)����if 
0000000000005F60 5F 5F 6E 61 6D 65 5F 5F 20 3D 3D 20 22 5F 5F 6D __name__ == "__m
0000000000005F70 61 69 6E 5F 5F 22 3A 0D 0A 20 20 20 20 6D 61 69 ain__":��    mai
0000000000005F80 6E 28 29                                        n()


