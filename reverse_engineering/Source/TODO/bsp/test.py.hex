
   Label: A:\Dev\Games\TheSimpsonsGame\PAL\reverse_engineering\Source\TODO\bsp\test.py

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 69 6D 70 6F 72 74 20 6F 73 0D 0A 69 6D 70 6F 72 import os��impor
0000000000000010 74 20 73 74 72 75 63 74 0D 0A 69 6D 70 6F 72 74 t struct��import
0000000000000020 20 6D 61 74 68 0D 0A 66 72 6F 6D 20 70 61 74 68  math��from path
0000000000000030 6C 69 62 20 69 6D 70 6F 72 74 20 50 61 74 68 0D lib import Path�
0000000000000040 0A 69 6D 70 6F 72 74 20 63 6F 6C 6C 65 63 74 69 �import collecti
0000000000000050 6F 6E 73 0D 0A 0D 0A 23 20 2D 2D 2D 20 43 6F 6E ons����# --- Con
0000000000000060 66 69 67 75 72 61 74 69 6F 6E 20 2D 2D 2D 0D 0A figuration ---��
0000000000000070 4E 4F 44 45 5F 46 4F 52 4D 41 54 20 3D 20 27 3E NODE_FORMAT = '>
0000000000000080 66 66 66 66 66 66 66 66 69 69 69 69 69 69 69 69 ffffffffiiiiiiii
0000000000000090 27 20 23 20 42 45 3A 20 38 20 66 6C 6F 61 74 73 ' # BE: 8 floats
00000000000000A0 2C 20 38 20 69 6E 74 73 0D 0A 4E 4F 44 45 5F 53 , 8 ints��NODE_S
00000000000000B0 49 5A 45 20 3D 20 36 34 0D 0A 4C 55 4D 50 5F 44 IZE = 64��LUMP_D
00000000000000C0 49 52 5F 4F 46 46 53 45 54 20 3D 20 30 78 31 30 IR_OFFSET = 0x10
00000000000000D0 20 23 20 53 74 61 72 74 20 6F 66 20 74 68 65 20  # Start of the 
00000000000000E0 6C 75 6D 70 20 64 69 72 65 63 74 6F 72 79 20 65 lump directory e
00000000000000F0 6E 74 72 69 65 73 0D 0A 4C 55 4D 50 5F 45 4E 54 ntries��LUMP_ENT
0000000000000100 52 59 5F 53 49 5A 45 20 3D 20 38 20 20 20 20 23 RY_SIZE = 8    #
0000000000000110 20 53 69 7A 65 20 6F 66 20 6F 6E 65 20 6C 75 6D  Size of one lum
0000000000000120 70 20 64 69 72 65 63 74 6F 72 79 20 65 6E 74 72 p directory entr
0000000000000130 79 20 28 6F 66 66 73 65 74 2C 20 6C 65 6E 67 74 y (offset, lengt
0000000000000140 68 29 0D 0A 54 41 52 47 45 54 5F 4C 55 4D 50 5F h)��TARGET_LUMP_
0000000000000150 49 44 20 3D 20 33 20 20 20 20 20 23 20 54 68 65 ID = 3     # The
0000000000000160 20 6C 75 6D 70 20 63 6F 6E 74 61 69 6E 69 6E 67  lump containing
0000000000000170 20 74 68 65 20 6E 6F 64 65 73 20 28 30 2D 62 61  the nodes (0-ba
0000000000000180 73 65 64 20 69 6E 64 65 78 29 0D 0A 0D 0A 23 20 sed index)����# 
0000000000000190 4F 75 74 70 75 74 20 4C 69 6D 69 74 69 6E 67 0D Output Limiting�
00000000000001A0 0A 4D 41 58 5F 4E 4F 44 45 53 5F 54 4F 5F 44 45 �MAX_NODES_TO_DE
00000000000001B0 54 41 49 4C 20 3D 20 31 35 20 23 20 4D 61 78 20 TAIL = 15 # Max 
00000000000001C0 6E 6F 64 65 73 20 74 6F 20 73 68 6F 77 20 66 75 nodes to show fu
00000000000001D0 6C 6C 20 64 65 74 61 69 6C 73 20 66 6F 72 20 28 ll details for (
00000000000001E0 73 74 61 72 74 20 61 6E 64 20 65 6E 64 29 0D 0A start and end)��
00000000000001F0 4D 41 58 5F 4C 45 41 56 45 53 5F 54 4F 5F 44 45 MAX_LEAVES_TO_DE
0000000000000200 54 41 49 4C 20 3D 20 32 30 20 23 20 4D 61 78 20 TAIL = 20 # Max 
0000000000000210 6C 65 61 76 65 73 20 74 6F 20 73 68 6F 77 20 69 leaves to show i
0000000000000220 6E 74 20 66 69 65 6C 64 73 20 66 6F 72 0D 0A 0D nt fields for���
0000000000000230 0A 23 20 2D 2D 2D 20 45 6E 64 20 43 6F 6E 66 69 �# --- End Confi
0000000000000240 67 75 72 61 74 69 6F 6E 20 2D 2D 2D 0D 0A 0D 0A guration ---����
0000000000000250 23 20 44 65 66 69 6E 65 20 66 69 65 6C 64 20 6E # Define field n
0000000000000260 61 6D 65 73 20 62 61 73 65 64 20 6F 6E 20 74 68 ames based on th
0000000000000270 65 20 63 6F 72 72 65 63 74 65 64 20 73 74 72 75 e corrected stru
0000000000000280 63 74 75 72 65 0D 0A 4E 4F 44 45 5F 46 49 45 4C cture��NODE_FIEL
0000000000000290 44 5F 4E 41 4D 45 53 20 3D 20 5B 0D 0A 20 20 20 D_NAMES = [��   
00000000000002A0 20 27 70 6C 61 6E 65 5F 6E 78 27 2C 20 27 70 6C  'plane_nx', 'pl
00000000000002B0 61 6E 65 5F 6E 79 27 2C 20 27 70 6C 61 6E 65 5F ane_ny', 'plane_
00000000000002C0 6E 7A 27 2C 20 27 70 6C 61 6E 65 5F 64 27 2C 0D nz', 'plane_d',�
00000000000002D0 0A 20 20 20 20 27 62 62 6F 78 5F 74 78 30 27 2C �    'bbox_tx0',
00000000000002E0 20 27 62 62 6F 78 5F 74 78 31 27 2C 20 27 62 62  'bbox_tx1', 'bb
00000000000002F0 6F 78 5F 74 78 32 27 2C 20 27 62 62 6F 78 5F 74 ox_tx2', 'bbox_t
0000000000000300 78 33 27 2C 20 23 20 42 42 6F 78 20 2F 20 54 65 x3', # BBox / Te
0000000000000310 78 3F 0D 0A 20 20 20 20 27 66 6C 61 67 73 27 2C x?��    'flags',
0000000000000320 20 20 20 20 23 20 49 6E 74 20 31 0D 0A 20 20 20     # Int 1��   
0000000000000330 20 27 63 68 69 6C 64 5F 66 27 2C 20 20 23 20 49  'child_f',  # I
0000000000000340 6E 74 20 32 0D 0A 20 20 20 20 27 63 68 69 6C 64 nt 2��    'child
0000000000000350 5F 62 27 2C 20 20 23 20 49 6E 74 20 33 0D 0A 20 _b',  # Int 3�� 
0000000000000360 20 20 20 27 75 6E 6B 31 27 2C 20 20 20 20 20 23    'unk1',     #
0000000000000370 20 49 6E 74 20 34 0D 0A 20 20 20 20 27 75 6E 6B  Int 4��    'unk
0000000000000380 32 27 2C 20 20 20 20 20 23 20 49 6E 74 20 35 0D 2',     # Int 5�
0000000000000390 0A 20 20 20 20 27 75 6E 6B 33 27 2C 20 20 20 20 �    'unk3',    
00000000000003A0 20 23 20 49 6E 74 20 36 0D 0A 20 20 20 20 27 75  # Int 6��    'u
00000000000003B0 6E 6B 34 27 2C 20 20 20 20 20 23 20 49 6E 74 20 nk4',     # Int 
00000000000003C0 37 0D 0A 20 20 20 20 27 75 6E 6B 35 27 20 20 20 7��    'unk5'   
00000000000003D0 20 20 20 23 20 49 6E 74 20 38 0D 0A 5D 0D 0A 0D    # Int 8��]���
00000000000003E0 0A 64 65 66 20 70 61 72 73 65 5F 6E 6F 64 65 28 �def parse_node(
00000000000003F0 64 61 74 61 5F 63 68 75 6E 6B 29 3A 0D 0A 20 20 data_chunk):��  
0000000000000400 20 20 22 22 22 55 6E 70 61 63 6B 73 20 61 20 36   """Unpacks a 6
0000000000000410 34 2D 62 79 74 65 20 63 68 75 6E 6B 20 69 6E 74 4-byte chunk int
0000000000000420 6F 20 61 20 6E 6F 64 65 20 64 69 63 74 69 6F 6E o a node diction
0000000000000430 61 72 79 2E 22 22 22 0D 0A 20 20 20 20 69 66 20 ary."""��    if 
0000000000000440 6C 65 6E 28 64 61 74 61 5F 63 68 75 6E 6B 29 20 len(data_chunk) 
0000000000000450 21 3D 20 4E 4F 44 45 5F 53 49 5A 45 3A 0D 0A 20 != NODE_SIZE:�� 
0000000000000460 20 20 20 20 20 20 20 72 65 74 75 72 6E 20 4E 6F        return No
0000000000000470 6E 65 0D 0A 20 20 20 20 74 72 79 3A 0D 0A 20 20 ne��    try:��  
0000000000000480 20 20 20 20 20 20 75 6E 70 61 63 6B 65 64 5F 64       unpacked_d
0000000000000490 61 74 61 20 3D 20 73 74 72 75 63 74 2E 75 6E 70 ata = struct.unp
00000000000004A0 61 63 6B 28 4E 4F 44 45 5F 46 4F 52 4D 41 54 2C ack(NODE_FORMAT,
00000000000004B0 20 64 61 74 61 5F 63 68 75 6E 6B 29 0D 0A 20 20  data_chunk)��  
00000000000004C0 20 20 20 20 20 20 72 65 74 75 72 6E 20 64 69 63       return dic
00000000000004D0 74 28 7A 69 70 28 4E 4F 44 45 5F 46 49 45 4C 44 t(zip(NODE_FIELD
00000000000004E0 5F 4E 41 4D 45 53 2C 20 75 6E 70 61 63 6B 65 64 _NAMES, unpacked
00000000000004F0 5F 64 61 74 61 29 29 0D 0A 20 20 20 20 65 78 63 _data))��    exc
0000000000000500 65 70 74 20 73 74 72 75 63 74 2E 65 72 72 6F 72 ept struct.error
0000000000000510 3A 0D 0A 20 20 20 20 20 20 20 20 72 65 74 75 72 :��        retur
0000000000000520 6E 20 4E 6F 6E 65 0D 0A 0D 0A 64 65 66 20 61 6E n None����def an
0000000000000530 61 6C 79 7A 65 5F 62 73 70 5F 6E 6F 64 65 73 28 alyze_bsp_nodes(
0000000000000540 66 69 6C 65 70 61 74 68 29 3A 0D 0A 20 20 20 20 filepath):��    
0000000000000550 22 22 22 41 6E 61 6C 79 7A 65 73 20 4C 75 6D 70 """Analyzes Lump
0000000000000560 20 33 20 6E 6F 64 65 20 73 74 72 75 63 74 75 72  3 node structur
0000000000000570 65 73 20 69 6E 20 61 20 42 53 50 20 66 69 6C 65 es in a BSP file
0000000000000580 2E 22 22 22 0D 0A 20 20 20 20 70 72 69 6E 74 28 ."""��    print(
0000000000000590 66 22 5C 6E 2D 2D 2D 20 41 6E 61 6C 79 7A 69 6E f"\n--- Analyzin
00000000000005A0 67 20 4E 6F 64 65 20 53 74 72 75 63 74 75 72 65 g Node Structure
00000000000005B0 3A 20 7B 66 69 6C 65 70 61 74 68 2E 6E 61 6D 65 : {filepath.name
00000000000005C0 7D 20 2D 2D 2D 22 29 0D 0A 20 20 20 20 6E 6F 64 } ---")��    nod
00000000000005D0 65 73 20 3D 20 5B 5D 0D 0A 20 20 20 20 6C 75 6D es = []��    lum
00000000000005E0 70 5F 6F 66 66 73 65 74 20 3D 20 2D 31 0D 0A 20 p_offset = -1�� 
00000000000005F0 20 20 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 20 3D    lump_length =
0000000000000600 20 2D 31 0D 0A 20 20 20 20 74 72 61 69 6C 69 6E  -1��    trailin
0000000000000610 67 5F 64 61 74 61 20 3D 20 4E 6F 6E 65 0D 0A 20 g_data = None�� 
0000000000000620 20 20 20 6E 75 6D 5F 6E 6F 64 65 73 20 3D 20 30    num_nodes = 0
0000000000000630 0D 0A 0D 0A 20 20 20 20 74 72 79 3A 0D 0A 20 20 ����    try:��  
0000000000000640 20 20 20 20 20 20 77 69 74 68 20 6F 70 65 6E 28       with open(
0000000000000650 66 69 6C 65 70 61 74 68 2C 20 27 72 62 27 29 20 filepath, 'rb') 
0000000000000660 61 73 20 66 3A 0D 0A 20 20 20 20 20 20 20 20 20 as f:��         
0000000000000670 20 20 20 66 69 6C 65 5F 73 69 7A 65 20 3D 20 66    file_size = f
0000000000000680 2E 73 65 65 6B 28 30 2C 20 6F 73 2E 53 45 45 4B .seek(0, os.SEEK
0000000000000690 5F 45 4E 44 29 0D 0A 0D 0A 20 20 20 20 20 20 20 _END)����       
00000000000006A0 20 20 20 20 20 23 20 31 2E 20 46 69 6E 64 20 4C      # 1. Find L
00000000000006B0 75 6D 70 20 33 20 4F 66 66 73 65 74 2F 4C 65 6E ump 3 Offset/Len
00000000000006C0 67 74 68 0D 0A 20 20 20 20 20 20 20 20 20 20 20 gth��           
00000000000006D0 20 6C 75 6D 70 5F 65 6E 74 72 79 5F 6F 66 66 73  lump_entry_offs
00000000000006E0 65 74 20 3D 20 4C 55 4D 50 5F 44 49 52 5F 4F 46 et = LUMP_DIR_OF
00000000000006F0 46 53 45 54 20 2B 20 54 41 52 47 45 54 5F 4C 55 FSET + TARGET_LU
0000000000000700 4D 50 5F 49 44 20 2A 20 4C 55 4D 50 5F 45 4E 54 MP_ID * LUMP_ENT
0000000000000710 52 59 5F 53 49 5A 45 0D 0A 20 20 20 20 20 20 20 RY_SIZE��       
0000000000000720 20 20 20 20 20 69 66 20 6C 75 6D 70 5F 65 6E 74      if lump_ent
0000000000000730 72 79 5F 6F 66 66 73 65 74 20 2B 20 4C 55 4D 50 ry_offset + LUMP
0000000000000740 5F 45 4E 54 52 59 5F 53 49 5A 45 20 3E 20 66 69 _ENTRY_SIZE > fi
0000000000000750 6C 65 5F 73 69 7A 65 3A 0D 0A 20 20 20 20 20 20 le_size:��      
0000000000000760 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28           print(
0000000000000770 22 5B 21 5D 20 45 72 72 6F 72 3A 20 46 69 6C 65 "[!] Error: File
0000000000000780 20 74 6F 6F 20 73 6D 61 6C 6C 20 66 6F 72 20 4C  too small for L
0000000000000790 75 6D 70 20 33 20 64 69 72 65 63 74 6F 72 79 20 ump 3 directory 
00000000000007A0 65 6E 74 72 79 2E 22 29 0D 0A 20 20 20 20 20 20 entry.")��      
00000000000007B0 20 20 20 20 20 20 20 20 20 20 72 65 74 75 72 6E           return
00000000000007C0 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ����            
00000000000007D0 66 2E 73 65 65 6B 28 6C 75 6D 70 5F 65 6E 74 72 f.seek(lump_entr
00000000000007E0 79 5F 6F 66 66 73 65 74 29 0D 0A 20 20 20 20 20 y_offset)��     
00000000000007F0 20 20 20 20 20 20 20 6C 75 6D 70 5F 69 6E 66 6F        lump_info
0000000000000800 20 3D 20 66 2E 72 65 61 64 28 4C 55 4D 50 5F 45  = f.read(LUMP_E
0000000000000810 4E 54 52 59 5F 53 49 5A 45 29 0D 0A 20 20 20 20 NTRY_SIZE)��    
0000000000000820 20 20 20 20 20 20 20 20 6C 75 6D 70 5F 6F 66 66         lump_off
0000000000000830 73 65 74 2C 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 set, lump_length
0000000000000840 20 3D 20 73 74 72 75 63 74 2E 75 6E 70 61 63 6B  = struct.unpack
0000000000000850 28 27 3E 49 49 27 2C 20 6C 75 6D 70 5F 69 6E 66 ('>II', lump_inf
0000000000000860 6F 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20 20 o)����          
0000000000000870 20 20 70 72 69 6E 74 28 66 22 5B 2A 5D 20 46 6F   print(f"[*] Fo
0000000000000880 75 6E 64 20 50 6F 74 65 6E 74 69 61 6C 20 4C 75 und Potential Lu
0000000000000890 6D 70 20 7B 54 41 52 47 45 54 5F 4C 55 4D 50 5F mp {TARGET_LUMP_
00000000000008A0 49 44 7D 3A 20 4F 66 66 73 65 74 3D 30 78 7B 6C ID}: Offset=0x{l
00000000000008B0 75 6D 70 5F 6F 66 66 73 65 74 3A 58 7D 20 28 7B ump_offset:X} ({
00000000000008C0 6C 75 6D 70 5F 6F 66 66 73 65 74 7D 29 2C 20 4C lump_offset}), L
00000000000008D0 65 6E 67 74 68 3D 30 78 7B 6C 75 6D 70 5F 6C 65 ength=0x{lump_le
00000000000008E0 6E 67 74 68 3A 58 7D 20 28 7B 6C 75 6D 70 5F 6C ngth:X} ({lump_l
00000000000008F0 65 6E 67 74 68 7D 29 22 29 0D 0A 0D 0A 20 20 20 ength})")����   
0000000000000900 20 20 20 20 20 20 20 20 20 23 20 42 61 73 69 63          # Basic
0000000000000910 20 76 61 6C 69 64 61 74 69 6F 6E 0D 0A 20 20 20  validation��   
0000000000000920 20 20 20 20 20 20 20 20 20 69 66 20 6C 75 6D 70          if lump
0000000000000930 5F 6F 66 66 73 65 74 20 2B 20 6C 75 6D 70 5F 6C _offset + lump_l
0000000000000940 65 6E 67 74 68 20 3E 20 66 69 6C 65 5F 73 69 7A ength > file_siz
0000000000000950 65 20 6F 72 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 e or lump_length
0000000000000960 20 3C 20 30 20 6F 72 20 6C 75 6D 70 5F 6F 66 66  < 0 or lump_off
0000000000000970 73 65 74 20 3C 20 30 3A 0D 0A 20 20 20 20 20 20 set < 0:��      
0000000000000980 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
0000000000000990 28 66 22 5B 21 5D 20 45 72 72 6F 72 3A 20 4C 75 (f"[!] Error: Lu
00000000000009A0 6D 70 20 7B 54 41 52 47 45 54 5F 4C 55 4D 50 5F mp {TARGET_LUMP_
00000000000009B0 49 44 7D 20 6F 66 66 73 65 74 2F 6C 65 6E 67 74 ID} offset/lengt
00000000000009C0 68 20 69 6E 76 61 6C 69 64 20 6F 72 20 6F 75 74 h invalid or out
00000000000009D0 20 6F 66 20 62 6F 75 6E 64 73 2E 22 29 0D 0A 20  of bounds.")�� 
00000000000009E0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
00000000000009F0 70 72 69 6E 74 28 66 22 20 20 20 20 4C 75 6D 70 print(f"    Lump
0000000000000A00 20 4F 66 66 73 65 74 3A 20 7B 6C 75 6D 70 5F 6F  Offset: {lump_o
0000000000000A10 66 66 73 65 74 7D 2C 20 4C 75 6D 70 20 4C 65 6E ffset}, Lump Len
0000000000000A20 67 74 68 3A 20 7B 6C 75 6D 70 5F 6C 65 6E 67 74 gth: {lump_lengt
0000000000000A30 68 7D 2C 20 46 69 6C 65 20 53 69 7A 65 3A 20 7B h}, File Size: {
0000000000000A40 66 69 6C 65 5F 73 69 7A 65 7D 22 29 0D 0A 20 20 file_size}")��  
0000000000000A50 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 23                #
0000000000000A60 20 41 74 74 65 6D 70 74 20 74 6F 20 70 72 6F 76  Attempt to prov
0000000000000A70 69 64 65 20 6D 6F 72 65 20 63 6F 6E 74 65 78 74 ide more context
0000000000000A80 20 69 66 20 70 6F 73 73 69 62 6C 65 0D 0A 20 20  if possible��  
0000000000000A90 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69                i
0000000000000AA0 66 20 6C 75 6D 70 5F 6F 66 66 73 65 74 20 2B 20 f lump_offset + 
0000000000000AB0 6C 75 6D 70 5F 6C 65 6E 67 74 68 20 3E 20 66 69 lump_length > fi
0000000000000AC0 6C 65 5F 73 69 7A 65 3A 0D 0A 20 20 20 20 20 20 le_size:��      
0000000000000AD0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000AE0 70 72 69 6E 74 28 22 20 20 20 20 52 65 61 73 6F print("    Reaso
0000000000000AF0 6E 3A 20 4C 75 6D 70 20 65 78 74 65 6E 64 73 20 n: Lump extends 
0000000000000B00 62 65 79 6F 6E 64 20 66 69 6C 65 20 65 6E 64 2E beyond file end.
0000000000000B10 22 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ")��            
0000000000000B20 20 20 20 20 20 69 66 20 6C 75 6D 70 5F 6C 65 6E      if lump_len
0000000000000B30 67 74 68 20 3D 3D 20 30 3A 0D 0A 20 20 20 20 20 gth == 0:��     
0000000000000B40 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000B50 70 72 69 6E 74 28 22 20 20 20 20 52 65 61 73 6F print("    Reaso
0000000000000B60 6E 3A 20 4C 75 6D 70 20 68 61 73 20 7A 65 72 6F n: Lump has zero
0000000000000B70 20 6C 65 6E 67 74 68 2E 22 29 0D 0A 0D 0A 20 20  length.")����  
0000000000000B80 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 23                #
0000000000000B90 20 43 68 65 63 6B 20 69 66 20 70 72 65 76 69 6F  Check if previo
0000000000000BA0 75 73 20 6C 75 6D 70 73 20 6C 6F 6F 6B 20 6F 6B us lumps look ok
0000000000000BB0 61 79 20 74 6F 20 73 65 65 20 69 66 20 66 69 6C ay to see if fil
0000000000000BC0 65 20 69 73 20 74 72 75 6E 63 61 74 65 64 0D 0A e is truncated��
0000000000000BD0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000BE0 20 69 66 20 54 41 52 47 45 54 5F 4C 55 4D 50 5F  if TARGET_LUMP_
0000000000000BF0 49 44 20 3E 20 30 3A 0D 0A 20 20 20 20 20 20 20 ID > 0:��       
0000000000000C00 20 20 20 20 20 20 20 20 20 20 20 20 20 20 74 72               tr
0000000000000C10 79 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 y:��            
0000000000000C20 20 20 20 20 20 20 20 20 20 20 20 20 20 70 72 65              pre
0000000000000C30 76 5F 6C 75 6D 70 5F 65 6E 74 72 79 5F 6F 66 66 v_lump_entry_off
0000000000000C40 73 65 74 20 3D 20 4C 55 4D 50 5F 44 49 52 5F 4F set = LUMP_DIR_O
0000000000000C50 46 46 53 45 54 20 2B 20 28 54 41 52 47 45 54 5F FFSET + (TARGET_
0000000000000C60 4C 55 4D 50 5F 49 44 20 2D 20 31 29 20 2A 20 4C LUMP_ID - 1) * L
0000000000000C70 55 4D 50 5F 45 4E 54 52 59 5F 53 49 5A 45 0D 0A UMP_ENTRY_SIZE��
0000000000000C80 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000C90 20 20 20 20 20 20 20 20 20 66 2E 73 65 65 6B 28          f.seek(
0000000000000CA0 70 72 65 76 5F 6C 75 6D 70 5F 65 6E 74 72 79 5F prev_lump_entry_
0000000000000CB0 6F 66 66 73 65 74 29 0D 0A 20 20 20 20 20 20 20 offset)��       
0000000000000CC0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000CD0 20 20 70 72 65 76 5F 6C 75 6D 70 5F 69 6E 66 6F   prev_lump_info
0000000000000CE0 20 3D 20 66 2E 72 65 61 64 28 4C 55 4D 50 5F 45  = f.read(LUMP_E
0000000000000CF0 4E 54 52 59 5F 53 49 5A 45 29 0D 0A 20 20 20 20 NTRY_SIZE)��    
0000000000000D00 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000D10 20 20 20 20 20 70 72 65 76 5F 6F 66 66 73 65 74      prev_offset
0000000000000D20 2C 20 70 72 65 76 5F 6C 65 6E 67 74 68 20 3D 20 , prev_length = 
0000000000000D30 73 74 72 75 63 74 2E 75 6E 70 61 63 6B 28 27 3E struct.unpack('>
0000000000000D40 49 49 27 2C 20 70 72 65 76 5F 6C 75 6D 70 5F 69 II', prev_lump_i
0000000000000D50 6E 66 6F 29 0D 0A 20 20 20 20 20 20 20 20 20 20 nfo)��          
0000000000000D60 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 70                p
0000000000000D70 72 69 6E 74 28 66 22 5B 2A 5D 20 50 72 65 76 69 rint(f"[*] Previ
0000000000000D80 6F 75 73 20 4C 75 6D 70 20 28 7B 54 41 52 47 45 ous Lump ({TARGE
0000000000000D90 54 5F 4C 55 4D 50 5F 49 44 2D 31 7D 29 3A 20 4F T_LUMP_ID-1}): O
0000000000000DA0 66 66 73 65 74 3D 30 78 7B 70 72 65 76 5F 6F 66 ffset=0x{prev_of
0000000000000DB0 66 73 65 74 3A 58 7D 2C 20 4C 65 6E 67 74 68 3D fset:X}, Length=
0000000000000DC0 30 78 7B 70 72 65 76 5F 6C 65 6E 67 74 68 3A 58 0x{prev_length:X
0000000000000DD0 7D 22 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 }")��           
0000000000000DE0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69 66               if
0000000000000DF0 20 70 72 65 76 5F 6F 66 66 73 65 74 20 2B 20 70  prev_offset + p
0000000000000E00 72 65 76 5F 6C 65 6E 67 74 68 20 3E 20 66 69 6C rev_length > fil
0000000000000E10 65 5F 73 69 7A 65 3A 0D 0A 20 20 20 20 20 20 20 e_size:��       
0000000000000E20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000E30 20 20 20 20 20 20 20 70 72 69 6E 74 28 22 20 20        print("  
0000000000000E40 20 20 5B 21 5D 20 50 72 65 76 69 6F 75 73 20 6C   [!] Previous l
0000000000000E50 75 6D 70 20 61 6C 73 6F 20 73 65 65 6D 73 20 6F ump also seems o
0000000000000E60 75 74 20 6F 66 20 62 6F 75 6E 64 73 20 2D 20 66 ut of bounds - f
0000000000000E70 69 6C 65 20 6D 69 67 68 74 20 62 65 20 74 72 75 ile might be tru
0000000000000E80 6E 63 61 74 65 64 20 6F 72 20 6C 75 6D 70 20 64 ncated or lump d
0000000000000E90 69 72 20 63 6F 72 72 75 70 74 2E 22 29 0D 0A 20 ir corrupt.")�� 
0000000000000EA0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000EB0 20 20 20 20 65 78 63 65 70 74 20 45 78 63 65 70     except Excep
0000000000000EC0 74 69 6F 6E 20 61 73 20 65 3A 0D 0A 20 20 20 20 tion as e:��    
0000000000000ED0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000000EE0 20 20 20 20 20 70 72 69 6E 74 28 66 22 20 20 20      print(f"   
0000000000000EF0 20 43 6F 75 6C 64 20 6E 6F 74 20 72 65 61 64 20  Could not read 
0000000000000F00 70 72 65 76 69 6F 75 73 20 6C 75 6D 70 20 69 6E previous lump in
0000000000000F10 66 6F 3A 20 7B 65 7D 22 29 0D 0A 0D 0A 20 20 20 fo: {e}")����   
0000000000000F20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 72 65               re
0000000000000F30 74 75 72 6E 20 23 20 53 74 6F 70 20 61 6E 61 6C turn # Stop anal
0000000000000F40 79 73 69 73 20 66 6F 72 20 74 68 69 73 20 66 69 ysis for this fi
0000000000000F50 6C 65 20 69 66 20 6C 75 6D 70 20 69 73 20 69 6E le if lump is in
0000000000000F60 76 61 6C 69 64 0D 0A 0D 0A 0D 0A 20 20 20 20 20 valid������     
0000000000000F70 20 20 20 20 20 20 20 69 66 20 6C 75 6D 70 5F 6C        if lump_l
0000000000000F80 65 6E 67 74 68 20 3D 3D 20 30 3A 0D 0A 20 20 20 ength == 0:��   
0000000000000F90 20 20 20 20 20 20 20 20 20 20 20 20 20 20 70 72               pr
0000000000000FA0 69 6E 74 28 66 22 5B 2A 5D 20 57 61 72 6E 69 6E int(f"[*] Warnin
0000000000000FB0 67 3A 20 4C 75 6D 70 20 7B 54 41 52 47 45 54 5F g: Lump {TARGET_
0000000000000FC0 4C 55 4D 50 5F 49 44 7D 20 68 61 73 20 7A 65 72 LUMP_ID} has zer
0000000000000FD0 6F 20 6C 65 6E 67 74 68 2E 20 4E 6F 20 6E 6F 64 o length. No nod
0000000000000FE0 65 73 20 74 6F 20 70 61 72 73 65 2E 22 29 0D 0A es to parse.")��
0000000000000FF0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000001000 20 72 65 74 75 72 6E 0D 0A 0D 0A 20 20 20 20 20  return����     
0000000000001010 20 20 20 20 20 20 20 23 20 32 2E 20 52 65 61 64        # 2. Read
0000000000001020 20 61 6E 64 20 50 61 72 73 65 20 4E 6F 64 65 73  and Parse Nodes
0000000000001030 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 66 2E ��            f.
0000000000001040 73 65 65 6B 28 6C 75 6D 70 5F 6F 66 66 73 65 74 seek(lump_offset
0000000000001050 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 6C )��            l
0000000000001060 75 6D 70 5F 64 61 74 61 20 3D 20 66 2E 72 65 61 ump_data = f.rea
0000000000001070 64 28 6C 75 6D 70 5F 6C 65 6E 67 74 68 29 0D 0A d(lump_length)��
0000000000001080 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 6E 75 ��            nu
0000000000001090 6D 5F 6E 6F 64 65 73 20 3D 20 6C 75 6D 70 5F 6C m_nodes = lump_l
00000000000010A0 65 6E 67 74 68 20 2F 2F 20 4E 4F 44 45 5F 53 49 ength // NODE_SI
00000000000010B0 5A 45 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ZE��            
00000000000010C0 74 72 61 69 6C 69 6E 67 5F 62 79 74 65 73 5F 63 trailing_bytes_c
00000000000010D0 6F 75 6E 74 20 3D 20 6C 75 6D 70 5F 6C 65 6E 67 ount = lump_leng
00000000000010E0 74 68 20 25 20 4E 4F 44 45 5F 53 49 5A 45 0D 0A th % NODE_SIZE��
00000000000010F0 20 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E             prin
0000000000001100 74 28 66 22 5B 2A 5D 20 45 78 70 65 63 74 69 6E t(f"[*] Expectin
0000000000001110 67 20 7B 6E 75 6D 5F 6E 6F 64 65 73 7D 20 6E 6F g {num_nodes} no
0000000000001120 64 65 73 20 28 7B 6C 75 6D 70 5F 6C 65 6E 67 74 des ({lump_lengt
0000000000001130 68 7D 20 62 79 74 65 73 20 2F 20 7B 4E 4F 44 45 h} bytes / {NODE
0000000000001140 5F 53 49 5A 45 7D 20 62 79 74 65 73 2F 6E 6F 64 _SIZE} bytes/nod
0000000000001150 65 29 2E 22 29 0D 0A 0D 0A 20 20 20 20 20 20 20 e).")����       
0000000000001160 20 20 20 20 20 69 66 20 74 72 61 69 6C 69 6E 67      if trailing
0000000000001170 5F 62 79 74 65 73 5F 63 6F 75 6E 74 20 3E 20 30 _bytes_count > 0
0000000000001180 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 :��             
0000000000001190 20 20 20 70 72 69 6E 74 28 66 22 5B 21 5D 20 57    print(f"[!] W
00000000000011A0 61 72 6E 69 6E 67 3A 20 4C 75 6D 70 20 73 69 7A arning: Lump siz
00000000000011B0 65 20 28 7B 6C 75 6D 70 5F 6C 65 6E 67 74 68 7D e ({lump_length}
00000000000011C0 29 20 69 73 20 6E 6F 74 20 61 20 6D 75 6C 74 69 ) is not a multi
00000000000011D0 70 6C 65 20 6F 66 20 6E 6F 64 65 20 73 69 7A 65 ple of node size
00000000000011E0 20 28 7B 4E 4F 44 45 5F 53 49 5A 45 7D 29 2E 22  ({NODE_SIZE})."
00000000000011F0 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 )��             
0000000000001200 20 20 20 70 72 69 6E 74 28 66 22 20 20 20 20 46    print(f"    F
0000000000001210 6F 75 6E 64 20 7B 74 72 61 69 6C 69 6E 67 5F 62 ound {trailing_b
0000000000001220 79 74 65 73 5F 63 6F 75 6E 74 7D 20 74 72 61 69 ytes_count} trai
0000000000001230 6C 69 6E 67 20 62 79 74 65 73 20 61 66 74 65 72 ling bytes after
0000000000001240 20 7B 6E 75 6D 5F 6E 6F 64 65 73 7D 20 66 75 6C  {num_nodes} ful
0000000000001250 6C 20 6E 6F 64 65 73 2E 22 29 0D 0A 20 20 20 20 l nodes.")��    
0000000000001260 20 20 20 20 20 20 20 20 20 20 20 20 74 72 61 69             trai
0000000000001270 6C 69 6E 67 5F 64 61 74 61 20 3D 20 6C 75 6D 70 ling_data = lump
0000000000001280 5F 64 61 74 61 5B 6E 75 6D 5F 6E 6F 64 65 73 20 _data[num_nodes 
0000000000001290 2A 20 4E 4F 44 45 5F 53 49 5A 45 3A 5D 0D 0A 20 * NODE_SIZE:]�� 
00000000000012A0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6C                l
00000000000012B0 75 6D 70 5F 64 61 74 61 20 3D 20 6C 75 6D 70 5F ump_data = lump_
00000000000012C0 64 61 74 61 5B 3A 6E 75 6D 5F 6E 6F 64 65 73 20 data[:num_nodes 
00000000000012D0 2A 20 4E 4F 44 45 5F 53 49 5A 45 5D 20 23 20 4F * NODE_SIZE] # O
00000000000012E0 6E 6C 79 20 70 61 72 73 65 20 66 75 6C 6C 20 6E nly parse full n
00000000000012F0 6F 64 65 73 0D 0A 0D 0A 20 20 20 20 20 20 20 20 odes����        
0000000000001300 20 20 20 20 66 6F 72 20 69 20 69 6E 20 72 61 6E     for i in ran
0000000000001310 67 65 28 6E 75 6D 5F 6E 6F 64 65 73 29 3A 0D 0A ge(num_nodes):��
0000000000001320 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000001330 6E 6F 64 65 5F 63 68 75 6E 6B 20 3D 20 6C 75 6D node_chunk = lum
0000000000001340 70 5F 64 61 74 61 5B 69 20 2A 20 4E 4F 44 45 5F p_data[i * NODE_
0000000000001350 53 49 5A 45 20 3A 20 28 69 20 2B 20 31 29 20 2A SIZE : (i + 1) *
0000000000001360 20 4E 4F 44 45 5F 53 49 5A 45 5D 0D 0A 20 20 20  NODE_SIZE]��   
0000000000001370 20 20 20 20 20 20 20 20 20 20 20 20 20 70 61 72              par
0000000000001380 73 65 64 20 3D 20 70 61 72 73 65 5F 6E 6F 64 65 sed = parse_node
0000000000001390 28 6E 6F 64 65 5F 63 68 75 6E 6B 29 0D 0A 20 20 (node_chunk)��  
00000000000013A0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 69 66               if
00000000000013B0 20 70 61 72 73 65 64 3A 0D 0A 20 20 20 20 20 20  parsed:��      
00000000000013C0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6E 6F               no
00000000000013D0 64 65 73 2E 61 70 70 65 6E 64 28 70 61 72 73 65 des.append(parse
00000000000013E0 64 29 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 d)��            
00000000000013F0 20 20 20 20 65 6C 73 65 3A 0D 0A 20 20 20 20 20     else:��     
0000000000001400 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 70                p
0000000000001410 72 69 6E 74 28 66 22 5B 21 5D 20 45 72 72 6F 72 rint(f"[!] Error
0000000000001420 20 70 61 72 73 69 6E 67 20 6E 6F 64 65 20 69 6E  parsing node in
0000000000001430 64 65 78 20 7B 69 7D 2E 22 29 0D 0A 20 20 20 20 dex {i}.")��    
0000000000001440 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                 
0000000000001450 23 20 4F 70 74 69 6F 6E 61 6C 6C 79 20 62 72 65 # Optionally bre
0000000000001460 61 6B 20 6F 72 20 63 6F 6E 74 69 6E 75 65 20 62 ak or continue b
0000000000001470 61 73 65 64 20 6F 6E 20 70 72 65 66 65 72 65 6E ased on preferen
0000000000001480 63 65 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ce��            
0000000000001490 20 20 20 20 20 20 20 20 23 20 62 72 65 61 6B 0D         # break�
00000000000014A0 0A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 70 ���            p
00000000000014B0 72 69 6E 74 28 66 22 5B 2A 5D 20 53 75 63 63 65 rint(f"[*] Succe
00000000000014C0 73 73 66 75 6C 6C 79 20 70 61 72 73 65 64 20 7B ssfully parsed {
00000000000014D0 6C 65 6E 28 6E 6F 64 65 73 29 7D 20 6E 6F 64 65 len(nodes)} node
00000000000014E0 73 2E 22 29 0D 0A 0D 0A 20 20 20 20 65 78 63 65 s.")����    exce
00000000000014F0 70 74 20 46 69 6C 65 4E 6F 74 46 6F 75 6E 64 45 pt FileNotFoundE
0000000000001500 72 72 6F 72 3A 0D 0A 20 20 20 20 20 20 20 20 70 rror:��        p
0000000000001510 72 69 6E 74 28 66 22 5B 21 5D 20 45 72 72 6F 72 rint(f"[!] Error
0000000000001520 3A 20 46 69 6C 65 20 6E 6F 74 20 66 6F 75 6E 64 : File not found
0000000000001530 3A 20 7B 66 69 6C 65 70 61 74 68 7D 22 29 0D 0A : {filepath}")��
0000000000001540 20 20 20 20 20 20 20 20 72 65 74 75 72 6E 0D 0A         return��
0000000000001550 20 20 20 20 65 78 63 65 70 74 20 45 78 63 65 70     except Excep
0000000000001560 74 69 6F 6E 20 61 73 20 65 3A 0D 0A 20 20 20 20 tion as e:��    
0000000000001570 20 20 20 20 70 72 69 6E 74 28 66 22 5B 21 5D 20     print(f"[!] 
0000000000001580 41 6E 20 65 72 72 6F 72 20 6F 63 63 75 72 72 65 An error occurre
0000000000001590 64 20 64 75 72 69 6E 67 20 66 69 6C 65 20 72 65 d during file re
00000000000015A0 61 64 69 6E 67 2F 70 61 72 73 69 6E 67 3A 20 7B ading/parsing: {
00000000000015B0 65 7D 22 29 0D 0A 20 20 20 20 20 20 20 20 72 65 e}")��        re
00000000000015C0 74 75 72 6E 0D 0A 0D 0A 20 20 20 20 69 66 20 6E turn����    if n
00000000000015D0 6F 74 20 6E 6F 64 65 73 3A 0D 0A 20 20 20 20 20 ot nodes:��     
00000000000015E0 20 20 20 70 72 69 6E 74 28 22 5B 2A 5D 20 4E 6F    print("[*] No
00000000000015F0 20 6E 6F 64 65 73 20 77 65 72 65 20 70 61 72 73  nodes were pars
0000000000001600 65 64 2E 22 29 0D 0A 20 20 20 20 20 20 20 20 72 ed.")��        r
0000000000001610 65 74 75 72 6E 0D 0A 0D 0A 20 20 20 20 23 20 33 eturn����    # 3
0000000000001620 2E 20 41 6E 61 6C 79 7A 65 20 50 61 72 73 65 64 . Analyze Parsed
0000000000001630 20 4E 6F 64 65 73 0D 0A 20 20 20 20 70 72 69 6E  Nodes��    prin
0000000000001640 74 28 66 22 5C 6E 2D 2D 2D 20 4E 6F 64 65 20 41 t(f"\n--- Node A
0000000000001650 6E 61 6C 79 73 69 73 20 28 53 68 6F 77 69 6E 67 nalysis (Showing
0000000000001660 20 66 69 72 73 74 2F 6C 61 73 74 20 7B 4D 41 58  first/last {MAX
0000000000001670 5F 4E 4F 44 45 53 5F 54 4F 5F 44 45 54 41 49 4C _NODES_TO_DETAIL
0000000000001680 20 2F 2F 20 32 7D 2C 20 4C 65 61 76 65 73 29 20  // 2}, Leaves) 
0000000000001690 2D 2D 2D 22 29 0D 0A 20 20 20 20 6C 65 61 66 5F ---")��    leaf_
00000000000016A0 6E 6F 64 65 73 5F 69 6E 64 69 63 65 73 20 3D 20 nodes_indices = 
00000000000016B0 5B 5D 0D 0A 20 20 20 20 70 6F 69 6E 74 65 72 5F []��    pointer_
00000000000016C0 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 20 interpretations 
00000000000016D0 3D 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 2E 64 65 = collections.de
00000000000016E0 66 61 75 6C 74 64 69 63 74 28 6C 61 6D 62 64 61 faultdict(lambda
00000000000016F0 3A 20 63 6F 6C 6C 65 63 74 69 6F 6E 73 2E 64 65 : collections.de
0000000000001700 66 61 75 6C 74 64 69 63 74 28 69 6E 74 29 29 20 faultdict(int)) 
0000000000001710 23 20 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E # interpretation
0000000000001720 73 5B 74 79 70 65 5D 5B 68 79 70 6F 74 68 65 73 s[type][hypothes
0000000000001730 69 73 5D 20 3D 20 63 6F 75 6E 74 0D 0A 0D 0A 20 is] = count���� 
0000000000001740 20 20 20 66 6F 72 20 69 2C 20 6E 6F 64 65 20 69    for i, node i
0000000000001750 6E 20 65 6E 75 6D 65 72 61 74 65 28 6E 6F 64 65 n enumerate(node
0000000000001760 73 29 3A 0D 0A 20 20 20 20 20 20 20 20 23 20 2D s):��        # -
0000000000001770 2D 2D 20 43 68 69 6C 64 20 50 6F 69 6E 74 65 72 -- Child Pointer
0000000000001780 20 41 6E 61 6C 79 73 69 73 20 2D 2D 2D 0D 0A 20  Analysis ---�� 
0000000000001790 20 20 20 20 20 20 20 63 68 69 6C 64 5F 66 20 3D        child_f =
00000000000017A0 20 6E 6F 64 65 5B 27 63 68 69 6C 64 5F 66 27 5D  node['child_f']
00000000000017B0 0D 0A 20 20 20 20 20 20 20 20 63 68 69 6C 64 5F ��        child_
00000000000017C0 62 20 3D 20 6E 6F 64 65 5B 27 63 68 69 6C 64 5F b = node['child_
00000000000017D0 62 27 5D 0D 0A 20 20 20 20 20 20 20 20 69 73 5F b']��        is_
00000000000017E0 6C 65 61 66 20 3D 20 46 61 6C 73 65 20 23 20 54 leaf = False # T
00000000000017F0 65 6E 74 61 74 69 76 65 20 66 6C 61 67 0D 0A 0D entative flag���
0000000000001800 0A 20 20 20 20 20 20 20 20 23 20 43 68 65 63 6B �        # Check
0000000000001810 20 46 72 6F 6E 74 20 43 68 69 6C 64 0D 0A 20 20  Front Child��  
0000000000001820 20 20 20 20 20 20 69 66 20 63 68 69 6C 64 5F 66       if child_f
0000000000001830 20 3C 20 30 3A 0D 0A 20 20 20 20 20 20 20 20 20  < 0:��         
0000000000001840 20 20 20 69 6E 74 65 72 70 72 65 74 61 74 69 6F    interpretatio
0000000000001850 6E 5F 66 20 3D 20 66 22 4C 65 61 66 3F 20 28 7E n_f = f"Leaf? (~
0000000000001860 7B 63 68 69 6C 64 5F 66 7D 3D 7B 68 65 78 28 7E {child_f}={hex(~
0000000000001870 63 68 69 6C 64 5F 66 29 7D 20 6F 72 20 2D 28 7B child_f)} or -({
0000000000001880 63 68 69 6C 64 5F 66 7D 2B 31 29 3D 7B 2D 28 63 child_f}+1)={-(c
0000000000001890 68 69 6C 64 5F 66 2B 31 29 7D 29 22 0D 0A 20 20 hild_f+1)})"��  
00000000000018A0 20 20 20 20 20 20 20 20 20 20 70 6F 69 6E 74 65           pointe
00000000000018B0 72 5F 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E r_interpretation
00000000000018C0 73 5B 27 46 72 6F 6E 74 27 5D 5B 27 4E 65 67 61 s['Front']['Nega
00000000000018D0 74 69 76 65 20 28 4C 65 61 66 3F 29 27 5D 20 2B tive (Leaf?)'] +
00000000000018E0 3D 20 31 0D 0A 20 20 20 20 20 20 20 20 65 6C 69 = 1��        eli
00000000000018F0 66 20 63 68 69 6C 64 5F 66 20 3D 3D 20 30 20 61 f child_f == 0 a
0000000000001900 6E 64 20 63 68 69 6C 64 5F 62 20 3D 3D 20 30 3A nd child_b == 0:
0000000000001910 20 23 20 53 70 65 63 69 61 6C 20 63 61 73 65 20  # Special case 
0000000000001920 6C 69 6B 65 20 7A 6F 6E 65 31 33 20 6E 6F 64 65 like zone13 node
0000000000001930 20 34 3F 0D 0A 20 20 20 20 20 20 20 20 20 20 20  4?��           
0000000000001940 20 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 5F  interpretation_
0000000000001950 66 20 3D 20 22 5A 65 72 6F 20 28 4C 65 61 66 3F f = "Zero (Leaf?
0000000000001960 29 22 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 )"��            
0000000000001970 70 6F 69 6E 74 65 72 5F 69 6E 74 65 72 70 72 65 pointer_interpre
0000000000001980 74 61 74 69 6F 6E 73 5B 27 46 72 6F 6E 74 27 5D tations['Front']
0000000000001990 5B 27 5A 65 72 6F 20 28 4C 65 61 66 3F 29 27 5D ['Zero (Leaf?)']
00000000000019A0 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 20 20  += 1��         
00000000000019B0 20 20 20 69 73 5F 6C 65 61 66 20 3D 20 54 72 75    is_leaf = Tru
00000000000019C0 65 20 23 20 41 73 73 75 6D 65 20 7A 65 72 6F 20 e # Assume zero 
00000000000019D0 63 68 69 6C 64 72 65 6E 20 6D 65 61 6E 73 20 6C children means l
00000000000019E0 65 61 66 20 66 6F 72 20 6E 6F 77 0D 0A 20 20 20 eaf for now��   
00000000000019F0 20 20 20 20 20 65 6C 73 65 3A 20 23 20 50 6F 73      else: # Pos
0000000000001A00 69 74 69 76 65 20 63 68 69 6C 64 5F 66 0D 0A 20 itive child_f�� 
0000000000001A10 20 20 20 20 20 20 20 20 20 20 20 70 6F 69 6E 74            point
0000000000001A20 65 72 5F 69 6E 74 65 72 70 72 65 74 61 74 69 6F er_interpretatio
0000000000001A30 6E 73 5B 27 46 72 6F 6E 74 27 5D 5B 27 50 6F 73 ns['Front']['Pos
0000000000001A40 69 74 69 76 65 27 5D 20 2B 3D 20 31 0D 0A 20 20 itive'] += 1��  
0000000000001A50 20 20 20 20 20 20 20 20 20 20 68 79 70 6F 74 68           hypoth
0000000000001A60 65 73 65 73 20 3D 20 5B 5D 0D 0A 20 20 20 20 20 eses = []��     
0000000000001A70 20 20 20 20 20 20 20 23 20 48 31 3A 20 42 79 74        # H1: Byt
0000000000001A80 65 20 6F 66 66 73 65 74 20 66 72 6F 6D 20 6C 75 e offset from lu
0000000000001A90 6D 70 20 73 74 61 72 74 3F 20 28 4D 75 73 74 20 mp start? (Must 
0000000000001AA0 62 65 20 6D 75 6C 74 69 70 6C 65 20 6F 66 20 4E be multiple of N
0000000000001AB0 4F 44 45 5F 53 49 5A 45 20 61 6E 64 20 77 69 74 ODE_SIZE and wit
0000000000001AC0 68 69 6E 20 6C 75 6D 70 29 0D 0A 20 20 20 20 20 hin lump)��     
0000000000001AD0 20 20 20 20 20 20 20 69 66 20 63 68 69 6C 64 5F        if child_
0000000000001AE0 66 20 25 20 4E 4F 44 45 5F 53 49 5A 45 20 3D 3D f % NODE_SIZE ==
0000000000001AF0 20 30 20 61 6E 64 20 30 20 3C 3D 20 63 68 69 6C  0 and 0 <= chil
0000000000001B00 64 5F 66 20 3C 20 6C 75 6D 70 5F 6C 65 6E 67 74 d_f < lump_lengt
0000000000001B10 68 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 h:��            
0000000000001B20 20 20 20 20 68 79 70 6F 74 68 65 73 65 73 2E 61     hypotheses.a
0000000000001B30 70 70 65 6E 64 28 66 22 42 79 74 65 20 4F 66 66 ppend(f"Byte Off
0000000000001B40 73 65 74 20 28 2D 3E 20 4E 6F 64 65 20 7B 63 68 set (-> Node {ch
0000000000001B50 69 6C 64 5F 66 20 2F 2F 20 4E 4F 44 45 5F 53 49 ild_f // NODE_SI
0000000000001B60 5A 45 7D 3F 29 22 29 0D 0A 20 20 20 20 20 20 20 ZE}?)")��       
0000000000001B70 20 20 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72          pointer
0000000000001B80 5F 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 _interpretations
0000000000001B90 5B 27 46 72 6F 6E 74 27 5D 5B 27 48 79 70 6F 74 ['Front']['Hypot
0000000000001BA0 68 65 73 69 73 3A 20 42 79 74 65 20 4F 66 66 73 hesis: Byte Offs
0000000000001BB0 65 74 27 5D 20 2B 3D 20 31 0D 0A 20 20 20 20 20 et'] += 1��     
0000000000001BC0 20 20 20 20 20 20 20 23 20 48 32 3A 20 4E 6F 64        # H2: Nod
0000000000001BD0 65 20 49 6E 64 65 78 3F 20 28 4D 75 73 74 20 62 e Index? (Must b
0000000000001BE0 65 20 76 61 6C 69 64 20 69 6E 64 65 78 29 0D 0A e valid index)��
0000000000001BF0 20 20 20 20 20 20 20 20 20 20 20 20 69 66 20 30             if 0
0000000000001C00 20 3C 3D 20 63 68 69 6C 64 5F 66 20 3C 20 6E 75  <= child_f < nu
0000000000001C10 6D 5F 6E 6F 64 65 73 3A 0D 0A 20 20 20 20 20 20 m_nodes:��      
0000000000001C20 20 20 20 20 20 20 20 20 20 20 68 79 70 6F 74 68           hypoth
0000000000001C30 65 73 65 73 2E 61 70 70 65 6E 64 28 66 22 4E 6F eses.append(f"No
0000000000001C40 64 65 20 49 6E 64 65 78 3F 22 29 0D 0A 20 20 20 de Index?")��   
0000000000001C50 20 20 20 20 20 20 20 20 20 20 20 20 20 70 6F 69              poi
0000000000001C60 6E 74 65 72 5F 69 6E 74 65 72 70 72 65 74 61 74 nter_interpretat
0000000000001C70 69 6F 6E 73 5B 27 46 72 6F 6E 74 27 5D 5B 27 48 ions['Front']['H
0000000000001C80 79 70 6F 74 68 65 73 69 73 3A 20 4E 6F 64 65 20 ypothesis: Node 
0000000000001C90 49 6E 64 65 78 27 5D 20 2B 3D 20 31 0D 0A 20 20 Index'] += 1��  
0000000000001CA0 20 20 20 20 20 20 20 20 20 20 23 20 48 33 3A 20           # H3: 
0000000000001CB0 4D 61 79 62 65 20 6F 66 66 73 65 74 20 66 72 6F Maybe offset fro
0000000000001CC0 6D 20 63 75 72 72 65 6E 74 20 6E 6F 64 65 20 73 m current node s
0000000000001CD0 74 61 72 74 3F 20 28 6E 6F 64 65 5F 6F 66 66 73 tart? (node_offs
0000000000001CE0 65 74 20 2B 20 63 68 69 6C 64 5F 66 29 0D 0A 20 et + child_f)�� 
0000000000001CF0 20 20 20 20 20 20 20 20 20 20 20 23 20 52 65 71            # Req
0000000000001D00 75 69 72 65 73 20 6E 6F 64 65 5F 6F 66 66 73 65 uires node_offse
0000000000001D10 74 2C 20 6C 65 73 73 20 64 69 72 65 63 74 20 74 t, less direct t
0000000000001D20 6F 20 63 68 65 63 6B 20 68 65 72 65 0D 0A 0D 0A o check here����
0000000000001D30 20 20 20 20 20 20 20 20 20 20 20 20 69 6E 74 65             inte
0000000000001D40 72 70 72 65 74 61 74 69 6F 6E 5F 66 20 3D 20 66 rpretation_f = f
0000000000001D50 22 56 61 6C 75 65 3D 7B 63 68 69 6C 64 5F 66 7D "Value={child_f}
0000000000001D60 2E 20 46 69 74 73 3A 20 7B 27 2C 20 27 2E 6A 6F . Fits: {', '.jo
0000000000001D70 69 6E 28 68 79 70 6F 74 68 65 73 65 73 29 20 69 in(hypotheses) i
0000000000001D80 66 20 68 79 70 6F 74 68 65 73 65 73 20 65 6C 73 f hypotheses els
0000000000001D90 65 20 27 4E 6F 6E 65 3F 27 7D 22 0D 0A 0D 0A 20 e 'None?'}"���� 
0000000000001DA0 20 20 20 20 20 20 20 23 20 43 68 65 63 6B 20 42        # Check B
0000000000001DB0 61 63 6B 20 43 68 69 6C 64 20 28 73 69 6D 69 6C ack Child (simil
0000000000001DC0 61 72 20 6C 6F 67 69 63 29 0D 0A 20 20 20 20 20 ar logic)��     
0000000000001DD0 20 20 20 69 66 20 63 68 69 6C 64 5F 62 20 3C 20    if child_b < 
0000000000001DE0 30 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 0:��            
0000000000001DF0 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 5F 62 interpretation_b
0000000000001E00 20 3D 20 66 22 4C 65 61 66 3F 20 28 7E 7B 63 68  = f"Leaf? (~{ch
0000000000001E10 69 6C 64 5F 62 7D 3D 7B 68 65 78 28 7E 63 68 69 ild_b}={hex(~chi
0000000000001E20 6C 64 5F 62 29 7D 20 6F 72 20 2D 28 7B 63 68 69 ld_b)} or -({chi
0000000000001E30 6C 64 5F 62 7D 2B 31 29 3D 7B 2D 28 63 68 69 6C ld_b}+1)={-(chil
0000000000001E40 64 5F 62 2B 31 29 7D 29 22 0D 0A 20 20 20 20 20 d_b+1)})"��     
0000000000001E50 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72 5F 69        pointer_i
0000000000001E60 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 5B 27 nterpretations['
0000000000001E70 42 61 63 6B 27 5D 5B 27 4E 65 67 61 74 69 76 65 Back']['Negative
0000000000001E80 20 28 4C 65 61 66 3F 29 27 5D 20 2B 3D 20 31 0D  (Leaf?)'] += 1�
0000000000001E90 0A 20 20 20 20 20 20 20 20 20 20 20 20 69 66 20 �            if 
0000000000001EA0 63 68 69 6C 64 5F 66 20 3E 3D 20 30 3A 20 69 73 child_f >= 0: is
0000000000001EB0 5F 6C 65 61 66 20 3D 20 46 61 6C 73 65 20 23 20 _leaf = False # 
0000000000001EC0 49 66 20 66 72 6F 6E 74 20 69 73 20 6E 6F 6E 2D If front is non-
0000000000001ED0 6E 65 67 2C 20 6C 69 6B 65 6C 79 20 6E 6F 74 20 neg, likely not 
0000000000001EE0 6C 65 61 66 20 65 76 65 6E 20 69 66 20 62 61 63 leaf even if bac
0000000000001EF0 6B 20 69 73 20 6E 65 67 3F 20 28 44 65 70 65 6E k is neg? (Depen
0000000000001F00 64 73 20 6F 6E 20 66 6F 72 6D 61 74 29 0D 0A 20 ds on format)�� 
0000000000001F10 20 20 20 20 20 20 20 65 6C 69 66 20 63 68 69 6C        elif chil
0000000000001F20 64 5F 66 20 3D 3D 20 30 20 61 6E 64 20 63 68 69 d_f == 0 and chi
0000000000001F30 6C 64 5F 62 20 3D 3D 20 30 3A 0D 0A 20 20 20 20 ld_b == 0:��    
0000000000001F40 20 20 20 20 20 20 20 20 20 69 6E 74 65 72 70 72          interpr
0000000000001F50 65 74 61 74 69 6F 6E 5F 62 20 3D 20 22 5A 65 72 etation_b = "Zer
0000000000001F60 6F 20 28 4C 65 61 66 3F 29 22 0D 0A 20 20 20 20 o (Leaf?)"��    
0000000000001F70 20 20 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72          pointer
0000000000001F80 5F 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 _interpretations
0000000000001F90 5B 27 42 61 63 6B 27 5D 5B 27 5A 65 72 6F 20 28 ['Back']['Zero (
0000000000001FA0 4C 65 61 66 3F 29 27 5D 20 2B 3D 20 31 0D 0A 20 Leaf?)'] += 1�� 
0000000000001FB0 20 20 20 20 20 20 20 20 20 20 20 20 23 20 69 73             # is
0000000000001FC0 5F 6C 65 61 66 20 61 6C 72 65 61 64 79 20 73 65 _leaf already se
0000000000001FD0 74 20 54 72 75 65 0D 0A 20 20 20 20 20 20 20 20 t True��        
0000000000001FE0 65 6C 73 65 3A 20 23 20 50 6F 73 69 74 69 76 65 else: # Positive
0000000000001FF0 20 63 68 69 6C 64 5F 62 0D 0A 20 20 20 20 20 20  child_b��      
0000000000002000 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72 5F 69        pointer_i
0000000000002010 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 5B 27 nterpretations['
0000000000002020 42 61 63 6B 27 5D 5B 27 50 6F 73 69 74 69 76 65 Back']['Positive
0000000000002030 27 5D 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 '] += 1��       
0000000000002040 20 20 20 20 20 20 68 79 70 6F 74 68 65 73 65 73       hypotheses
0000000000002050 20 3D 20 5B 5D 0D 0A 20 20 20 20 20 20 20 20 20  = []��         
0000000000002060 20 20 20 20 69 66 20 63 68 69 6C 64 5F 62 20 25     if child_b %
0000000000002070 20 4E 4F 44 45 5F 53 49 5A 45 20 3D 3D 20 30 20  NODE_SIZE == 0 
0000000000002080 61 6E 64 20 30 20 3C 3D 20 63 68 69 6C 64 5F 62 and 0 <= child_b
0000000000002090 20 3C 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 3A 0D  < lump_length:�
00000000000020A0 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 �               
00000000000020B0 20 20 68 79 70 6F 74 68 65 73 65 73 2E 61 70 70   hypotheses.app
00000000000020C0 65 6E 64 28 66 22 42 79 74 65 20 4F 66 66 73 65 end(f"Byte Offse
00000000000020D0 74 20 28 2D 3E 20 4E 6F 64 65 20 7B 63 68 69 6C t (-> Node {chil
00000000000020E0 64 5F 62 20 2F 2F 20 4E 4F 44 45 5F 53 49 5A 45 d_b // NODE_SIZE
00000000000020F0 7D 3F 29 22 29 0D 0A 20 20 20 20 20 20 20 20 20 }?)")��         
0000000000002100 20 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72 5F         pointer_
0000000000002110 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 5B interpretations[
0000000000002120 27 42 61 63 6B 27 5D 5B 27 48 79 70 6F 74 68 65 'Back']['Hypothe
0000000000002130 73 69 73 3A 20 42 79 74 65 20 4F 66 66 73 65 74 sis: Byte Offset
0000000000002140 27 5D 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 '] += 1��       
0000000000002150 20 20 20 20 20 20 69 66 20 30 20 3C 3D 20 63 68       if 0 <= ch
0000000000002160 69 6C 64 5F 62 20 3C 20 6E 75 6D 5F 6E 6F 64 65 ild_b < num_node
0000000000002170 73 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 s:��            
0000000000002180 20 20 20 20 20 68 79 70 6F 74 68 65 73 65 73 2E      hypotheses.
0000000000002190 61 70 70 65 6E 64 28 66 22 4E 6F 64 65 20 49 6E append(f"Node In
00000000000021A0 64 65 78 3F 22 29 0D 0A 20 20 20 20 20 20 20 20 dex?")��        
00000000000021B0 20 20 20 20 20 20 20 20 20 70 6F 69 6E 74 65 72          pointer
00000000000021C0 5F 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 73 _interpretations
00000000000021D0 5B 27 42 61 63 6B 27 5D 5B 27 48 79 70 6F 74 68 ['Back']['Hypoth
00000000000021E0 65 73 69 73 3A 20 4E 6F 64 65 20 49 6E 64 65 78 esis: Node Index
00000000000021F0 27 5D 20 2B 3D 20 31 0D 0A 20 20 20 20 20 20 20 '] += 1��       
0000000000002200 20 20 20 20 20 20 69 6E 74 65 72 70 72 65 74 61       interpreta
0000000000002210 74 69 6F 6E 5F 62 20 3D 20 66 22 56 61 6C 75 65 tion_b = f"Value
0000000000002220 3D 7B 63 68 69 6C 64 5F 62 7D 2E 20 46 69 74 73 ={child_b}. Fits
0000000000002230 3A 20 7B 27 2C 20 27 2E 6A 6F 69 6E 28 68 79 70 : {', '.join(hyp
0000000000002240 6F 74 68 65 73 65 73 29 20 69 66 20 68 79 70 6F otheses) if hypo
0000000000002250 74 68 65 73 65 73 20 65 6C 73 65 20 27 4E 6F 6E theses else 'Non
0000000000002260 65 3F 27 7D 22 0D 0A 0D 0A 20 20 20 20 20 20 20 e?'}"����       
0000000000002270 20 69 66 20 63 68 69 6C 64 5F 66 20 3C 20 30 20  if child_f < 0 
0000000000002280 6F 72 20 63 68 69 6C 64 5F 62 20 3C 20 30 3A 20 or child_b < 0: 
0000000000002290 23 20 49 66 20 65 69 74 68 65 72 20 70 6F 69 6E # If either poin
00000000000022A0 74 65 72 20 69 73 20 6E 65 67 61 74 69 76 65 2C ter is negative,
00000000000022B0 20 63 6F 6E 73 69 64 65 72 20 69 74 20 70 6F 74  consider it pot
00000000000022C0 65 6E 74 69 61 6C 6C 79 20 70 6F 69 6E 74 73 20 entially points 
00000000000022D0 74 6F 20 6C 65 61 66 20 69 6E 66 6F 0D 0A 20 20 to leaf info��  
00000000000022E0 20 20 20 20 20 20 20 20 20 20 69 73 5F 6C 65 61           is_lea
00000000000022F0 66 20 3D 20 54 72 75 65 0D 0A 0D 0A 20 20 20 20 f = True����    
0000000000002300 20 20 20 20 69 66 20 69 73 5F 6C 65 61 66 3A 0D     if is_leaf:�
0000000000002310 0A 20 20 20 20 20 20 20 20 20 20 20 20 6C 65 61 �            lea
0000000000002320 66 5F 6E 6F 64 65 73 5F 69 6E 64 69 63 65 73 2E f_nodes_indices.
0000000000002330 61 70 70 65 6E 64 28 69 29 0D 0A 0D 0A 20 20 20 append(i)����   
0000000000002340 20 20 20 20 20 23 20 2D 2D 2D 20 52 65 70 6F 72      # --- Repor
0000000000002350 74 69 6E 67 20 28 4C 69 6D 69 74 65 64 20 44 65 ting (Limited De
0000000000002360 74 61 69 6C 29 20 2D 2D 2D 0D 0A 20 20 20 20 20 tail) ---��     
0000000000002370 20 20 20 73 68 6F 77 5F 64 65 74 61 69 6C 20 3D    show_detail =
0000000000002380 20 28 69 20 3C 20 4D 41 58 5F 4E 4F 44 45 53 5F  (i < MAX_NODES_
0000000000002390 54 4F 5F 44 45 54 41 49 4C 20 2F 2F 20 32 29 20 TO_DETAIL // 2) 
00000000000023A0 6F 72 20 28 69 20 3E 3D 20 6E 75 6D 5F 6E 6F 64 or (i >= num_nod
00000000000023B0 65 73 20 2D 20 4D 41 58 5F 4E 4F 44 45 53 5F 54 es - MAX_NODES_T
00000000000023C0 4F 5F 44 45 54 41 49 4C 20 2F 2F 20 32 29 0D 0A O_DETAIL // 2)��
00000000000023D0 0D 0A 20 20 20 20 20 20 20 20 69 66 20 73 68 6F ��        if sho
00000000000023E0 77 5F 64 65 74 61 69 6C 3A 0D 0A 20 20 20 20 20 w_detail:��     
00000000000023F0 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22 5C        print(f"\
0000000000002400 6E 2D 2D 2D 20 4E 6F 64 65 20 7B 69 7D 20 2D 2D n--- Node {i} --
0000000000002410 2D 7B 27 20 28 50 6F 74 65 6E 74 69 61 6C 20 4C -{' (Potential L
0000000000002420 45 41 46 29 27 20 69 66 20 69 73 5F 6C 65 61 66 EAF)' if is_leaf
0000000000002430 20 65 6C 73 65 20 27 27 7D 22 29 0D 0A 0D 0A 20  else ''}")���� 
0000000000002440 20 20 20 20 20 20 20 20 20 20 20 23 20 50 6C 61            # Pla
0000000000002450 6E 65 20 41 6E 61 6C 79 73 69 73 0D 0A 20 20 20 ne Analysis��   
0000000000002460 20 20 20 20 20 20 20 20 20 6E 78 2C 20 6E 79 2C          nx, ny,
0000000000002470 20 6E 7A 2C 20 64 20 3D 20 6E 6F 64 65 5B 27 70  nz, d = node['p
0000000000002480 6C 61 6E 65 5F 6E 78 27 5D 2C 20 6E 6F 64 65 5B lane_nx'], node[
0000000000002490 27 70 6C 61 6E 65 5F 6E 79 27 5D 2C 20 6E 6F 64 'plane_ny'], nod
00000000000024A0 65 5B 27 70 6C 61 6E 65 5F 6E 7A 27 5D 2C 20 6E e['plane_nz'], n
00000000000024B0 6F 64 65 5B 27 70 6C 61 6E 65 5F 64 27 5D 0D 0A ode['plane_d']��
00000000000024C0 20 20 20 20 20 20 20 20 20 20 20 20 74 72 79 3A             try:
00000000000024D0 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ��              
00000000000024E0 20 20 6E 6F 72 6D 61 6C 5F 6D 61 67 20 3D 20 6D   normal_mag = m
00000000000024F0 61 74 68 2E 73 71 72 74 28 6E 78 2A 6E 78 20 2B ath.sqrt(nx*nx +
0000000000002500 20 6E 79 2A 6E 79 20 2B 20 6E 7A 2A 6E 7A 29 0D  ny*ny + nz*nz)�
0000000000002510 0A 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 �               
0000000000002520 20 6E 6F 72 6D 5F 69 6E 66 6F 20 3D 20 66 22 4E  norm_info = f"N
0000000000002530 6F 72 6D 61 6C 20 4D 61 67 3D 7B 6E 6F 72 6D 61 ormal Mag={norma
0000000000002540 6C 5F 6D 61 67 3A 2E 33 66 7D 7B 27 20 28 4E 6F l_mag:.3f}{' (No
0000000000002550 72 6D 61 6C 69 7A 65 64 21 29 27 20 69 66 20 6D rmalized!)' if m
0000000000002560 61 74 68 2E 69 73 63 6C 6F 73 65 28 6E 6F 72 6D ath.isclose(norm
0000000000002570 61 6C 5F 6D 61 67 2C 20 31 2E 30 2C 20 61 62 73 al_mag, 1.0, abs
0000000000002580 5F 74 6F 6C 3D 31 65 2D 35 29 20 65 6C 73 65 20 _tol=1e-5) else 
0000000000002590 27 27 7D 22 0D 0A 20 20 20 20 20 20 20 20 20 20 ''}"��          
00000000000025A0 20 20 65 78 63 65 70 74 20 56 61 6C 75 65 45 72   except ValueEr
00000000000025B0 72 6F 72 3A 20 23 20 48 61 6E 64 6C 65 20 70 6F ror: # Handle po
00000000000025C0 74 65 6E 74 69 61 6C 20 6E 65 67 61 74 69 76 65 tential negative
00000000000025D0 20 76 61 6C 75 65 73 20 75 6E 64 65 72 20 73 71  values under sq
00000000000025E0 72 74 20 69 66 20 64 61 74 61 20 69 73 20 77 65 rt if data is we
00000000000025F0 69 72 64 0D 0A 20 20 20 20 20 20 20 20 20 20 20 ird��           
0000000000002600 20 20 20 20 20 20 6E 6F 72 6D 5F 69 6E 66 6F 20       norm_info 
0000000000002610 3D 20 22 4E 6F 72 6D 61 6C 20 4D 61 67 3D 45 52 = "Normal Mag=ER
0000000000002620 52 22 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 R"��            
0000000000002630 70 72 69 6E 74 28 66 22 20 20 50 6C 61 6E 65 20 print(f"  Plane 
0000000000002640 20 20 20 3A 20 4E 3D 28 7B 6E 78 3A 2B 2E 33 66    : N=({nx:+.3f
0000000000002650 7D 2C 20 7B 6E 79 3A 2B 2E 33 66 7D 2C 20 7B 6E }, {ny:+.3f}, {n
0000000000002660 7A 3A 2B 2E 33 66 7D 29 2C 20 44 3D 7B 64 3A 2B z:+.3f}), D={d:+
0000000000002670 2E 33 66 7D 20 7C 20 7B 6E 6F 72 6D 5F 69 6E 66 .3f} | {norm_inf
0000000000002680 6F 7D 22 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 o}")����        
0000000000002690 20 20 20 20 23 20 42 42 6F 78 2F 54 65 78 20 46     # BBox/Tex F
00000000000026A0 6C 6F 61 74 73 0D 0A 20 20 20 20 20 20 20 20 20 loats��         
00000000000026B0 20 20 20 62 62 74 78 20 3D 20 5B 6E 6F 64 65 5B    bbtx = [node[
00000000000026C0 27 62 62 6F 78 5F 74 78 30 27 5D 2C 20 6E 6F 64 'bbox_tx0'], nod
00000000000026D0 65 5B 27 62 62 6F 78 5F 74 78 31 27 5D 2C 20 6E e['bbox_tx1'], n
00000000000026E0 6F 64 65 5B 27 62 62 6F 78 5F 74 78 32 27 5D 2C ode['bbox_tx2'],
00000000000026F0 20 6E 6F 64 65 5B 27 62 62 6F 78 5F 74 78 33 27  node['bbox_tx3'
0000000000002700 5D 5D 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 ]]��            
0000000000002710 70 72 69 6E 74 28 66 22 20 20 42 42 6F 78 2F 54 print(f"  BBox/T
0000000000002720 65 78 3F 3A 20 28 7B 62 62 74 78 5B 30 5D 3A 2E ex?: ({bbtx[0]:.
0000000000002730 33 66 7D 2C 20 7B 62 62 74 78 5B 31 5D 3A 2E 33 3f}, {bbtx[1]:.3
0000000000002740 66 7D 2C 20 7B 62 62 74 78 5B 32 5D 3A 2E 33 66 f}, {bbtx[2]:.3f
0000000000002750 7D 2C 20 7B 62 62 74 78 5B 33 5D 3A 2E 33 66 7D }, {bbtx[3]:.3f}
0000000000002760 29 22 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 20 )")����         
0000000000002770 20 20 20 23 20 43 68 69 6C 64 72 65 6E 20 50 6F    # Children Po
0000000000002780 69 6E 74 65 72 73 0D 0A 20 20 20 20 20 20 20 20 inters��        
0000000000002790 20 20 20 20 70 72 69 6E 74 28 66 22 20 20 43 68     print(f"  Ch
00000000000027A0 69 6C 64 20 46 20 20 3A 20 7B 69 6E 74 65 72 70 ild F  : {interp
00000000000027B0 72 65 74 61 74 69 6F 6E 5F 66 7D 22 29 0D 0A 20 retation_f}")�� 
00000000000027C0 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
00000000000027D0 28 66 22 20 20 43 68 69 6C 64 20 42 20 20 3A 20 (f"  Child B  : 
00000000000027E0 7B 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 5F {interpretation_
00000000000027F0 62 7D 22 29 0D 0A 0D 0A 20 20 20 20 20 20 20 20 b}")����        
0000000000002800 20 20 20 20 23 20 49 6E 74 65 67 65 72 73 0D 0A     # Integers��
0000000000002810 20 20 20 20 20 20 20 20 20 20 20 20 66 6C 61 67             flag
0000000000002820 73 20 3D 20 6E 6F 64 65 5B 27 66 6C 61 67 73 27 s = node['flags'
0000000000002830 5D 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 69 ]��            i
0000000000002840 6E 74 73 20 3D 20 5B 6E 6F 64 65 5B 27 75 6E 6B nts = [node['unk
0000000000002850 31 27 5D 2C 20 6E 6F 64 65 5B 27 75 6E 6B 32 27 1'], node['unk2'
0000000000002860 5D 2C 20 6E 6F 64 65 5B 27 75 6E 6B 33 27 5D 2C ], node['unk3'],
0000000000002870 20 6E 6F 64 65 5B 27 75 6E 6B 34 27 5D 2C 20 6E  node['unk4'], n
0000000000002880 6F 64 65 5B 27 75 6E 6B 35 27 5D 5D 0D 0A 20 20 ode['unk5']]��  
0000000000002890 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28           print(
00000000000028A0 66 22 20 20 49 6E 74 73 20 20 20 20 20 3A 20 46 f"  Ints     : F
00000000000028B0 6C 61 67 73 3D 7B 66 6C 61 67 73 7D 2C 20 55 6E lags={flags}, Un
00000000000028C0 6B 31 2D 35 3D 7B 69 6E 74 73 7D 22 29 0D 0A 0D k1-5={ints}")���
00000000000028D0 0A 0D 0A 20 20 20 20 23 20 2D 2D 2D 20 53 75 6D ���    # --- Sum
00000000000028E0 6D 61 72 69 7A 65 20 50 6F 69 6E 74 65 72 20 41 marize Pointer A
00000000000028F0 6E 61 6C 79 73 69 73 20 2D 2D 2D 0D 0A 20 20 20 nalysis ---��   
0000000000002900 20 70 72 69 6E 74 28 22 5C 6E 2D 2D 2D 20 43 68  print("\n--- Ch
0000000000002910 69 6C 64 20 50 6F 69 6E 74 65 72 20 41 6E 61 6C ild Pointer Anal
0000000000002920 79 73 69 73 20 53 75 6D 6D 61 72 79 20 2D 2D 2D ysis Summary ---
0000000000002930 22 29 0D 0A 20 20 20 20 66 6F 72 20 70 6F 69 6E ")��    for poin
0000000000002940 74 65 72 5F 74 79 70 65 20 69 6E 20 5B 27 46 72 ter_type in ['Fr
0000000000002950 6F 6E 74 27 2C 20 27 42 61 63 6B 27 5D 3A 0D 0A ont', 'Back']:��
0000000000002960 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22         print(f"
0000000000002970 5B 2A 5D 20 7B 70 6F 69 6E 74 65 72 5F 74 79 70 [*] {pointer_typ
0000000000002980 65 7D 20 50 6F 69 6E 74 65 72 73 3A 22 29 0D 0A e} Pointers:")��
0000000000002990 20 20 20 20 20 20 20 20 69 66 20 6E 6F 74 20 70         if not p
00000000000029A0 6F 69 6E 74 65 72 5F 69 6E 74 65 72 70 72 65 74 ointer_interpret
00000000000029B0 61 74 69 6F 6E 73 5B 70 6F 69 6E 74 65 72 5F 74 ations[pointer_t
00000000000029C0 79 70 65 5D 3A 0D 0A 20 20 20 20 20 20 20 20 20 ype]:��         
00000000000029D0 20 20 20 70 72 69 6E 74 28 22 20 20 20 20 28 4E    print("    (N
00000000000029E0 6F 6E 65 20 66 6F 75 6E 64 20 6F 72 20 61 6E 61 one found or ana
00000000000029F0 6C 79 7A 65 64 29 22 29 0D 0A 20 20 20 20 20 20 lyzed)")��      
0000000000002A00 20 20 20 20 20 20 63 6F 6E 74 69 6E 75 65 0D 0A       continue��
0000000000002A10 20 20 20 20 20 20 20 20 66 6F 72 20 63 61 74 65         for cate
0000000000002A20 67 6F 72 79 2C 20 63 6F 75 6E 74 20 69 6E 20 70 gory, count in p
0000000000002A30 6F 69 6E 74 65 72 5F 69 6E 74 65 72 70 72 65 74 ointer_interpret
0000000000002A40 61 74 69 6F 6E 73 5B 70 6F 69 6E 74 65 72 5F 74 ations[pointer_t
0000000000002A50 79 70 65 5D 2E 69 74 65 6D 73 28 29 3A 0D 0A 20 ype].items():�� 
0000000000002A60 20 20 20 20 20 20 20 20 20 20 20 20 69 66 20 6E             if n
0000000000002A70 6F 74 20 63 61 74 65 67 6F 72 79 2E 73 74 61 72 ot category.star
0000000000002A80 74 73 77 69 74 68 28 27 48 79 70 6F 74 68 65 73 tswith('Hypothes
0000000000002A90 69 73 3A 27 29 3A 0D 0A 20 20 20 20 20 20 20 20 is:'):��        
0000000000002AA0 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
0000000000002AB0 22 20 20 20 20 2D 20 54 79 70 65 20 27 7B 63 61 "    - Type '{ca
0000000000002AC0 74 65 67 6F 72 79 7D 27 3A 20 7B 63 6F 75 6E 74 tegory}': {count
0000000000002AD0 7D 20 6F 63 63 75 72 72 65 6E 63 65 73 22 29 0D } occurrences")�
0000000000002AE0 0A 20 20 20 20 20 20 20 20 23 20 50 72 69 6E 74 �        # Print
0000000000002AF0 20 68 79 70 6F 74 68 65 73 69 73 20 63 6F 75 6E  hypothesis coun
0000000000002B00 74 73 20 73 65 70 61 72 61 74 65 6C 79 0D 0A 20 ts separately�� 
0000000000002B10 20 20 20 20 20 20 20 68 79 70 5F 63 6F 75 6E 74        hyp_count
0000000000002B20 73 20 3D 20 7B 6B 2E 72 65 70 6C 61 63 65 28 27 s = {k.replace('
0000000000002B30 48 79 70 6F 74 68 65 73 69 73 3A 20 27 2C 27 27 Hypothesis: ',''
0000000000002B40 29 3A 76 20 66 6F 72 20 6B 2C 76 20 69 6E 20 70 ):v for k,v in p
0000000000002B50 6F 69 6E 74 65 72 5F 69 6E 74 65 72 70 72 65 74 ointer_interpret
0000000000002B60 61 74 69 6F 6E 73 5B 70 6F 69 6E 74 65 72 5F 74 ations[pointer_t
0000000000002B70 79 70 65 5D 2E 69 74 65 6D 73 28 29 20 69 66 20 ype].items() if 
0000000000002B80 6B 2E 73 74 61 72 74 73 77 69 74 68 28 27 48 79 k.startswith('Hy
0000000000002B90 70 6F 74 68 65 73 69 73 3A 27 29 7D 0D 0A 20 20 pothesis:')}��  
0000000000002BA0 20 20 20 20 20 20 69 66 20 68 79 70 5F 63 6F 75       if hyp_cou
0000000000002BB0 6E 74 73 3A 0D 0A 20 20 20 20 20 20 20 20 20 20 nts:��          
0000000000002BC0 20 20 70 72 69 6E 74 28 66 22 20 20 20 20 2D 20   print(f"    - 
0000000000002BD0 50 6F 73 69 74 69 76 65 20 50 6F 69 6E 74 65 72 Positive Pointer
0000000000002BE0 20 48 79 70 6F 74 68 65 73 69 73 20 43 6F 75 6E  Hypothesis Coun
0000000000002BF0 74 73 3A 22 29 0D 0A 20 20 20 20 20 20 20 20 20 ts:")��         
0000000000002C00 20 20 20 66 6F 72 20 68 79 70 2C 20 63 6F 75 6E    for hyp, coun
0000000000002C10 74 20 69 6E 20 68 79 70 5F 63 6F 75 6E 74 73 2E t in hyp_counts.
0000000000002C20 69 74 65 6D 73 28 29 3A 0D 0A 20 20 20 20 20 20 items():��      
0000000000002C30 20 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74            print
0000000000002C40 28 66 22 20 20 20 20 20 20 20 20 2D 20 46 69 74 (f"        - Fit
0000000000002C50 73 20 27 7B 68 79 70 7D 27 3A 20 7B 63 6F 75 6E s '{hyp}': {coun
0000000000002C60 74 7D 20 6F 63 63 75 72 72 65 6E 63 65 73 22 29 t} occurrences")
0000000000002C70 0D 0A 0D 0A 0D 0A 20 20 20 20 23 20 2D 2D 2D 20 ������    # --- 
0000000000002C80 4C 65 61 66 20 4E 6F 64 65 20 41 6E 61 6C 79 73 Leaf Node Analys
0000000000002C90 69 73 20 2D 2D 2D 0D 0A 20 20 20 20 70 72 69 6E is ---��    prin
0000000000002CA0 74 28 22 5C 6E 2D 2D 2D 20 4C 65 61 66 20 4E 6F t("\n--- Leaf No
0000000000002CB0 64 65 20 41 6E 61 6C 79 73 69 73 20 2D 2D 2D 22 de Analysis ---"
0000000000002CC0 29 0D 0A 20 20 20 20 70 72 69 6E 74 28 66 22 5B )��    print(f"[
0000000000002CD0 2A 5D 20 46 6F 75 6E 64 20 7B 6C 65 6E 28 6C 65 *] Found {len(le
0000000000002CE0 61 66 5F 6E 6F 64 65 73 5F 69 6E 64 69 63 65 73 af_nodes_indices
0000000000002CF0 29 7D 20 70 6F 74 65 6E 74 69 61 6C 20 6C 65 61 )} potential lea
0000000000002D00 66 20 6E 6F 64 65 73 20 28 43 68 69 6C 64 46 3C f nodes (ChildF<
0000000000002D10 3D 30 20 6F 72 20 43 68 69 6C 64 42 3C 3D 30 29 =0 or ChildB<=0)
0000000000002D20 2E 22 29 0D 0A 20 20 20 20 69 66 20 6C 65 61 66 .")��    if leaf
0000000000002D30 5F 6E 6F 64 65 73 5F 69 6E 64 69 63 65 73 3A 0D _nodes_indices:�
0000000000002D40 0A 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 �        print(f
0000000000002D50 22 5B 2A 5D 20 53 68 6F 77 69 6E 67 20 49 6E 74 "[*] Showing Int
0000000000002D60 65 67 65 72 20 66 69 65 6C 64 73 20 66 6F 72 20 eger fields for 
0000000000002D70 66 69 72 73 74 20 7B 4D 41 58 5F 4C 45 41 56 45 first {MAX_LEAVE
0000000000002D80 53 5F 54 4F 5F 44 45 54 41 49 4C 7D 20 70 6F 74 S_TO_DETAIL} pot
0000000000002D90 65 6E 74 69 61 6C 20 6C 65 61 76 65 73 3A 22 29 ential leaves:")
0000000000002DA0 0D 0A 20 20 20 20 20 20 20 20 66 6F 72 20 69 64 ��        for id
0000000000002DB0 78 20 69 6E 20 6C 65 61 66 5F 6E 6F 64 65 73 5F x in leaf_nodes_
0000000000002DC0 69 6E 64 69 63 65 73 5B 3A 4D 41 58 5F 4C 45 41 indices[:MAX_LEA
0000000000002DD0 56 45 53 5F 54 4F 5F 44 45 54 41 49 4C 5D 3A 0D VES_TO_DETAIL]:�
0000000000002DE0 0A 20 20 20 20 20 20 20 20 20 20 20 20 6C 65 61 �            lea
0000000000002DF0 66 5F 6E 6F 64 65 20 3D 20 6E 6F 64 65 73 5B 69 f_node = nodes[i
0000000000002E00 64 78 5D 0D 0A 20 20 20 20 20 20 20 20 20 20 20 dx]��           
0000000000002E10 20 66 6C 61 67 73 20 3D 20 6C 65 61 66 5F 6E 6F  flags = leaf_no
0000000000002E20 64 65 5B 27 66 6C 61 67 73 27 5D 0D 0A 20 20 20 de['flags']��   
0000000000002E30 20 20 20 20 20 20 20 20 20 63 68 69 6C 64 5F 66          child_f
0000000000002E40 20 3D 20 6C 65 61 66 5F 6E 6F 64 65 5B 27 63 68  = leaf_node['ch
0000000000002E50 69 6C 64 5F 66 27 5D 20 23 20 53 68 6F 77 20 63 ild_f'] # Show c
0000000000002E60 68 69 6C 64 20 76 61 6C 75 65 73 20 66 6F 72 20 hild values for 
0000000000002E70 63 6F 6E 74 65 78 74 0D 0A 20 20 20 20 20 20 20 context��       
0000000000002E80 20 20 20 20 20 63 68 69 6C 64 5F 62 20 3D 20 6C      child_b = l
0000000000002E90 65 61 66 5F 6E 6F 64 65 5B 27 63 68 69 6C 64 5F eaf_node['child_
0000000000002EA0 62 27 5D 0D 0A 20 20 20 20 20 20 20 20 20 20 20 b']��           
0000000000002EB0 20 69 6E 74 73 20 3D 20 5B 6C 65 61 66 5F 6E 6F  ints = [leaf_no
0000000000002EC0 64 65 5B 27 75 6E 6B 31 27 5D 2C 20 6C 65 61 66 de['unk1'], leaf
0000000000002ED0 5F 6E 6F 64 65 5B 27 75 6E 6B 32 27 5D 2C 20 6C _node['unk2'], l
0000000000002EE0 65 61 66 5F 6E 6F 64 65 5B 27 75 6E 6B 33 27 5D eaf_node['unk3']
0000000000002EF0 2C 20 6C 65 61 66 5F 6E 6F 64 65 5B 27 75 6E 6B , leaf_node['unk
0000000000002F00 34 27 5D 2C 20 6C 65 61 66 5F 6E 6F 64 65 5B 27 4'], leaf_node['
0000000000002F10 75 6E 6B 35 27 5D 5D 0D 0A 20 20 20 20 20 20 20 unk5']]��       
0000000000002F20 20 20 20 20 20 70 72 69 6E 74 28 66 22 20 20 2D      print(f"  -
0000000000002F30 20 4C 65 61 66 20 4E 6F 64 65 20 7B 69 64 78 3A  Leaf Node {idx:
0000000000002F40 3C 34 7D 3A 20 43 68 69 6C 64 72 65 6E 3D 28 7B <4}: Children=({
0000000000002F50 63 68 69 6C 64 5F 66 7D 2C 20 7B 63 68 69 6C 64 child_f}, {child
0000000000002F60 5F 62 7D 29 2C 20 46 6C 61 67 73 3D 7B 66 6C 61 _b}), Flags={fla
0000000000002F70 67 73 7D 2C 20 55 6E 6B 31 2D 35 3D 7B 69 6E 74 gs}, Unk1-5={int
0000000000002F80 73 7D 22 29 0D 0A 20 20 20 20 20 20 20 20 69 66 s}")��        if
0000000000002F90 20 6C 65 6E 28 6C 65 61 66 5F 6E 6F 64 65 73 5F  len(leaf_nodes_
0000000000002FA0 69 6E 64 69 63 65 73 29 20 3E 20 4D 41 58 5F 4C indices) > MAX_L
0000000000002FB0 45 41 56 45 53 5F 54 4F 5F 44 45 54 41 49 4C 3A EAVES_TO_DETAIL:
0000000000002FC0 0D 0A 20 20 20 20 20 20 20 20 20 20 20 20 70 72 ��            pr
0000000000002FD0 69 6E 74 28 66 22 20 20 2E 2E 2E 20 28 7B 6C 65 int(f"  ... ({le
0000000000002FE0 6E 28 6C 65 61 66 5F 6E 6F 64 65 73 5F 69 6E 64 n(leaf_nodes_ind
0000000000002FF0 69 63 65 73 29 20 2D 20 4D 41 58 5F 4C 45 41 56 ices) - MAX_LEAV
0000000000003000 45 53 5F 54 4F 5F 44 45 54 41 49 4C 7D 20 6D 6F ES_TO_DETAIL} mo
0000000000003010 72 65 20 70 6F 74 65 6E 74 69 61 6C 20 6C 65 61 re potential lea
0000000000003020 76 65 73 20 6E 6F 74 20 64 65 74 61 69 6C 65 64 ves not detailed
0000000000003030 29 22 29 0D 0A 0D 0A 20 20 20 20 23 20 2D 2D 2D )")����    # ---
0000000000003040 20 54 72 61 69 6C 69 6E 67 20 44 61 74 61 20 2D  Trailing Data -
0000000000003050 2D 2D 0D 0A 20 20 20 20 69 66 20 74 72 61 69 6C --��    if trail
0000000000003060 69 6E 67 5F 64 61 74 61 3A 0D 0A 20 20 20 20 20 ing_data:��     
0000000000003070 20 20 20 70 72 69 6E 74 28 22 5C 6E 2D 2D 2D 20    print("\n--- 
0000000000003080 54 72 61 69 6C 69 6E 67 20 44 61 74 61 20 2D 2D Trailing Data --
0000000000003090 2D 22 29 0D 0A 20 20 20 20 20 20 20 20 70 72 69 -")��        pri
00000000000030A0 6E 74 28 66 22 5B 2A 5D 20 46 6F 75 6E 64 20 7B nt(f"[*] Found {
00000000000030B0 6C 65 6E 28 74 72 61 69 6C 69 6E 67 5F 64 61 74 len(trailing_dat
00000000000030C0 61 29 7D 20 62 79 74 65 73 20 61 66 74 65 72 20 a)} bytes after 
00000000000030D0 74 68 65 20 6C 61 73 74 20 66 75 6C 6C 20 6E 6F the last full no
00000000000030E0 64 65 20 69 6E 20 4C 75 6D 70 20 7B 54 41 52 47 de in Lump {TARG
00000000000030F0 45 54 5F 4C 55 4D 50 5F 49 44 7D 2E 22 29 0D 0A ET_LUMP_ID}.")��
0000000000003100 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66 22         print(f"
0000000000003110 20 20 48 65 78 3A 20 7B 74 72 61 69 6C 69 6E 67   Hex: {trailing
0000000000003120 5F 64 61 74 61 2E 68 65 78 28 29 7D 22 29 0D 0A _data.hex()}")��
0000000000003130 0D 0A 0D 0A 20 20 20 20 23 20 2D 2D 2D 20 4F 70 ����    # --- Op
0000000000003140 74 69 6F 6E 61 6C 3A 20 54 72 65 65 20 54 72 61 tional: Tree Tra
0000000000003150 76 65 72 73 61 6C 20 2D 2D 2D 0D 0A 20 20 20 20 versal ---��    
0000000000003160 23 20 70 72 69 6E 74 28 22 5C 6E 2D 2D 2D 20 42 # print("\n--- B
0000000000003170 61 73 69 63 20 54 72 65 65 20 54 72 61 76 65 72 asic Tree Traver
0000000000003180 73 61 6C 20 28 66 72 6F 6D 20 4E 6F 64 65 20 30 sal (from Node 0
0000000000003190 29 20 2D 2D 2D 22 29 0D 0A 20 20 20 20 23 20 74 ) ---")��    # t
00000000000031A0 72 61 76 65 72 73 65 5F 62 73 70 5F 74 72 65 65 raverse_bsp_tree
00000000000031B0 28 6E 6F 64 65 73 2C 20 30 2C 20 6C 75 6D 70 5F (nodes, 0, lump_
00000000000031C0 6F 66 66 73 65 74 2C 20 6E 75 6D 5F 6E 6F 64 65 offset, num_node
00000000000031D0 73 2C 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 29 20 s, lump_length) 
00000000000031E0 23 20 43 61 6C 6C 20 74 72 61 76 65 72 73 61 6C # Call traversal
00000000000031F0 20 69 66 20 69 6D 70 6C 65 6D 65 6E 74 65 64 0D  if implemented�
0000000000003200 0A 0D 0A 0D 0A 23 20 2D 2D 2D 20 28 4F 70 74 69 �����# --- (Opti
0000000000003210 6F 6E 61 6C 29 20 54 72 65 65 20 54 72 61 76 65 onal) Tree Trave
0000000000003220 72 73 61 6C 20 46 75 6E 63 74 69 6F 6E 20 2D 2D rsal Function --
0000000000003230 2D 0D 0A 23 20 50 6C 61 63 65 68 6F 6C 64 65 72 -��# Placeholder
0000000000003240 20 2D 20 72 65 71 75 69 72 65 73 20 73 6F 6C 69  - requires soli
0000000000003250 64 20 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E d interpretation
0000000000003260 20 6F 66 20 63 68 69 6C 64 20 70 6F 69 6E 74 65  of child pointe
0000000000003270 72 73 20 66 69 72 73 74 0D 0A 23 20 64 65 66 20 rs first��# def 
0000000000003280 74 72 61 76 65 72 73 65 5F 62 73 70 5F 74 72 65 traverse_bsp_tre
0000000000003290 65 28 6E 6F 64 65 73 2C 20 6E 6F 64 65 5F 69 6E e(nodes, node_in
00000000000032A0 64 65 78 2C 20 6C 75 6D 70 5F 73 74 61 72 74 5F dex, lump_start_
00000000000032B0 6F 66 66 73 65 74 2C 20 6E 75 6D 5F 6E 6F 64 65 offset, num_node
00000000000032C0 73 2C 20 6C 75 6D 70 5F 6C 65 6E 67 74 68 2C 20 s, lump_length, 
00000000000032D0 76 69 73 69 74 65 64 3D 4E 6F 6E 65 2C 20 69 6E visited=None, in
00000000000032E0 64 65 6E 74 3D 22 22 2C 20 6D 61 78 5F 64 65 70 dent="", max_dep
00000000000032F0 74 68 3D 31 30 29 3A 0D 0A 23 20 20 20 20 20 69 th=10):��#     i
0000000000003300 66 20 76 69 73 69 74 65 64 20 69 73 20 4E 6F 6E f visited is Non
0000000000003310 65 3A 20 76 69 73 69 74 65 64 20 3D 20 73 65 74 e: visited = set
0000000000003320 28 29 0D 0A 23 20 20 20 20 20 69 66 20 6E 6F 64 ()��#     if nod
0000000000003330 65 5F 69 6E 64 65 78 20 69 6E 20 76 69 73 69 74 e_index in visit
0000000000003340 65 64 20 6F 72 20 6C 65 6E 28 76 69 73 69 74 65 ed or len(visite
0000000000003350 64 29 20 3E 20 6E 75 6D 5F 6E 6F 64 65 73 20 2A d) > num_nodes *
0000000000003360 20 32 20 6F 72 20 6D 61 78 5F 64 65 70 74 68 20  2 or max_depth 
0000000000003370 3C 3D 20 30 3A 20 23 20 42 61 73 69 63 20 63 79 <= 0: # Basic cy
0000000000003380 63 6C 65 2F 6C 69 6D 69 74 20 63 68 65 63 6B 73 cle/limit checks
0000000000003390 0D 0A 23 20 20 20 20 20 20 20 20 20 70 72 69 6E ��#         prin
00000000000033A0 74 28 66 22 7B 69 6E 64 65 6E 74 7D 5B 21 5D 20 t(f"{indent}[!] 
00000000000033B0 54 72 61 76 65 72 73 61 6C 20 6C 69 6D 69 74 20 Traversal limit 
00000000000033C0 72 65 61 63 68 65 64 20 6F 72 20 63 79 63 6C 65 reached or cycle
00000000000033D0 20 64 65 74 65 63 74 65 64 20 61 74 20 4E 6F 64  detected at Nod
00000000000033E0 65 20 7B 6E 6F 64 65 5F 69 6E 64 65 78 7D 22 29 e {node_index}")
00000000000033F0 0D 0A 23 20 20 20 20 20 20 20 20 20 72 65 74 75 ��#         retu
0000000000003400 72 6E 0D 0A 23 20 20 20 20 20 69 66 20 6E 6F 74 rn��#     if not
0000000000003410 20 28 30 20 3C 3D 20 6E 6F 64 65 5F 69 6E 64 65  (0 <= node_inde
0000000000003420 78 20 3C 20 6E 75 6D 5F 6E 6F 64 65 73 29 3A 0D x < num_nodes):�
0000000000003430 0A 23 20 20 20 20 20 20 20 20 20 20 70 72 69 6E �#          prin
0000000000003440 74 28 66 22 7B 69 6E 64 65 6E 74 7D 5B 21 5D 20 t(f"{indent}[!] 
0000000000003450 49 6E 76 61 6C 69 64 20 6E 6F 64 65 20 69 6E 64 Invalid node ind
0000000000003460 65 78 3A 20 7B 6E 6F 64 65 5F 69 6E 64 65 78 7D ex: {node_index}
0000000000003470 22 29 0D 0A 23 20 20 20 20 20 20 20 20 20 20 72 ")��#          r
0000000000003480 65 74 75 72 6E 0D 0A 0D 0A 23 20 20 20 20 20 76 eturn����#     v
0000000000003490 69 73 69 74 65 64 2E 61 64 64 28 6E 6F 64 65 5F isited.add(node_
00000000000034A0 69 6E 64 65 78 29 0D 0A 23 20 20 20 20 20 6E 6F index)��#     no
00000000000034B0 64 65 20 3D 20 6E 6F 64 65 73 5B 6E 6F 64 65 5F de = nodes[node_
00000000000034C0 69 6E 64 65 78 5D 0D 0A 23 20 20 20 20 20 70 72 index]��#     pr
00000000000034D0 69 6E 74 28 66 22 7B 69 6E 64 65 6E 74 7D 4E 6F int(f"{indent}No
00000000000034E0 64 65 20 7B 6E 6F 64 65 5F 69 6E 64 65 78 7D 22 de {node_index}"
00000000000034F0 29 0D 0A 0D 0A 23 20 20 20 20 20 23 20 46 72 6F )����#     # Fro
0000000000003500 6E 74 20 43 68 69 6C 64 0D 0A 23 20 20 20 20 20 nt Child��#     
0000000000003510 63 68 69 6C 64 5F 66 20 3D 20 6E 6F 64 65 5B 27 child_f = node['
0000000000003520 63 68 69 6C 64 5F 66 27 5D 0D 0A 23 20 20 20 20 child_f']��#    
0000000000003530 20 70 72 69 6E 74 28 66 22 7B 69 6E 64 65 6E 74  print(f"{indent
0000000000003540 7D 20 20 46 72 6F 6E 74 3A 20 7B 63 68 69 6C 64 }  Front: {child
0000000000003550 5F 66 7D 22 2C 20 65 6E 64 3D 22 22 29 0D 0A 23 _f}", end="")��#
0000000000003560 20 20 20 20 20 69 66 20 63 68 69 6C 64 5F 66 20      if child_f 
0000000000003570 3C 20 30 3A 0D 0A 23 20 20 20 20 20 20 20 20 20 < 0:��#         
0000000000003580 70 72 69 6E 74 28 66 22 20 2D 3E 20 4C 45 41 46 print(f" -> LEAF
0000000000003590 20 28 7E 7B 63 68 69 6C 64 5F 66 7D 3D 7B 68 65  (~{child_f}={he
00000000000035A0 78 28 7E 63 68 69 6C 64 5F 66 29 7D 29 22 29 0D x(~child_f)})")�
00000000000035B0 0A 23 20 20 20 20 20 65 6C 69 66 20 63 68 69 6C �#     elif chil
00000000000035C0 64 5F 66 20 3D 3D 20 30 20 61 6E 64 20 6E 6F 64 d_f == 0 and nod
00000000000035D0 65 5B 27 63 68 69 6C 64 5F 62 27 5D 20 3D 3D 20 e['child_b'] == 
00000000000035E0 30 3A 0D 0A 23 20 20 20 20 20 20 20 20 20 20 70 0:��#          p
00000000000035F0 72 69 6E 74 28 22 20 2D 3E 20 4C 45 41 46 20 28 rint(" -> LEAF (
0000000000003600 5A 65 72 6F 29 22 29 0D 0A 23 20 20 20 20 20 23 Zero)")��#     #
0000000000003610 20 2D 2D 2D 20 21 21 21 20 41 64 64 20 6C 6F 67  --- !!! Add log
0000000000003620 69 63 20 68 65 72 65 20 62 61 73 65 64 20 6F 6E ic here based on
0000000000003630 20 63 68 6F 73 65 6E 20 70 6F 69 6E 74 65 72 20  chosen pointer 
0000000000003640 69 6E 74 65 72 70 72 65 74 61 74 69 6F 6E 20 21 interpretation !
0000000000003650 21 21 20 2D 2D 2D 0D 0A 23 20 20 20 20 20 23 20 !! ---��#     # 
0000000000003660 45 78 61 6D 70 6C 65 20 69 66 20 42 79 74 65 20 Example if Byte 
0000000000003670 4F 66 66 73 65 74 3A 0D 0A 23 20 20 20 20 20 65 Offset:��#     e
0000000000003680 6C 69 66 20 63 68 69 6C 64 5F 66 20 25 20 4E 4F lif child_f % NO
0000000000003690 44 45 5F 53 49 5A 45 20 3D 3D 20 30 20 61 6E 64 DE_SIZE == 0 and
00000000000036A0 20 30 20 3C 3D 20 63 68 69 6C 64 5F 66 20 3C 20  0 <= child_f < 
00000000000036B0 6C 75 6D 70 5F 6C 65 6E 67 74 68 3A 0D 0A 23 20 lump_length:��# 
00000000000036C0 20 20 20 20 20 20 20 20 20 6E 65 78 74 5F 69 6E          next_in
00000000000036D0 64 65 78 5F 66 20 3D 20 63 68 69 6C 64 5F 66 20 dex_f = child_f 
00000000000036E0 2F 2F 20 4E 4F 44 45 5F 53 49 5A 45 0D 0A 23 20 // NODE_SIZE��# 
00000000000036F0 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 66          print(f
0000000000003700 22 20 2D 3E 20 4E 6F 64 65 20 7B 6E 65 78 74 5F " -> Node {next_
0000000000003710 69 6E 64 65 78 5F 66 7D 22 29 0D 0A 23 20 20 20 index_f}")��#   
0000000000003720 20 20 20 20 20 20 20 74 72 61 76 65 72 73 65 5F        traverse_
0000000000003730 62 73 70 5F 74 72 65 65 28 6E 6F 64 65 73 2C 20 bsp_tree(nodes, 
0000000000003740 6E 65 78 74 5F 69 6E 64 65 78 5F 66 2C 20 6C 75 next_index_f, lu
0000000000003750 6D 70 5F 73 74 61 72 74 5F 6F 66 66 73 65 74 2C mp_start_offset,
0000000000003760 20 6E 75 6D 5F 6E 6F 64 65 73 2C 20 6C 75 6D 70  num_nodes, lump
0000000000003770 5F 6C 65 6E 67 74 68 2C 20 76 69 73 69 74 65 64 _length, visited
0000000000003780 2C 20 69 6E 64 65 6E 74 20 2B 20 22 20 20 20 20 , indent + "    
0000000000003790 22 2C 20 6D 61 78 5F 64 65 70 74 68 20 2D 20 31 ", max_depth - 1
00000000000037A0 29 0D 0A 23 20 20 20 20 20 65 6C 73 65 3A 0D 0A )��#     else:��
00000000000037B0 23 20 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 #          print
00000000000037C0 28 22 20 2D 3E 20 3F 20 28 55 6E 6B 6E 6F 77 6E (" -> ? (Unknown
00000000000037D0 2F 49 6E 76 61 6C 69 64 29 22 29 0D 0A 0D 0A 0D /Invalid)")�����
00000000000037E0 0A 23 20 20 20 20 20 23 20 42 61 63 6B 20 43 68 �#     # Back Ch
00000000000037F0 69 6C 64 20 28 73 69 6D 69 6C 61 72 20 6C 6F 67 ild (similar log
0000000000003800 69 63 29 0D 0A 23 20 20 20 20 20 63 68 69 6C 64 ic)��#     child
0000000000003810 5F 62 20 3D 20 6E 6F 64 65 5B 27 63 68 69 6C 64 _b = node['child
0000000000003820 5F 62 27 5D 0D 0A 23 20 20 20 20 20 70 72 69 6E _b']��#     prin
0000000000003830 74 28 66 22 7B 69 6E 64 65 6E 74 7D 20 20 42 61 t(f"{indent}  Ba
0000000000003840 63 6B 20 3A 20 7B 63 68 69 6C 64 5F 62 7D 22 2C ck : {child_b}",
0000000000003850 20 65 6E 64 3D 22 22 29 0D 0A 23 20 20 20 20 20  end="")��#     
0000000000003860 69 66 20 63 68 69 6C 64 5F 62 20 3C 20 30 3A 0D if child_b < 0:�
0000000000003870 0A 23 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 �#         print
0000000000003880 28 66 22 20 2D 3E 20 4C 45 41 46 20 28 7E 7B 63 (f" -> LEAF (~{c
0000000000003890 68 69 6C 64 5F 62 7D 3D 7B 68 65 78 28 7E 63 68 hild_b}={hex(~ch
00000000000038A0 69 6C 64 5F 62 29 7D 29 22 29 0D 0A 23 20 20 20 ild_b)})")��#   
00000000000038B0 20 20 65 6C 69 66 20 63 68 69 6C 64 5F 62 20 3D   elif child_b =
00000000000038C0 3D 20 30 20 61 6E 64 20 6E 6F 64 65 5B 27 63 68 = 0 and node['ch
00000000000038D0 69 6C 64 5F 66 27 5D 20 3D 3D 20 30 3A 0D 0A 23 ild_f'] == 0:��#
00000000000038E0 20 20 20 20 20 20 20 20 20 70 72 69 6E 74 28 22          print("
00000000000038F0 20 2D 3E 20 4C 45 41 46 20 28 5A 65 72 6F 29 22  -> LEAF (Zero)"
0000000000003900 29 0D 0A 23 20 20 20 20 20 23 20 2D 2D 2D 20 21 )��#     # --- !
0000000000003910 21 21 20 41 64 64 20 6C 6F 67 69 63 20 68 65 72 !! Add logic her
0000000000003920 65 20 62 61 73 65 64 20 6F 6E 20 63 68 6F 73 65 e based on chose
0000000000003930 6E 20 70 6F 69 6E 74 65 72 20 69 6E 74 65 72 70 n pointer interp
0000000000003940 72 65 74 61 74 69 6F 6E 20 21 21 21 20 2D 2D 2D retation !!! ---
0000000000003950 0D 0A 23 20 20 20 20 20 23 20 45 78 61 6D 70 6C ��#     # Exampl
0000000000003960 65 20 69 66 20 42 79 74 65 20 4F 66 66 73 65 74 e if Byte Offset
0000000000003970 3A 0D 0A 23 20 20 20 20 20 65 6C 69 66 20 63 68 :��#     elif ch
0000000000003980 69 6C 64 5F 62 20 25 20 4E 4F 44 45 5F 53 49 5A ild_b % NODE_SIZ
0000000000003990 45 20 3D 3D 20 30 20 61 6E 64 20 30 20 3C 3D 20 E == 0 and 0 <= 
00000000000039A0 63 68 69 6C 64 5F 62 20 3C 20 6C 75 6D 70 5F 6C child_b < lump_l
00000000000039B0 65 6E 67 74 68 3A 0D 0A 23 20 20 20 20 20 20 20 ength:��#       
00000000000039C0 20 20 20 6E 65 78 74 5F 69 6E 64 65 78 5F 62 20    next_index_b 
00000000000039D0 3D 20 63 68 69 6C 64 5F 62 20 2F 2F 20 4E 4F 44 = child_b // NOD
00000000000039E0 45 5F 53 49 5A 45 0D 0A 23 20 20 20 20 20 20 20 E_SIZE��#       
00000000000039F0 20 20 20 70 72 69 6E 74 28 66 22 20 2D 3E 20 4E    print(f" -> N
0000000000003A00 6F 64 65 20 7B 6E 65 78 74 5F 69 6E 64 65 78 5F ode {next_index_
0000000000003A10 62 7D 22 29 0D 0A 23 20 20 20 20 20 20 20 20 20 b}")��#         
0000000000003A20 20 74 72 61 76 65 72 73 65 5F 62 73 70 5F 74 72  traverse_bsp_tr
0000000000003A30 65 65 28 6E 6F 64 65 73 2C 20 6E 65 78 74 5F 69 ee(nodes, next_i
0000000000003A40 6E 64 65 78 5F 62 2C 20 6C 75 6D 70 5F 73 74 61 ndex_b, lump_sta
0000000000003A50 72 74 5F 6F 66 66 73 65 74 2C 20 6E 75 6D 5F 6E rt_offset, num_n
0000000000003A60 6F 64 65 73 2C 20 6C 75 6D 70 5F 6C 65 6E 67 74 odes, lump_lengt
0000000000003A70 68 2C 20 76 69 73 69 74 65 64 2C 20 69 6E 64 65 h, visited, inde
0000000000003A80 6E 74 20 2B 20 22 20 20 20 20 22 2C 20 6D 61 78 nt + "    ", max
0000000000003A90 5F 64 65 70 74 68 20 2D 20 31 29 0D 0A 23 20 20 _depth - 1)��#  
0000000000003AA0 20 20 20 65 6C 73 65 3A 0D 0A 23 20 20 20 20 20    else:��#     
0000000000003AB0 20 20 20 20 20 70 72 69 6E 74 28 22 20 2D 3E 20      print(" -> 
0000000000003AC0 3F 20 28 55 6E 6B 6E 6F 77 6E 2F 49 6E 76 61 6C ? (Unknown/Inval
0000000000003AD0 69 64 29 22 29 0D 0A 0D 0A 0D 0A 23 20 2D 2D 2D id)")������# ---
0000000000003AE0 20 4D 61 69 6E 20 45 78 65 63 75 74 69 6F 6E 20  Main Execution 
0000000000003AF0 2D 2D 2D 0D 0A 64 65 66 20 6D 61 69 6E 28 29 3A ---��def main():
0000000000003B00 0D 0A 20 20 20 20 73 63 72 69 70 74 5F 64 69 72 ��    script_dir
0000000000003B10 20 3D 20 50 61 74 68 28 5F 5F 66 69 6C 65 5F 5F  = Path(__file__
0000000000003B20 29 2E 70 61 72 65 6E 74 20 23 20 47 65 74 20 74 ).parent # Get t
0000000000003B30 68 65 20 64 69 72 65 63 74 6F 72 79 20 6F 66 20 he directory of 
0000000000003B40 74 68 65 20 63 75 72 72 65 6E 74 20 73 63 72 69 the current scri
0000000000003B50 70 74 0D 0A 20 20 20 20 70 72 69 6E 74 28 66 22 pt��    print(f"
0000000000003B60 5B 2A 5D 20 53 65 61 72 63 68 69 6E 67 20 66 6F [*] Searching fo
0000000000003B70 72 20 2E 62 73 70 20 66 69 6C 65 73 20 72 65 63 r .bsp files rec
0000000000003B80 75 72 73 69 76 65 6C 79 20 69 6E 3A 20 7B 73 63 ursively in: {sc
0000000000003B90 72 69 70 74 5F 64 69 72 7D 22 29 0D 0A 0D 0A 20 ript_dir}")���� 
0000000000003BA0 20 20 20 62 73 70 5F 66 69 6C 65 73 20 3D 20 6C    bsp_files = l
0000000000003BB0 69 73 74 28 73 63 72 69 70 74 5F 64 69 72 2E 72 ist(script_dir.r
0000000000003BC0 67 6C 6F 62 28 22 2A 2E 62 73 70 22 29 29 20 23 glob("*.bsp")) #
0000000000003BD0 20 46 69 6E 64 20 61 6C 6C 20 2E 62 73 70 20 66  Find all .bsp f
0000000000003BE0 69 6C 65 73 20 72 65 63 75 72 73 69 76 65 6C 79 iles recursively
0000000000003BF0 0D 0A 0D 0A 20 20 20 20 69 66 20 6E 6F 74 20 62 ����    if not b
0000000000003C00 73 70 5F 66 69 6C 65 73 3A 0D 0A 20 20 20 20 20 sp_files:��     
0000000000003C10 20 20 20 70 72 69 6E 74 28 22 5C 6E 5B 21 5D 20    print("\n[!] 
0000000000003C20 4E 6F 20 2E 62 73 70 20 66 69 6C 65 73 20 66 6F No .bsp files fo
0000000000003C30 75 6E 64 20 69 6E 20 74 68 65 20 73 63 72 69 70 und in the scrip
0000000000003C40 74 27 73 20 64 69 72 65 63 74 6F 72 79 20 6F 72 t's directory or
0000000000003C50 20 73 75 62 64 69 72 65 63 74 6F 72 69 65 73 2E  subdirectories.
0000000000003C60 22 29 0D 0A 20 20 20 20 20 20 20 20 72 65 74 75 ")��        retu
0000000000003C70 72 6E 0D 0A 0D 0A 20 20 20 20 70 72 69 6E 74 28 rn����    print(
0000000000003C80 66 22 5B 2A 5D 20 46 6F 75 6E 64 20 7B 6C 65 6E f"[*] Found {len
0000000000003C90 28 62 73 70 5F 66 69 6C 65 73 29 7D 20 2E 62 73 (bsp_files)} .bs
0000000000003CA0 70 20 66 69 6C 65 28 73 29 2E 22 29 0D 0A 0D 0A p file(s).")����
0000000000003CB0 20 20 20 20 66 6F 75 6E 64 5F 66 69 6C 65 73 20     found_files 
0000000000003CC0 3D 20 30 0D 0A 20 20 20 20 66 6F 72 20 66 69 6C = 0��    for fil
0000000000003CD0 65 70 61 74 68 20 69 6E 20 62 73 70 5F 66 69 6C epath in bsp_fil
0000000000003CE0 65 73 3A 20 23 20 49 74 65 72 61 74 65 20 74 68 es: # Iterate th
0000000000003CF0 72 6F 75 67 68 20 66 6F 75 6E 64 20 66 69 6C 65 rough found file
0000000000003D00 73 0D 0A 20 20 20 20 20 20 20 20 69 66 20 66 69 s��        if fi
0000000000003D10 6C 65 70 61 74 68 2E 69 73 5F 66 69 6C 65 28 29 lepath.is_file()
0000000000003D20 3A 20 23 20 45 6E 73 75 72 65 20 69 74 27 73 20 : # Ensure it's 
0000000000003D30 61 63 74 75 61 6C 6C 79 20 61 20 66 69 6C 65 0D actually a file�
0000000000003D40 0A 20 20 20 20 20 20 20 20 20 20 20 20 66 6F 75 �            fou
0000000000003D50 6E 64 5F 66 69 6C 65 73 20 2B 3D 20 31 0D 0A 20 nd_files += 1�� 
0000000000003D60 20 20 20 20 20 20 20 20 20 20 20 61 6E 61 6C 79            analy
0000000000003D70 7A 65 5F 62 73 70 5F 6E 6F 64 65 73 28 66 69 6C ze_bsp_nodes(fil
0000000000003D80 65 70 61 74 68 29 0D 0A 20 20 20 20 20 20 20 20 epath)��        
0000000000003D90 23 20 4E 6F 20 6E 65 65 64 20 66 6F 72 20 61 6E # No need for an
0000000000003DA0 20 65 6C 73 65 20 68 65 72 65 20 61 73 20 72 67  else here as rg
0000000000003DB0 6C 6F 62 20 73 68 6F 75 6C 64 20 6F 6E 6C 79 20 lob should only 
0000000000003DC0 72 65 74 75 72 6E 20 66 69 6C 65 73 2F 64 69 72 return files/dir
0000000000003DD0 73 20 6D 61 74 63 68 69 6E 67 20 70 61 74 74 65 s matching patte
0000000000003DE0 72 6E 0D 0A 0D 0A 20 20 20 20 69 66 20 66 6F 75 rn����    if fou
0000000000003DF0 6E 64 5F 66 69 6C 65 73 20 3D 3D 20 30 3A 20 23 nd_files == 0: #
0000000000003E00 20 53 68 6F 75 6C 64 20 74 65 63 68 6E 69 63 61  Should technica
0000000000003E10 6C 6C 79 20 6E 6F 74 20 68 61 70 70 65 6E 20 69 lly not happen i
0000000000003E20 66 20 62 73 70 5F 66 69 6C 65 73 20 6C 69 73 74 f bsp_files list
0000000000003E30 20 77 61 73 20 6E 6F 74 20 65 6D 70 74 79 2C 20  was not empty, 
0000000000003E40 62 75 74 20 67 6F 6F 64 20 70 72 61 63 74 69 63 but good practic
0000000000003E50 65 0D 0A 20 20 20 20 20 20 20 20 70 72 69 6E 74 e��        print
0000000000003E60 28 22 5C 6E 5B 21 5D 20 4E 6F 20 76 61 6C 69 64 ("\n[!] No valid
0000000000003E70 20 2E 62 73 70 20 66 69 6C 65 73 20 77 65 72 65  .bsp files were
0000000000003E80 20 70 72 6F 63 65 73 73 65 64 20 28 74 68 69 73  processed (this
0000000000003E90 20 6D 69 67 68 74 20 69 6E 64 69 63 61 74 65 20  might indicate 
0000000000003EA0 61 6E 20 69 73 73 75 65 29 2E 22 29 0D 0A 20 20 an issue).")��  
0000000000003EB0 20 20 65 6C 73 65 3A 0D 0A 20 20 20 20 20 20 20   else:��       
0000000000003EC0 20 70 72 69 6E 74 28 22 5C 6E 2D 2D 2D 20 41 6E  print("\n--- An
0000000000003ED0 61 6C 79 73 69 73 20 43 6F 6D 70 6C 65 74 65 20 alysis Complete 
0000000000003EE0 2D 2D 2D 22 29 0D 0A 0D 0A 69 66 20 5F 5F 6E 61 ---")����if __na
0000000000003EF0 6D 65 5F 5F 20 3D 3D 20 22 5F 5F 6D 61 69 6E 5F me__ == "__main_
0000000000003F00 5F 22 3A 0D 0A 20 20 20 20 6D 61 69 6E 28 29    _":��    main()


